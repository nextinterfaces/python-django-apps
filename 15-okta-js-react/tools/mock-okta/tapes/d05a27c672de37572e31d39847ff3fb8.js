var path = require("path");

/**
 * GET /assets/js/mvc/loginpage/initLoginPage.pack.e6e54ac65131a6c36306a4cd5260a8fe.js
 *
 * host: rain.okta1.com:1802
 * connection: keep-alive
 * user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0
 * accept: * / *
 * accept-encoding: gzip
 * accept-language: en-US
 * cookie: DT=DI0EkmlTG6BRuCK-KmuzEW1tw; t=default; JSESSIONID=32318D9749E47BC65D54C4524953822B
 * cache-control: no-cache, no-store
 * pragma: no-cache
 */

module.exports = function (req, res) {
  res.statusCode = 200;

  res.setHeader("server", "Apache-Coyote/1.1");
  res.setHeader("accept-ranges", "bytes");
  res.setHeader("etag", "W/\"1934722-1508287483000\"");
  res.setHeader("last-modified", "Wed, 18 Oct 2017 00:44:43 GMT");
  res.setHeader("content-type", "text/javascript");
  res.setHeader("content-length", "1934722");
  res.setHeader("date", "Wed, 25 Oct 2017 18:32:07 GMT");

  res.setHeader("x-yakbak-tape", path.basename(__filename, ".js"));

  res.write(new Buffer("dmFyIE9rdGFMb2dpbiA9IE9rdGFMb2dpbiB8fCB7fTsgT2t0YUxvZ2luWyJpbml0TG9naW5QYWdlIl0gPQovKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwCi8qKioqKiovIAkvLyBUaGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAl2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9OwoKLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7CgovKioqKioqLyAJCS8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQovKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKQovKioqKioqLyAJCQlyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0czsKCi8qKioqKiovIAkJLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSkKLyoqKioqKi8gCQl2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7Ci8qKioqKiovIAkJCWV4cG9ydHM6IHt9LAovKioqKioqLyAJCQlpZDogbW9kdWxlSWQsCi8qKioqKiovIAkJCWxvYWRlZDogZmFsc2UKLyoqKioqKi8gCQl9OwoKLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKCi8qKioqKiovIAkJLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAovKioqKioqLyAJCW1vZHVsZS5sb2FkZWQgPSB0cnVlOwoKLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KCgovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7CgovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7CgovKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOwoKLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewo=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("YSwgSW5jLicgfSk7CgkgIH0KCSAgLy8gVG8gZGlzYWJsZSB0aGUgdmFyaW91cyBicm93c2VycycgbWVjaGFuaXNtcyBmb3Igc2F2aW5nIHBhc3N3b3Jkcywgd2UgZG8gdGhpczoKCSAgLy8gVGhlIHNpZ24taW4gd2lkZ2V0IHNldHMgb2ZmIGEgdHJpZ2dlciBvbmNlIHRoZSBwcmltYXJ5IGF1dGggLyByZXNldCBwYXNzd29yZCBmb3JtIGlzIGxvYWRlZAoJICAvLyBXZSBjYXB0dXJlIHRoZSBldmVudCBoZXJlIGFuZCBhZGQgYnJvd3NlciBzcGVjaWZpYyBwYXNzd29yZCBqYW1tZXJzIGFzIGJlbG93OgoJICAvLyAxKSBTYWZhcmkgcmVxdWlyZXMgYW4gZW1wdHkgZXh0cmEgcGFzc3dvcmQgZmllbGQgYXQgdGhlIHRvcCwKCSAgLy8gICAgd2hpY2ggaXMgInZpc2libGUiIGFuZCBvbiB0aGUgc2NyZWVuLiBXZSBnZXQgYXJvdW5kIHRoaXMgd2l0aCBpbmplY3RpbmcKCSAgLy8gICAgZWxlbWVudHMgd2l0aCB3aWR0aCBhbmQgaGVpZ2h0IGVxdWFsIHRvIHplcm8KCSAgLy8gMikgRmlyZWZveCByZXF1aXJlcyBleHRyYSBib2d1cyBmaWxsZWQgcGFzc3dvcmQgZWxlbWVudHMKCSAgLy8gMykgQ2hyb21lIGxvb2tzIGZvciBhIHBhc3N3b3JkIGZpZWxkcyBhbmQgYSBuZWFyZXN0IHRleHQKCSAgLy8gICAgZmllbGQgdG8gZGV0ZWN0IHVzZXJuYW1lLXBhc3N3b3JkIHBhaXIuIFdlIGdldAoJICAvLyAgICBhcm91bmQgdGhpcyBieSBhZGRpbmcgYWRkaXRpb25hbCB1c2VybmFtZS1wYXNzd29yZCBwYWlycwoJICAvLyAgICB0byB0cmljayB0aGUgYnJvd3Nlci4KCSAgLy8gICAgQWRkaXRpb25hbGx5LCBjaHJvbWUgcmVxdWlyZXMgdGhlIGFkZGl0aW9uYWwgZWxlbWVudHMgdG8KCSAgLy8gICAgYmUgcHJlcGVuZGVkCgkgIC8vIDQpIFRPRE86IE90aGVyIGJyb3dzZXJzIChJRSkKCgkgIGlmIChjb25maWcucHJldmVudEJyb3dzZXJGcm9tU2F2aW5nT2t0YVBhc3N3b3JkKSB7CgkgICAgb2t0YVNpZ25Jbi5vbigncGFnZVJlbmRlcmVkJywgZnVuY3Rpb24gKCkgewoJICAgICAgLy8gT25jZSBwYWdlIGlzIHJlbmRlcmVkLCBhZGQgcGFzc3dvcmQgamFtbWVycyBpZiBwYXNzd29yZCBpbnB1dHMKCSAgICAgIC8vIGFyZSBwcmVzZW50IG9uIHRoZSByZW5kZXJlZCBwYWdlCgkgICAgICB2YXIgcGFzc3dvcmRGaWVsZHMgPSAkKCcjb2t0YS1zaWduLWluIDpwYXNzd29yZCcpOwoJICAgICAgaWYgKHBhc3N3b3JkRmllbGRzLmxlbmd0aCA+IDApIHsKCSAgICAgICAgVXRpbC5hZGRQYXNzd29yZEphbW1lcnMoJCgnI29rdGEtc2lnbi1pbiBmb3JtJykpOwoJICAgICAgfQoJICAgIH0pOwoJICB9Cgl9OwoKLyoqKi8gfSksCi8qIDEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsndXNlIHN0cmljdCc7CgoJLy8gUG9ydGVkIG92ZXIgZnJvbSB0aGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb246CgkvLyAvanMvc2VjdGlvbnMvbW9iaWxlLXNzby1sb2dpbi5qcwoJLyogZXNsaW50IGNhbWVsY2FzZTogMCAqLwoJIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW19fd2VicGFja19yZXF1aXJlX18oMiksIF9fd2VicGFja19yZXF1aXJlX18oMyksIF9fd2VicGFja19yZXF1aXJlX18oNCldLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9IGZ1bmN0aW9uICgkLCBVdGlsLCBIYW5kbGViYXJzKSB7CgoJICB2YXIgdHBsID0gSGFuZGxlYmFycy5jb21waWxlLAoJICAgICAgdG9rZW5UcGwgPSB0cGwoJy9vYXV0aDIvdG9rZW4/Y2xpZW50X2lkPXt7Y2xpZW50SWR9fSZncmFudF90eXBlPXNlc3Npb24mY29kZT17e2NsaWVudENvZGV9fScpLAoJICAgICAgY29kZVRwbCA9IHRwbCgnL29hdXRoMi9jb2RlP2NsaWVudF9pZD17e2NsaWVudElkfX0nKSwKCSAgICAgIG9rdGFTU09UcGwgPSB0cGwoJ29rdGFzc286Ly92MS9vYXV0aC92YWxpZGF0ZS97e3VzZXJDb2RlfX0nKSwKCSAgICAgIG9rdGFVbml2ZXJzYWxMaW5rVHBsID0gdHBsKCd7e2RvbWFpbn19L2F1dGgvb2t0YW1vYmlsZS8/c2l0ZU5hbWU9e3tzaXRlTmFtZX19Jm9yZz17e29yZ319JyArICcmdXNlck5hbWU9e3t1c2VyTmFtZX19JmFwcE5hbWU9e3thcHBOYW1lfX0mYXBwRXh0ZXJuYWxLZXk9e3thcHBFeHRlcm5hbEtleX19JyArICcmYXBwTGlua0lkPXt7YXBwTGlua0lkfX0mdXNlckNvZGU9e3t1c2VyQ29kZX19JnRpbWVvdXRJbnRlcnZhbD17e3RpbWVvdXRJbnRlcnZhbH19JyksCgkgICAgICBtb2JpbGVMaW5rID0gJ2h0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS91cy9hcHAvb2t0YS1tb2JpbGUvaWQ1ODA3MDkyNTE/bXQ9OCc7CgoJICAvKiBlc2xpbnQgbWF4LXBhcmFtczogWzIsIDZdLCBtYXgtc3RhdGVtZW50czogWzIsIDI5XSAqLwoJICByZXR1cm4gZnVuY3Rpb24gaW5pdE1vYmlsZVNTTyhmcm9tVXJpLCBwYXJhbXMpIHsKCSAgICB2YXIgbGlua1BhcmFtcyA9IHBhcmFtczsKCSAgICB2YXIgb2t0YU1vYmlsZSA9IHsKCSAgICAgIGNsaWVudENvZGU6IHVuZGVmaW5lZCwKCSAgICAgIHVzZXJDb2RlOiB1bmRlZmluZWQsCgkgICAgICBwb2xsSW50ZXJ2YWw6IDUwMDAsCgkgICAgICAvLyAxMCBtaW50dWVzIC0tIE9rdGEgT0F1dGggY29kZSBleHBpcmF0aW9uIHRpbWU7IHNlZSBPa3RhT0F1dGgyMFNlcnZpY2UuT0FVVEhfQ09ERV9FWFBJUkFUSU9OX01JTlVURVMKCSAgICAgIHRpbWVvdXRJbnRlcnZhbDogNjAwMDAwLAoJICAgICAgY2xpZW50SWQ6ICdjYXBoeGNRS1BPVk9JSlVHQVhJQycsCgkgICAgICByZXF1aXJlVXNlclRyaWdnZXI6IHRydWUsCgkgICAgICBtYW51YWxMb2dpbjogZmFsc2UKCSAgICB9OwoKCSAgICB2YXIgdGltZW91dFRpbWVNczsKCgkgICAgdmFyIHNjcmVlbnMgPSB7CgkgICAgICBlbnRyeUxvYWRpbmdTY3JlZW5JZDogJ21vYmlsZVNTT19lbnRyeV9sb2FkaW5nJywKCSAgICAgIGFjY2Vzc1NjcmVlbklkOiAnbW9iaWxlU1NPX2FjY2VzcycsCgkgICAgICBvcGVuaW5nU2NyZWVuSWQ6ICdtb2JpbGVTU09fb3BlbmluZycsCgkgICAgICBsb2FkaW5nU2NyZWVuSWQ6ICdtb2JpbGVTU09fbG9hZGluZycsCgkgICAgICB0cmFkaXRpb25hbExvZ2luU2NyZWVuSWQ6ICdtb2JpbGVTU09fdHJhZGl0aW9uYWxMb2dpbicsCgkgICAgICBlcnJvclNjcmVlbklkOiAnbW9iaWxlU1NPX2Vycm9yJwoJICAgIH07CgoJICAgIGZ1bmN0aW9uIHNob3dTY3JlZW4oc2NyZWVuSWQpIHsKCSAgICAgICQuZWFjaChzY3JlZW5zLCBmdW5jdGlvbiAoa2V5LCB2YWwpIHsKCSAgICAgICAgJCgnIycgKyB2YWwpLnRvZ2dsZSh2YWwgPT09IHNjcmVlbklkKTsKCSAgICAgIH0pOwoJICAgIH0KCgkgICAgZnVuY3Rpb24gaGlkZUxvYWRpbmdTY3JlZW4oc2NyZWVuSWQpIHsKCSAgICAgICQoJyMnICsgc2NyZWVuSWQpLmhpZGUoKTsKCSAgICB9CgoJICAgIGZ1bmN0aW9uIHVzZXJDb2RlU3VjY2Vzc0NhbGxiYWNrKHVzZXJDb2RlKSB7CgkgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG9rdGFTU09UcGwoeyB1c2VyQ29kZTogdXNlckNvZGUgfSk7CgkgICAgfQoKCSAgICBmdW5jdGlvbiB1c2VyQ29kZVN1Y2Nlc3NDYWxsYmFja0ZvclVpbnZlcnNhbExpbmsobGlua1BhcmFtcykgewoJICAgICAgdmFyIGxpbmsgPSBva3RhVW5pdmVyc2FsTGlua1RwbCh7IGRvbWFpbjogbGlua1BhcmFtcy5kb21haW4sCgkgICAgICAgIHNpdGVOYW1lOiBsaW5rUGFyYW1zLnNpdGVOYW1lLAoJICAgICAgICBvcmc6IGxpbmtQYXJhbXMub3JnLAoJICAgICAgICB1c2VyTmFtZTogbGlua1BhcmFtcy51c2VyTmFtZSwKCSAgICAgICAgYXBwTmFtZTogbGlua1BhcmFtcy5hcHBOYW1lLAoJICAgICAgICBhcHBFeHRlcm5hbEtleTogbGlua1BhcmFtcy5hcHBFeHRlcm5hbEtleSwKCSAgICAgICAgYXBwTGlua0lkOiBsaW5rUGFyYW1zLmFwcExpbmtJZCwKCSAgICAgICAgdXNlckNvZGU6IGxpbmtQYXJhbXMudXNlckNvZGUsCgkgICAgICAgIHRpbWVvdXRJbnRlcnZhbDogb2t0YU1vYmlsZS50aW1lb3V0SW50ZXJ2YWwKCSAgICAgIH0pICsgJyZyZWRpcmVjdFVybD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGxpbmtQYXJhbXMucmVkaXJlY3RVcmwpOwoJICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBsaW5rOwoJICAgIH0KCgkgICAgZnVuY3Rpb24gcG9sbE9uT0F1dGhDb2RlKCkgewoJICAgICAgaWYgKG9rdGFNb2JpbGUubWFudWFsTG9naW4pIHsKCSAgICAgICAgcmV0dXJuOwoJICAgICAgfQoKCSAgICAgIHZhciBjdXJyZW50VGltZU1zID0gRGF0ZS5ub3coKTsKCSAgICAgIGlmICh0aW1lb3V0VGltZU1zICE9PSB1bmRlZmluZWQgJiYgY3VycmVudFRpbWVNcyA+IHRpbWVvdXRUaW1lTXMpIHsKCSAgICAgICAgc2hvd1NjcmVlbihzY3JlZW5zLmVycm9yU2NyZWVuSWQpOwoJICAgICAgfQoKCSAgICAgIGlmIChva3RhTW9iaWxlLnRpbWVvdXRUaW1lTXMgPT09IHVuZGVmaW5lZCB8fCBjdXJyZW50VGltZU1zIDw9IHRpbWVvdXRUaW1lTXMgKyBva3RhTW9iaWxlLnRpbWVvdXRJbnRlcnZhbCAqIDEwKSB7CgkgICAgICAgICQuYWpheCh7CgkgICAgICAgICAgdHlwZTogJ1BPU1QnLAoJICAgICAgICAgIHVybDogdG9rZW5UcGwoeyBjbGllbnRJZDogb2t0YU1vYmlsZS5jbGllbnRJZCwgY2xpZW50Q29kZTogb2t0YU1vYmlsZS5jbGllbnRDb2RlIH0pLAoJICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2VzcyhkYXRhKSB7CgkgICAgICAgICAgICBpZiAoZGF0YS5zZXNzaW9uICYmIGRhdGEuc2Vzc2lvbi5sZW5ndGggPiAwKSB7CgkgICAgICAgICAgICAgIFV0aWwucG9zdFRvVXJsKGZyb21VcmksICQoJ2JvZHknKSk7CgkgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICBzZXRUaW1lb3V0KHBvbGxPbk9BdXRoQ29kZSwgb2t0YU1vYmlsZS5wb2xsSW50ZXJ2YWwpOwoJICAgICAgICAgICAgfQoJICAgICAgICAgIH0sCgkgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkgewoJICAgICAgICAgICAgc2V0VGltZW91dChwb2xsT25PQXV0aENvZGUsIG9rdGFNb2JpbGUucG9sbEludGVydmFsKTsKCSAgICAgICAgICB9CgkgICAgICAgIH0pOwoJICAgICAgfQoJICAgIH0KCgkgICAgZnVuY3Rpb24gcmVxdWVzdE9BdXRoQ29kZSgpIHsKCSAgICAgIHRpbWVvdXRUaW1lTXMgPSBEYXRlLm5vdygpICsgb2t0YU1vYmlsZS50aW1lb3V0SW50ZXJ2YWw7CgkgICAgICAkLmFqYXgoewoJICAgICAgICB0eXBlOiAnUE9TVCcsCgkgICAgICAgIHVybDogY29kZVRwbCh7IGNsaWVudElkOiBva3RhTW9iaWxlLmNsaWVudElkIH0pLAoJICAgICAgICBkYXRhVHlwZTogJ2pzb24nLAoJICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHsKCSAgICAgICAgICBva3RhTW9iaWxlLmNsaWVudENvZGUgPSBkYXRhLmNsaWVudF9jb2RlOwoJICAgICAgICAgIG9rdGFNb2JpbGUudXNlckNvZGUgPSBkYXRhLnVzZXJfY29kZTsKCgkgICAgICAgICAgc2hvd1NjcmVlbihzY3JlZW5zLm9wZW5pbmdTY3JlZW5JZCk7CgkgICAgICAgICAgc2V0VGltZW91dChwb2xsT25PQXV0aENvZGUsIG9rdGFNb2JpbGUucG9sbEludGVydmFsKTsKCSAgICAgICAgICB1c2VyQ29kZVN1Y2Nlc3NDYWxsYmFjayhkYXRhLnVzZXJfY29kZSk7CgkgICAgICAgIH0sCgkgICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcigpIHsKCSAgICAgICAgICBzaG93U2NyZWVuKHNjcmVlbnMuZXJyb3JTY3JlZW5JZCk7CgkgICAgICAgIH0KCSAgICAgIH0pOwoJICAgIH0KCgkgICAgZnU=", "base64"));
  res.write(new Buffer("bmN0aW9uIHJlcXVlc3RPQXV0aENvZGVGb3JVaW52ZXJzYWxMaW5rKCkgewoJICAgICAgdGltZW91dFRpbWVNcyA9IERhdGUubm93KCkgKyBva3RhTW9iaWxlLnRpbWVvdXRJbnRlcnZhbDsKCSAgICAgICQuYWpheCh7CgkgICAgICAgIHR5cGU6ICdQT1NUJywKCSAgICAgICAgdXJsOiBjb2RlVHBsKHsgY2xpZW50SWQ6IG9rdGFNb2JpbGUuY2xpZW50SWQgfSksCgkgICAgICAgIGRhdGFUeXBlOiAnanNvbicsCgkgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MoZGF0YSkgewoJICAgICAgICAgIG9rdGFNb2JpbGUuY2xpZW50Q29kZSA9IGRhdGEuY2xpZW50X2NvZGU7CgkgICAgICAgICAgb2t0YU1vYmlsZS51c2VyQ29kZSA9IGRhdGEudXNlcl9jb2RlOwoJICAgICAgICAgIGxpbmtQYXJhbXMudXNlckNvZGUgPSBkYXRhLnVzZXJfY29kZTsKCgkgICAgICAgICAgc2V0VGltZW91dChwb2xsT25PQXV0aENvZGUsIG9rdGFNb2JpbGUucG9sbEludGVydmFsKTsKCSAgICAgICAgICAkKCcjbW9iaWxlRGV2aWNlVHJ1c3RMb2dpbkJ1dHRvbicpLmNsaWNrKGxhdW5jaE9rdGFNb2JpbGVGb3JVbml2ZXJzYWxMaW5rKTsKCSAgICAgICAgICAkKCcjbW9iaWxlRGV2aWNlVHJ1c3RFeHBpcmVkTG9naW5CdXR0b24nKS5jbGljayhwdXJlTGF1bmNoT2t0YU1vYmlsZUZvclVuaXZlcnNhbExpbmspOwoJICAgICAgICB9LAoJICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoKSB7CgkgICAgICAgICAgc2hvd1NjcmVlbihzY3JlZW5zLmVycm9yU2NyZWVuSWQpOwoJICAgICAgICB9CgkgICAgICB9KTsKCSAgICB9CgoJICAgIGZ1bmN0aW9uIGxhdW5jaE9rdGFNb2JpbGVGb3JVbml2ZXJzYWxMaW5rKCkgewoJICAgICAgc2hvd1NjcmVlbihzY3JlZW5zLmxvYWRpbmdTY3JlZW5JZCk7CgkgICAgICB1c2VyQ29kZVN1Y2Nlc3NDYWxsYmFja0ZvclVpbnZlcnNhbExpbmsobGlua1BhcmFtcyk7CgkgICAgfQoKCSAgICBmdW5jdGlvbiBwdXJlTGF1bmNoT2t0YU1vYmlsZUZvclVuaXZlcnNhbExpbmsoKSB7CgkgICAgICBzaG93U2NyZWVuKHNjcmVlbnMubG9hZGluZ1NjcmVlbklkKTsKCSAgICAgIHVzZXJDb2RlU3VjY2Vzc0NhbGxiYWNrRm9yVWludmVyc2FsTGluayhsaW5rUGFyYW1zKTsKCSAgICB9CgoJICAgIGZ1bmN0aW9uIHNob3dUcmFkaXRpb25hbExvZ2luKCkgewoJICAgICAgLy8gTm90ZTogVGhpcyBkaWZmZXJzIGZyb20gdGhlIG9yaWdpbmFsIGltcGxlbWVudGF0aW9uIGluIHRoYXQgaXQganVzdAoJICAgICAgLy8gdG9nZ2xlcyB0byB0aGUgbmV3IGxvZ2luIGZsb3cKCSAgICAgIC8vIDEuIFJlbW92ZSBhbGwgc2NyZWVucwoJICAgICAgc2hvd1NjcmVlbigpOwoJICAgICAgb2t0YU1vYmlsZS5tYW51YWxMb2dpbiA9IHRydWU7CgkgICAgICAvLyAyLiBEaXNwbGF5IG5ldyBsb2dpbiBmbG93LCBtaW51cyBmb290ZXIKCSAgICAgICQoJyNzaWduaW4tY29udGFpbmVyJykuc2hvdygpOwoJICAgICAgJCgnI21vYmlsZVNTT19vdmVybGF5JykuaGlkZSgpOwoJICAgIH0KCgkgICAgZnVuY3Rpb24gaW5pdCgpIHsKCSAgICAgIGhpZGVMb2FkaW5nU2NyZWVuKHNjcmVlbnMuZW50cnlMb2FkaW5nU2NyZWVuSWQpOwoJICAgICAgaWYgKG9rdGFNb2JpbGUucmVxdWlyZVVzZXJUcmlnZ2VyID09PSBmYWxzZSkgewoJICAgICAgICBzaG93U2NyZWVuKHNjcmVlbnMub3BlbmluZ1NjcmVlbklkKTsKCSAgICAgICAgcmVxdWVzdE9BdXRoQ29kZSgpOwoJICAgICAgfSBlbHNlIHsKCSAgICAgICAgaWYgKGxpbmtQYXJhbXMgJiYgbGlua1BhcmFtcy5kb21haW4pIHsKCSAgICAgICAgICByZXF1ZXN0T0F1dGhDb2RlRm9yVWludmVyc2FsTGluaygpOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICQoJyNtb2JpbGVTU09Mb2dpbkJ1dHRvbicpLmNsaWNrKHJlcXVlc3RPQXV0aENvZGUpOwoJICAgICAgICB9CgkgICAgICB9CgoJICAgICAgJCgnI2dldE9rdGFNb2JpbGVCdXR0b24nKS5jbGljayhmdW5jdGlvbiAoKSB7CgkgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbW9iaWxlTGluazsKCSAgICAgIH0pOwoKCSAgICAgICQoJyN0cmFkaXRpb25hbExvZ2luQnV0dG9uLCAjcmV0dXJuVG9Mb2dpbkJ1dHRvbicpLmNsaWNrKHNob3dUcmFkaXRpb25hbExvZ2luKTsKCSAgICB9CgoJICAgICQoaW5pdCk7CgkgIH07Cgl9LmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7CgovKioqLyB9KSwKLyogMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qIQoJICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2MS4xMi40CgkgKiBodHRwOi8vanF1ZXJ5LmNvbS8KCSAqCgkgKiBJbmNsdWRlcyBTaXp6bGUuanMKCSAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vCgkgKgoJICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKCSAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZQoJICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQoJICoKCSAqIERhdGU6IDIwMTYtMDUtMjBUMTc6MTdaCgkgKi8KCgkoZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHsKCgkJaWYgKCB0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICJvYmplY3QiICkgewoJCQkvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcA==", "base64"));
  res.write(new Buffer("ZXIgYHdpbmRvd2AKCQkJLy8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS4KCQkJLy8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGAKCQkJLy8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuCgkJCS8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuCgkJCS8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoImpxdWVyeSIpKHdpbmRvdyk7CgkJCS8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uCgkJCW1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID8KCQkJCWZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDoKCQkJCWZ1bmN0aW9uKCB3ICkgewoJCQkJCWlmICggIXcuZG9jdW1lbnQgKSB7CgkJCQkJCXRocm93IG5ldyBFcnJvciggImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQiICk7CgkJCQkJfQoJCQkJCXJldHVybiBmYWN0b3J5KCB3ICk7CgkJCQl9OwoJCX0gZWxzZSB7CgkJCWZhY3RvcnkoIGdsb2JhbCApOwoJCX0KCgkvLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldAoJfSh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkgewoKCS8vIFN1cHBvcnQ6IEZpcmVmb3ggMTgrCgkvLyBDYW4ndCBiZSBpbiBzdHJpY3QgbW9kZSwgc2V2ZXJhbCBsaWJzIGluY2x1ZGluZyBBU1AuTkVUIHRyYWNlCgkvLyB0aGUgc3RhY2sgdmlhIGFyZ3VtZW50cy5jYWxsZXIuY2FsbGVlIGFuZCBGaXJlZm94IGRpZXMgaWYKCS8vIHlvdSB0cnkgdG8gdHJhY2UgdGhyb3VnaCAidXNlIHN0cmljdCIgY2FsbCBjaGFpbnMuICgjMTMzMzUpCgkvLyJ1c2Ugc3RyaWN0IjsKCXZhciBkZWxldGVkSWRzID0gW107CgoJdmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50OwoKCXZhciBzbGljZSA9IGRlbGV0ZWRJZHMuc2xpY2U7CgoJdmFyIGNvbmNhdCA9IGRlbGV0ZWRJZHMuY29uY2F0OwoKCXZhciBwdXNoID0gZGVsZXRlZElkcy5wdXNoOwoKCXZhciBpbmRleE9mID0gZGVsZXRlZElkcy5pbmRleE9mOwoKCXZhciBjbGFzczJ0eXBlID0ge307CgoJdmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZzsKCgl2YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTsKCgl2YXIgc3VwcG9ydCA9IHt9OwoKCgoJdmFyCgkJdmVyc2lvbiA9ICIxLjEyLjQiLAoKCQkvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeQoJCWpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHsKCgkJCS8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJwoJCQkvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKQoJCQlyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApOwoJCX0sCgoJCS8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5CgkJLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQCgkJcnRyaW0gPSAvXltcc1x1RkVGRlx4QTBdK3xbXHNcdUZFRkZceEEwXSskL2csCgoJCS8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZwoJCXJtc1ByZWZpeCA9IC9eLW1zLS8sCgkJcmRhc2hBbHBoYSA9IC8tKFtcZGEtel0pL2dpLAoKCQkvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpCgkJZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHsKCQkJcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpOwoJCX07CgoJalF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHsKCgkJLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZAoJCWpxdWVyeTogdmVyc2lvbiwKCgkJY29uc3RydWN0b3I6IGpRdWVyeSwKCgkJLy8gU3RhcnQgd2l0aCBhbiBlbXB0eSBzZWxlY3RvcgoJCXNlbGVjdG9yOiAiIiwKCgkJLy8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwCgkJbGVuZ3RoOiAwLAoKCQl0b0FycmF5OiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTsKCQl9LAoKCQkvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SCgkJLy8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXkKCQlnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7CgkJCXJldHVybiBudW0gIT0gbnVsbCA/CgoJCQkJLy8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldAoJCQkJKCBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdICkgOgoKCQkJCS8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXkKCQkJCXNsaWNlLmNhbGwoIHRoaXMgKTsKCQl9LAoKCQkvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrCgkJLy8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpCgkJcHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7CgoJCQkvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldAoJCQl2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7CgoJCQkvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbg==", "base64"));
  res.write(new Buffer("Y2UpCgkJCXJldC5wcmV2T2JqZWN0ID0gdGhpczsKCQkJcmV0LmNvbnRleHQgPSB0aGlzLmNvbnRleHQ7CgoJCQkvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldAoJCQlyZXR1cm4gcmV0OwoJCX0sCgoJCS8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuCgkJZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkgewoJCQlyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7CgkJfSwKCgkJbWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7CgkJCQlyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApOwoJCQl9ICkgKTsKCQl9LAoKCQlzbGljZTogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7CgkJfSwKCgkJZmlyc3Q6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5lcSggMCApOwoJCX0sCgoJCWxhc3Q6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5lcSggLTEgKTsKCQl9LAoKCQllcTogZnVuY3Rpb24oIGkgKSB7CgkJCXZhciBsZW4gPSB0aGlzLmxlbmd0aCwKCQkJCWogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7CgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTsKCQl9LAoKCQllbmQ6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTsKCQl9LAoKCQkvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuCgkJLy8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuCgkJcHVzaDogcHVzaCwKCQlzb3J0OiBkZWxldGVkSWRzLnNvcnQsCgkJc3BsaWNlOiBkZWxldGVkSWRzLnNwbGljZQoJfTsKCglqUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkgewoJCXZhciBzcmMsIGNvcHlJc0FycmF5LCBjb3B5LCBuYW1lLCBvcHRpb25zLCBjbG9uZSwKCQkJdGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sCgkJCWkgPSAxLAoJCQlsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLAoJCQlkZWVwID0gZmFsc2U7CgoJCS8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb24KCQlpZiAoIHR5cGVvZiB0YXJnZXQgPT09ICJib29sZWFuIiApIHsKCQkJZGVlcCA9IHRhcmdldDsKCgkJCS8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXQKCQkJdGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307CgkJCWkrKzsKCQl9CgoJCS8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KQoJCWlmICggdHlwZW9mIHRhcmdldCAhPT0gIm9iamVjdCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHsKCQkJdGFyZ2V0ID0ge307CgkJfQoKCQkvLyBleHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWQKCQlpZiAoIGkgPT09IGxlbmd0aCApIHsKCQkJdGFyZ2V0ID0gdGhpczsKCQkJaS0tOwoJCX0KCgkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgoJCQkvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzCgkJCWlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkgewoKCQkJCS8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3QKCQkJCWZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKCQkJCQlzcmMgPSB0YXJnZXRbIG5hbWUgXTsKCQkJCQljb3B5ID0gb3B0aW9uc1sgbmFtZSBdOwoKCQkJCQkvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wCgkJCQkJaWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7CgkJCQkJCWNvbnRpbnVlOwoJCQkJCX0KCgkJCQkJLy8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzCgkJCQkJaWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8CgkJCQkJCSggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHsKCgkJCQkJCWlmICggY29weUlzQXJyYXkgKSB7CgkJCQkJCQljb3B5SXNBcnJheSA9IGZhbHNlOwoJCQkJCQkJY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107CgoJCQkJCQl9IGVsc2UgewoJCQkJCQkJY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307CgkJCQkJCX0KCgkJCQkJCS8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbQoJCQkJCQl0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7CgoJCQkJCS8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXMKCQkJCQl9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJCXRhcmdldFsgbmFtZSBdID0gY29weTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCS8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0CgkJcmV0dXJuIHRhcmdldDsKCX07CgoJalF1ZXJ5LmV4dGVuZCggewoKCQkvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2UKCQlleHBhbmRvOiAialF1ZXJ5IiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXEQvZywgIiIgKSwKCgkJLy8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGUKCQlpc1JlYWR5OiB0cnVlLAoKCQllcnJvcjogZnVuY3Rpb24oIG1zZyApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBtc2cgKTsKCQl9LAoKCQlub29wOiBmdW5jdGlvbigpIHt9LAoKCQkvLyBTZWUgdGVzdC91bml0L2NvcmUuanMgZm9yIGRldGFpbHMgY29uY2VybmluZyBpc0Z1bmN0aW9uLgoJCS8vIFNpbmNlIHZlcnNpb24gMS4zLCBET00gbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGxpa2UgYWxlcnQKCQkvLyBhcmVuJ3Qgc3VwcG9ydGVkLiBUaGV5IHJldHVybiBmYWxzZSBvbiBJRSAoIzI5NjgpLgoJCWlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7CgkJCXJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09ICJmdW5jdGlvbiI7CgkJfSwKCgkJaXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkgewoJCQlyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSAiYXJyYXkiOwoJCX0sCgoJCWlzV2luZG93OiBmdW5jdGlvbiggb2JqICkgewoJCQkvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqLwoJCQlyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09IG9iai53aW5kb3c7CgkJfSwKCgkJaXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkgewoKCQkJLy8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKG51bGx8dHJ1ZXxmYWxzZXwiIikKCQkJLy8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoIjB4Li4uIikKCQkJLy8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOCgkJCS8vIGFkZGluZyAxIGNvcnJlY3RzIGxvc3Mgb2YgcHJlY2lzaW9uIGZyb20gcGFyc2VGbG9hdCAoIzE1MTAwKQoJCQl2YXIgcmVhbFN0cmluZ09iaiA9IG9iaiAmJiBvYmoudG9TdHJpbmcoKTsKCQkJcmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKCByZWFsU3RyaW5nT2JqIC0gcGFyc2VGbG9hdCggcmVhbFN0cmluZ09iaiApICsgMSApID49IDA7CgkJfSwKCgkJaXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHsKCQkJdmFyIG5hbWU7CgkJCWZvciAoIG5hbWUgaW4gb2JqICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJCXJldHVybiB0cnVlOwoJCX0sCgoJCWlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7CgkJCXZhciBrZXk7CgoJCQkvLyBNdXN0IGJlIGFuIE9iamVjdC4KCQkJLy8gQmVjYXVzZSBvZiBJRSwgd2UgYWxzbyBoYXZlIHRvIGNoZWNrIHRoZSBwcmVzZW5jZSBvZiB0aGUgY29uc3RydWN0b3IgcHJvcGVydHkuCgkJCS8vIE1ha2Ugc3VyZSB0aGF0IERPTSBub2RlcyBhbmQgd2luZG93IG9iamVjdHMgZG9uJ3QgcGFzcyB0aHJvdWdoLCBhcyB3ZWxsCgkJCWlmICggIW9iaiB8fCBqUXVlcnkudHlwZSggb2JqICkgIT09ICJvYmplY3QiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQl0cnkgewoKCQkJCS8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3QKCQkJCWlmICggb2JqLmNvbnN0cnVjdG9yICYmCgkJCQkJIWhhc093bi5jYWxsKCBvYmosICJjb25zdHJ1Y3RvciIgKSAmJgoJCQkJCSFoYXNPd24uY2FsbCggb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgImlzUHJvdG90eXBlT2YiICkgKSB7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9IGNhdGNoICggZSApIHsKCgkJCQkvLyBJRTgsOSBXaWxsIHRocm93IGV4Y2VwdGlvbnMgb24gY2VydGFpbiBob3N0IG9iamVjdHMgIzk4OTcKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJLy8gU3VwcG9ydDogSUU8OQoJCQkvLyBIYW5kbGUgaXRlcmF0aW9uIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLgoJCQlpZiAoICFzdXBwb3J0Lm93bkZpcnN0ICkgewoJCQkJZm9yICgga2V5IGluIG9iaiApIHsKCQkJCQlyZXR1cm4gaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7CgkJCQl9CgkJCX0KCgkJCS8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLAoJCQkvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi4KCQkJZm9yICgga2V5IGluIG9iaiApIHt9CgoJCQlyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgfHwgaGFzT3duLmNhbGwoIG9iaiwga2V5ICk7CgkJfSwKCgkJdHlwZTogZnVuY3Rpb24oIG9iaiApIHsKCQkJaWYgKCBvYmogPT0gbnVsbCApIHsKCQkJCXJldHVybiBvYmogKyAiIjsKCQkJfQoJCQlyZXR1cm4gdHlwZW9mIG9iaiA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIG9iaiA9PT0gImZ1bmN0aW9uIiA/CgkJCQljbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8ICJvYmplY3QiIDoKCQkJCXR5cGVvZiBvYmo7CgkJfSwKCgkJLy8gV29ya2Fyb3VuZHMgYmFzZWQgb24gZmluZGluZ3MgYnkgSmltIERyaXNjb2xsCgkJLy8gaHR0cDovL3dlYmxvZ3MuamF2YS5uZXQvYmxvZy9kcmlzY29sbC9hcmNoaXZlLzIwMDkvMDkvMDgvZXZhbC1qYXZhc2NyaXB0LWdsb2JhbC1jb250ZXh0CgkJZ2xvYmFsRXZhbDogZnVuY3Rpb24oIGRhdGEgKSB7CgkJCWlmICggZGF0YSAmJiBqUXVlcnkudHJpbSggZGF0YSApICkgewoKCQkJCS8vIFdlIHVzZSBleGVjU2NyaXB0IG9uIEludGVybmV0IEV4cGxvcmVyCgkJCQkvLyBXZSB1c2UgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIHNvIHRoYXQgY29udGV4dCBpcyB3aW5kb3cKCQkJCS8vIHJhdGhlciB0aGFuIGpRdWVyeSBpbiBGaXJlZm94CgkJCQkoIHdpbmRvdy5leGVjU2NyaXB0IHx8IGZ1bmN0aW9uKCBkYXRhICkgewoJCQkJCXdpbmRvd1sgImV2YWwiIF0uY2FsbCggd2luZG93LCBkYXRhICk7IC8vIGpzY3M6aWdub3JlIHJlcXVpcmVEb3ROb3RhdGlvbgoJCQkJfSApKCBkYXRhICk7CgkJCX0KCQl9LAoKCQkvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzCgkJLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKQoJCWNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHsKCQkJcmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsICJtcy0iICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApOwoJCX0sCgoJCW5vZGVOYW1lOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHsKCQkJcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7CgkJfSwKCgkJZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7CgkJCXZhciBsZW5ndGgsIGkgPSAwOwoKCQkJaWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7CgkJCQlsZW5ndGggPSBvYmoubGVuZ3RoOwoJCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQkJaWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWZvciAoIGkgaW4gb2JqICkgewoJCQkJCWlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkgewoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCXJldHVybiBvYmo7CgkJfSwKCgkJLy8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIElFPDkKCQl0cmltOiBmdW5jdGlvbiggdGV4dCApIHsKCQkJcmV0dXJuIHRleHQgPT0gbnVsbCA/CgkJCQkiIiA6CgkJCQkoIHRleHQgKyAiIiApLnJlcGxhY2UoIHJ0cmltLCAiIiApOwoJCX0sCgoJCS8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHkKCQltYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7CgkJCXZhciByZXQgPSByZXN1bHRzIHx8IFtdOwoKCQkJaWYgKCBhcnIgIT0gbnVsbCApIHsKCQkJCWlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHsKCQkJCQlqUXVlcnkubWVyZ2UoIHJldCwKCQkJCQkJdHlwZW9mIGFyciA9PT0gInN0cmluZyIgPwoJCQkJCQlbIGFyciBdIDogYXJyCgkJCQkJKTsKCQkJCX0gZWxzZSB7CgkJCQkJcHVzaC5jYWxsKCByZXQsIGFyciApOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gcmV0OwoJCX0sCgoJCWluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7CgkJCXZhciBsZW47CgoJCQlpZiAoIGFyciApIHsKCQkJCWlmICggaW5kZXhPZiApIHsKCQkJCQlyZXR1cm4gaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTsKCQkJCX0KCgkJCQlsZW4gPSBhcnIubGVuZ3RoOwoJCQkJaSA9IGkgPyBpIDwgMCA/IE1hdGgubWF4KCAwLCBsZW4gKyBpICkgOiBpIDogMDsKCgkJCQlmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKCgkJCQkJLy8gU2tpcCBhY2Nlc3NpbmcgaW4gc3BhcnNlIGFycmF5cwoJCQkJCWlmICggaSBpbiBhcnIgJiYgYXJyWyBpIF0gPT09IGVsZW0gKSB7CgkJCQkJCXJldHVybiBpOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJcmV0dXJuIC0xOwoJCX0sCgoJCW1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHsKCQkJdmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLAoJCQkJaiA9IDAsCgkJCQlpID0gZmlyc3QubGVuZ3RoOwoKCQkJd2hpbGUgKCBqIDwgbGVuICkgewoJCQkJZmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTsKCQkJfQoKCQkJLy8gU3VwcG9ydDogSUU8OQoJCQkvLyBXb3JrYXJvdW5kIGNhc3Rpbmcgb2YgLmxlbmd0aCB0byBOYU4gb24gb3RoZXJ3aXNlIGFycmF5bGlrZSBvYmplY3RzIChlLmcuLCBOb2RlTGlzdHMpCgkJCWlmICggbGVuICE9PSBsZW4gKSB7CgkJCQl3aGlsZSAoIHNlY29uZFsgaiBdICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJZmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqKysgXTsKCQkJCX0KCQkJfQoKCQkJZmlyc3QubGVuZ3RoID0gaTsKCgkJCXJldHVybiBmaXJzdDsKCQl9LAoKCQlncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7CgkJCXZhciBjYWxsYmFja0ludmVyc2UsCgkJCQltYXRjaGVzID0gW10sCgkJCQlpID0gMCwKCQkJCWxlbmd0aCA9IGVsZW1zLmxlbmd0aCwKCQkJCWNhbGxiYWNrRXhwZWN0ID0gIWludmVydDsKCgkJCS8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXMKCQkJLy8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb24KCQkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgkJCQljYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTsKCQkJCWlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHsKCQkJCQltYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTsKCQkJCX0KCQkJfQoKCQkJcmV0dXJuIG1hdGNoZXM7CgkJfSwKCgkJLy8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5CgkJbWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7CgkJCXZhciBsZW5ndGgsIHZhbHVlLAoJCQkJaSA9IDAsCgkJCQlyZXQgPSBbXTsKCgkJCS8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzCgkJCWlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7CgkJCQlsZW5ndGggPSBlbGVtcy5sZW5ndGg7CgkJCQlmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkJCQl2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTsKCgkJCQkJaWYgKCB2YWx1ZSAhPSBudWxsICkgewoJCQkJCQlyZXQucHVzaCggdmFsdWUgKTsKCQkJCQl9CgkJ", "base64"));
  res.write(new Buffer("CQl9CgoJCQkvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LAoJCQl9IGVsc2UgewoJCQkJZm9yICggaSBpbiBlbGVtcyApIHsKCQkJCQl2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTsKCgkJCQkJaWYgKCB2YWx1ZSAhPSBudWxsICkgewoJCQkJCQlyZXQucHVzaCggdmFsdWUgKTsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCS8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXMKCQkJcmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApOwoJCX0sCgoJCS8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0cwoJCWd1aWQ6IDEsCgoJCS8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueQoJCS8vIGFyZ3VtZW50cy4KCQlwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkgewoJCQl2YXIgYXJncywgcHJveHksIHRtcDsKCgkJCWlmICggdHlwZW9mIGNvbnRleHQgPT09ICJzdHJpbmciICkgewoJCQkJdG1wID0gZm5bIGNvbnRleHQgXTsKCQkJCWNvbnRleHQgPSBmbjsKCQkJCWZuID0gdG1wOwoJCQl9CgoJCQkvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlYwoJCQkvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLgoJCQlpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHsKCQkJCXJldHVybiB1bmRlZmluZWQ7CgkJCX0KCgkJCS8vIFNpbXVsYXRlZCBiaW5kCgkJCWFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTsKCQkJcHJveHkgPSBmdW5jdGlvbigpIHsKCQkJCXJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApOwoJCQl9OwoKCQkJLy8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkCgkJCXByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrOwoKCQkJcmV0dXJuIHByb3h5OwoJCX0sCgoJCW5vdzogZnVuY3Rpb24oKSB7CgkJCXJldHVybiArKCBuZXcgRGF0ZSgpICk7CgkJfSwKCgkJLy8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyCgkJLy8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC4KCQlzdXBwb3J0OiBzdXBwb3J0Cgl9ICk7CgoJLy8gSlNIaW50IHdvdWxkIGVycm9yIG9uIHRoaXMgY29kZSBkdWUgdG8gdGhlIFN5bWJvbCBub3QgYmVpbmcgZGVmaW5lZCBpbiBFUzUuCgkvLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuanNoaW50cmMgd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWwKCS8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBqdXN0IGRpc2FibGUgSlNIaW50IGZvciB0aGVzZQoJLy8gdGhyZWUgbGluZXMuCgkvKiBqc2hpbnQgaWdub3JlOiBzdGFydCAqLwoJaWYgKCB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICkgewoJCWpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBkZWxldGVkSWRzWyBTeW1ib2wuaXRlcmF0b3IgXTsKCX0KCS8qIGpzaGludCBpZ25vcmU6IGVuZCAqLwoKCS8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcAoJalF1ZXJ5LmVhY2goICJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbCIuc3BsaXQoICIgIiApLAoJZnVuY3Rpb24oIGksIG5hbWUgKSB7CgkJY2xhc3MydHlwZVsgIltvYmplY3QgIiArIG5hbWUgKyAiXSIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTsKCX0gKTsKCglmdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkgewoKCQkvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcikKCQkvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpCgkJLy8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzCgkJLy8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRQoJCXZhciBsZW5ndGggPSAhIW9iaiAmJiAibGVuZ3RoIiBpbiBvYmogJiYgb2JqLmxlbmd0aCwKCQkJdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTsKCgkJaWYgKCB0eXBlID09PSAiZnVuY3Rpb24iIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXJldHVybiB0eXBlID09PSAiYXJyYXkiIHx8IGxlbmd0aCA9PT0gMCB8fAoJCQl0eXBlb2YgbGVuZ3RoID09PSAibnVtYmVyIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajsKCX0KCXZhciBTaXp6bGUgPQoJLyohCgkgKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjEKCSAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vCgkgKgoJICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMKCSAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZQoJICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQoJICoKCSAqIERhdGU6IDIwMTUtMTAtMTcKCSAqLwoJKGZ1bmN0aW9uKCB3aW5kb3cgKSB7CgoJdmFyIGksCgkJc3VwcG9ydCwKCQlFeHByLAoJCWdldFRleHQsCgkJaXNYTUwsCgkJdG9rZW5pemUsCgkJY29tcGlsZSwKCQlzZWxlY3QsCgkJb3V0ZXJtb3N0Q29udGV4dCwKCQlzb3J0SW5wdXQsCgkJaGFzRHVwbGljYXRlLAoKCQkvLyBMb2NhbCBkb2N1bWVudCB2YXJzCgkJc2V0RG9jdW1lbnQsCgkJZG9jdW1lbnQsCg==", "base64"));
  res.write(new Buffer("CQlkb2NFbGVtLAoJCWRvY3VtZW50SXNIVE1MLAoJCXJidWdneVFTQSwKCQlyYnVnZ3lNYXRjaGVzLAoJCW1hdGNoZXMsCgkJY29udGFpbnMsCgoJCS8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGEKCQlleHBhbmRvID0gInNpenpsZSIgKyAxICogbmV3IERhdGUoKSwKCQlwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsCgkJZGlycnVucyA9IDAsCgkJZG9uZSA9IDAsCgkJY2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksCgkJdG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksCgkJY29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksCgkJc29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7CgkJCWlmICggYSA9PT0gYiApIHsKCQkJCWhhc0R1cGxpY2F0ZSA9IHRydWU7CgkJCX0KCQkJcmV0dXJuIDA7CgkJfSwKCgkJLy8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50cwoJCU1BWF9ORUdBVElWRSA9IDEgPDwgMzEsCgoJCS8vIEluc3RhbmNlIG1ldGhvZHMKCQloYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LAoJCWFyciA9IFtdLAoJCXBvcCA9IGFyci5wb3AsCgkJcHVzaF9uYXRpdmUgPSBhcnIucHVzaCwKCQlwdXNoID0gYXJyLnB1c2gsCgkJc2xpY2UgPSBhcnIuc2xpY2UsCgkJLy8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlCgkJLy8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81CgkJaW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkgewoJCQl2YXIgaSA9IDAsCgkJCQlsZW4gPSBsaXN0Lmxlbmd0aDsKCQkJZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CgkJCQlpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7CgkJCQkJcmV0dXJuIGk7CgkJCQl9CgkJCX0KCQkJcmV0dXJuIC0xOwoJCX0sCgoJCWJvb2xlYW5zID0gImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkIiwKCgkJLy8gUmVndWxhciBleHByZXNzaW9ucwoKCQkvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZQoJCXdoaXRlc3BhY2UgPSAiW1xceDIwXFx0XFxyXFxuXFxmXSIsCgoJCS8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllcgoJCWlkZW50aWZpZXIgPSAiKD86XFxcXC58W1xcdy1dfFteXFx4MDAtXFx4YTBdKSsiLAoKCQkvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnMKCQlhdHRyaWJ1dGVzID0gIlxcWyIgKyB3aGl0ZXNwYWNlICsgIiooIiArIGlkZW50aWZpZXIgKyAiKSg/OiIgKyB3aGl0ZXNwYWNlICsKCQkJLy8gT3BlcmF0b3IgKGNhcHR1cmUgMikKCQkJIiooWypeJHwhfl0/PSkiICsgd2hpdGVzcGFjZSArCgkJCS8vICJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdIgoJCQkiKig/OicoKD86XFxcXC58W15cXFxcJ10pKiknfFwiKCg/OlxcXFwufFteXFxcXFwiXSkqKVwifCgiICsgaWRlbnRpZmllciArICIpKXwpIiArIHdoaXRlc3BhY2UgKwoJCQkiKlxcXSIsCgoJCXBzZXVkb3MgPSAiOigiICsgaWRlbnRpZmllciArICIpKD86XFwoKCIgKwoJCQkvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOgoJCQkvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSkKCQkJIignKCg/OlxcXFwufFteXFxcXCddKSopJ3xcIigoPzpcXFxcLnxbXlxcXFxcIl0pKilcIil8IiArCgkJCS8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KQoJCQkiKCg/OlxcXFwufFteXFxcXCgpW1xcXV18IiArIGF0dHJpYnV0ZXMgKyAiKSopfCIgKwoJCQkvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpCgkJCSIuKiIgKwoJCQkiKVxcKXwpIiwKCgkJLy8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlcgoJCXJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArICIrIiwgImciICksCgkJcnRyaW0gPSBuZXcgUmVnRXhwKCAiXiIgKyB3aGl0ZXNwYWNlICsgIit8KCg/Ol58W15cXFxcXSkoPzpcXFxcLikqKSIgKyB3aGl0ZXNwYWNlICsgIiskIiwgImciICksCgoJCXJjb21tYSA9IG5ldyBSZWdFeHAoICJeIiArIHdoaXRlc3BhY2UgKyAiKiwiICsgd2hpdGVzcGFjZSArICIqIiApLAoJCXJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoICJeIiArIHdoaXRlc3BhY2UgKyAiKihbPit+XXwiICsgd2hpdGVzcGFjZSArICIpIiArIHdoaXRlc3BhY2UgKyAiKiIgKSwKCgkJcmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoICI9IiArIHdoaXRlc3BhY2UgKyAiKihbXlxcXSdcIl0qPykiICsgd2hpdGVzcGFjZSArICIqXFxdIiwgImciICksCgoJCXJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksCgkJcmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCAiXiIgKyBpZGVudGlmaWVyICsgIiQiICksCgoJCW1hdGNoRXhwciA9IHsKCQkJIklEIjogbmV3IFJlZ0V4cCggIl4jKCIgKyBpZGVudGlmaWVyICsgIikiICksCgkJCSJDTEFTUyI6IG5ldyBSZWdFeHAoICJeXFwuKCIgKyBpZGVudGlmaWVyICsgIikiICksCgkJCSJUQUciOiBuZXcgUmVnRXhwKCAiXigiICsgaWRlbnRpZmllciArICJ8WypdKSIgKSwKCQkJIkFUVFIiOg==", "base64"));
  res.write(new Buffer("IG5ldyBSZWdFeHAoICJeIiArIGF0dHJpYnV0ZXMgKSwKCQkJIlBTRVVETyI6IG5ldyBSZWdFeHAoICJeIiArIHBzZXVkb3MgKSwKCQkJIkNISUxEIjogbmV3IFJlZ0V4cCggIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcKCIgKyB3aGl0ZXNwYWNlICsKCQkJCSIqKGV2ZW58b2RkfCgoWystXXwpKFxcZCopbnwpIiArIHdoaXRlc3BhY2UgKyAiKig/OihbKy1dfCkiICsgd2hpdGVzcGFjZSArCgkJCQkiKihcXGQrKXwpKSIgKyB3aGl0ZXNwYWNlICsgIipcXCl8KSIsICJpIiApLAoJCQkiYm9vbCI6IG5ldyBSZWdFeHAoICJeKD86IiArIGJvb2xlYW5zICsgIikkIiwgImkiICksCgkJCS8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKQoJCQkvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgCgkJCSJuZWVkc0NvbnRleHQiOiBuZXcgUmVnRXhwKCAiXiIgKyB3aGl0ZXNwYWNlICsgIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcKCIgKwoJCQkJd2hpdGVzcGFjZSArICIqKCg/Oi1cXGQpP1xcZCopIiArIHdoaXRlc3BhY2UgKyAiKlxcKXwpKD89W14tXXwkKSIsICJpIiApCgkJfSwKCgkJcmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksCgkJcmhlYWRlciA9IC9eaFxkJC9pLAoKCQlybmF0aXZlID0gL15bXntdK1x7XHMqXFtuYXRpdmUgXHcvLAoKCQkvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnMKCQlycXVpY2tFeHByID0gL14oPzojKFtcdy1dKyl8KFx3Kyl8XC4oW1x3LV0rKSkkLywKCgkJcnNpYmxpbmcgPSAvWyt+XS8sCgkJcmVzY2FwZSA9IC8nfFxcL2csCgoJCS8vIENTUyBlc2NhcGVzIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnMKCQlydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCAiXFxcXChbXFxkYS1mXXsxLDZ9IiArIHdoaXRlc3BhY2UgKyAiP3woIiArIHdoaXRlc3BhY2UgKyAiKXwuKSIsICJpZyIgKSwKCQlmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7CgkJCXZhciBoaWdoID0gIjB4IiArIGVzY2FwZWQgLSAweDEwMDAwOwoJCQkvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludAoJCQkvLyBTdXBwb3J0OiBGaXJlZm94PDI0CgkJCS8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgKyIweCIKCQkJcmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgPwoJCQkJZXNjYXBlZCA6CgkJCQloaWdoIDwgMCA/CgkJCQkJLy8gQk1QIGNvZGVwb2ludAoJCQkJCVN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOgoJCQkJCS8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKQoJCQkJCVN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApOwoJCX0sCgoJCS8vIFVzZWQgZm9yIGlmcmFtZXMKCQkvLyBTZWUgc2V0RG9jdW1lbnQoKQoJCS8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhICJQZXJtaXNzaW9uIERlbmllZCIKCQkvLyBlcnJvciBpbiBJRQoJCXVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHsKCQkJc2V0RG9jdW1lbnQoKTsKCQl9OwoKCS8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApCgl0cnkgewoJCXB1c2guYXBwbHkoCgkJCShhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSwKCQkJcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMKCQkpOwoJCS8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wCgkJLy8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseQoJCWFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7Cgl9IGNhdGNoICggZSApIHsKCQlwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/CgoJCQkvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZQoJCQlmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7CgkJCQlwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTsKCQkJfSA6CgoJCQkvLyBTdXBwb3J0OiBJRTw5CgkJCS8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHkKCQkJZnVuY3Rpb24oIHRhcmdldCwgZWxzICkgewoJCQkJdmFyIGogPSB0YXJnZXQubGVuZ3RoLAoJCQkJCWkgPSAwOwoJCQkJLy8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoCgkJCQl3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9CgkJCQl0YXJnZXQubGVuZ3RoID0gaiAtIDE7CgkJCX0KCQl9OwoJfQoKCWZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7CgkJdmFyIG0sIGksIGVsZW0sIG5pZCwgbmlkc2VsZWN0LCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3RvciwKCQkJbmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LAoKCQkJLy8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudAoJCQlub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTsKCgkJcmVzdWx0cyA9IHJlc3VsdHMgfHwgW107CgoJCS8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0CgkJaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICJzdHJpbmciIHx8ICFzZWxlY3RvciB8fAoJCQlub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7CgoJCQlyZXR1cm4gcmVzdWx0czsKCQl9CgoJCS8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHMKCQlpZiAoICFzZWVkICkgewoKCQkJaWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHsKCQkJCXNldERvY3VtZW50KCBjb250ZXh0ICk7CgkJCX0KCQkJY29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7CgoJCQlpZiAoIGRvY3VtZW50SXNIVE1MICkgewoKCQkJCS8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSAiZ2V0KkJ5KiIgRE9NIG1ldGhvZAoJCQkJLy8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KQoJCQkJaWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHsKCgkJCQkJLy8gSUQgc2VsZWN0b3IKCQkJCQlpZiAoIChtID0gbWF0Y2hbMV0pICkgewoKCQkJCQkJLy8gRG9jdW1lbnQgY29udGV4dAoJCQkJCQlpZiAoIG5vZGVUeXBlID09PSA5ICkgewoJCQkJCQkJaWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7CgoJCQkJCQkJCS8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0CgkJCQkJCQkJLy8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnMKCQkJCQkJCQkvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElECgkJCQkJCQkJaWYgKCBlbGVtLmlkID09PSBtICkgewoJCQkJCQkJCQlyZXN1bHRzLnB1c2goIGVsZW0gKTsKCQkJCQkJCQkJcmV0dXJuIHJlc3VsdHM7CgkJCQkJCQkJfQoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQlyZXR1cm4gcmVzdWx0czsKCQkJCQkJCX0KCgkJCQkJCS8vIEVsZW1lbnQgY29udGV4dAoJCQkJCQl9IGVsc2UgewoKCQkJCQkJCS8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0CgkJCQkJCQkvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9ucwoJCQkJCQkJLy8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRAoJCQkJCQkJaWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJgoJCQkJCQkJCWNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYKCQkJCQkJCQllbGVtLmlkID09PSBtICkgewoKCQkJCQkJCQlyZXN1bHRzLnB1c2goIGVsZW0gKTsKCQkJCQkJCQlyZXR1cm4gcmVzdWx0czsKCQkJCQkJCX0KCQkJCQkJfQoKCQkJCQkvLyBUeXBlIHNlbGVjdG9yCgkJCQkJfSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7CgkJCQkJCXB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTsKCQkJCQkJcmV0dXJuIHJlc3VsdHM7CgoJCQkJCS8vIENsYXNzIHNlbGVjdG9yCgkJCQkJfSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmCgkJCQkJCWNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHsKCgkJCQkJCXB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7CgkJCQkJCXJldHVybiByZXN1bHRzOwoJCQkJCX0KCQkJCX0KCgkJCQkvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsCgkJCQlpZiAoIHN1cHBvcnQucXNhICYmCgkJCQkJIWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgIiAiIF0gJiYKCQkJCQkoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkgewoKCQkJCQlpZiAoIG5vZGVUeXBlICE9PSAxICkgewoJCQkJCQluZXdDb250ZXh0ID0gY29udGV4dDsKCQkJCQkJbmV3U2VsZWN0b3IgPSBzZWxlY3RvcjsKCgkJCQkJLy8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50CgkJCQkJLy8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWUKCQkJCQkvLyBTdXBwb3J0OiBJRSA8PTgKCQkJCQkvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50cwoJCQkJCX0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gIm9iamVjdCIgKSB7CgoJCQkJCQkvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeQoJCQkJCQlpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggImlkIiApKSApIHsKCQkJCQkJCW5pZCA9IG5pZC5yZXBsYWNlKCByZXNjYXBlLCAiXFwkJiIgKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWNvbnRleHQuc2V0QXR0cmlidXRlKCAiaWQiLCAobmlkID0gZXhwYW5kbykgKTsKCQkJCQkJfQoKCQkJCQkJLy8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0CgkJCQkJCWdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApOwoJCQkJCQlpID0gZ3JvdXBzLmxlbmd0aDsKCQkJCQkJbmlkc2VsZWN0ID0gcmlkZW50aWZpZXIudGVzdCggbmlkICkgPyAiIyIgKyBuaWQgOiAiW2lkPSciICsgbmlkICsgIiddIjsKCQkJCQkJd2hpbGUgKCBpLS0gKSB7CgkJCQkJCQlncm91cHNbaV0gPSBuaWRzZWxlY3QgKyAiICIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTsKCQkJCQkJfQoJCQkJCQluZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCAiLCIgKTsKCgkJCQkJCS8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9ycwoJCQkJCQluZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiA=", "base64"));
  res.write(new Buffer("dGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8CgkJCQkJCQljb250ZXh0OwoJCQkJCX0KCgkJCQkJaWYgKCBuZXdTZWxlY3RvciApIHsKCQkJCQkJdHJ5IHsKCQkJCQkJCXB1c2guYXBwbHkoIHJlc3VsdHMsCgkJCQkJCQkJbmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApCgkJCQkJCQkpOwoJCQkJCQkJcmV0dXJuIHJlc3VsdHM7CgkJCQkJCX0gY2F0Y2ggKCBxc2FFcnJvciApIHsKCQkJCQkJfSBmaW5hbGx5IHsKCQkJCQkJCWlmICggbmlkID09PSBleHBhbmRvICkgewoJCQkJCQkJCWNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCAiaWQiICk7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCS8vIEFsbCBvdGhlcnMKCQlyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgIiQxIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7Cgl9CgoJLyoqCgkgKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemUKCSAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGgKCSAqCXByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpCgkgKglkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5CgkgKi8KCWZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkgewoJCXZhciBrZXlzID0gW107CgoJCWZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkgewoJCQkvLyBVc2UgKGtleSArICIgIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1NykKCQkJaWYgKCBrZXlzLnB1c2goIGtleSArICIgIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHsKCQkJCS8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllcwoJCQkJZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTsKCQkJfQoJCQlyZXR1cm4gKGNhY2hlWyBrZXkgKyAiICIgXSA9IHZhbHVlKTsKCQl9CgkJcmV0dXJuIGNhY2hlOwoJfQoKCS8qKgoJICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGUKCSAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrCgkgKi8KCWZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7CgkJZm5bIGV4cGFuZG8gXSA9IHRydWU7CgkJcmV0dXJuIGZuOwoJfQoKCS8qKgoJICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnQKCSAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdAoJICovCglmdW5jdGlvbiBhc3NlcnQoIGZuICkgewoJCXZhciBkaXYgPSBkb2M=", "base64"));
  res.write(new Buffer("dW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CgoJCXRyeSB7CgkJCXJldHVybiAhIWZuKCBkaXYgKTsKCQl9IGNhdGNoIChlKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9IGZpbmFsbHkgewoJCQkvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHQKCQkJaWYgKCBkaXYucGFyZW50Tm9kZSApIHsKCQkJCWRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTsKCQkJfQoJCQkvLyByZWxlYXNlIG1lbW9yeSBpbiBJRQoJCQlkaXYgPSBudWxsOwoJCX0KCX0KCgkvKioKCSAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnMKCSAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXMKCSAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZAoJICovCglmdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkgewoJCXZhciBhcnIgPSBhdHRycy5zcGxpdCgifCIpLAoJCQlpID0gYXJyLmxlbmd0aDsKCgkJd2hpbGUgKCBpLS0gKSB7CgkJCUV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyOwoJCX0KCX0KCgkvKioKCSAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3MKCSAqIEBwYXJhbSB7RWxlbWVudH0gYQoJICogQHBhcmFtIHtFbGVtZW50fSBiCgkgKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGIKCSAqLwoJZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkgewoJCXZhciBjdXIgPSBiICYmIGEsCgkJCWRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmCgkJCQkoIH5iLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApIC0KCQkJCSggfmEuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICk7CgoJCS8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2RlcwoJCWlmICggZGlmZiApIHsKCQkJcmV0dXJuIGRpZmY7CgkJfQoKCQkvLyBDaGVjayBpZiBiIGZvbGxvd3MgYQoJCWlmICggY3VyICkgewoJCQl3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkgewoJCQkJaWYgKCBjdXIgPT09IGIgKSB7CgkJCQkJcmV0dXJuIC0xOwoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gYSA/IDEgOiAtMTsKCX0KCgkvKioKCSAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXMKCSAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlCgkgKi8KCWZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkgewoJCXJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKCQkJdmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgkJCXJldHVybiBuYW1lID09PSAiaW5wdXQiICYmIGVsZW0udHlwZSA9PT0gdHlwZTsKCQl9OwoJfQoKCS8qKgoJICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zCgkgKiBAcGFyYW0ge1N0cmluZ30gdHlwZQoJICovCglmdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7CgkJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCQl2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKCQkJcmV0dXJuIChuYW1lID09PSAiaW5wdXQiIHx8IG5hbWUgPT09ICJidXR0b24iKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7CgkJfTsKCX0KCgkvKioKCSAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHMKCSAqIEBwYXJhbSB7RnVuY3Rpb259IGZuCgkgKi8KCWZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkgewoJCXJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkgewoJCQlhcmd1bWVudCA9ICthcmd1bWVudDsKCQkJcmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHsKCQkJCXZhciBqLAoJCQkJCW1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksCgkJCQkJaSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7CgoJCQkJLy8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzCgkJCQl3aGlsZSAoIGktLSApIHsKCQkJCQlpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkgewoJCQkJCQlzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7CgkJCQkJfQoJCQkJfQoJCQl9KTsKCQl9KTsKCX0KCgkvKioKCSAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHQKCSAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0CgkgKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWUKCSAqLwoJZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7CgkJcmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09ICJ1bmRlZmluZWQiICYmIGNvbnRleHQ7Cgl9CgoJLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2UKCXN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9OwoKCS8qKgoJICogRGV0ZWN0cyBYTUwgbm9kZXMKCSAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50CgkgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlCgkgKi8KCWlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7Cg==", "base64"));
  res.write(new Buffer("CQkvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0CgkJLy8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpCgkJdmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7CgkJcmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gIkhUTUwiIDogZmFsc2U7Cgl9OwoKCS8qKgoJICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50CgkgKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudAoJICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudAoJICovCglzZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkgewoJCXZhciBoYXNDb21wYXJlLCBwYXJlbnQsCgkJCWRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYzsKCgkJLy8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWQKCQlpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkgewoJCQlyZXR1cm4gZG9jdW1lbnQ7CgkJfQoKCQkvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlcwoJCWRvY3VtZW50ID0gZG9jOwoJCWRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgkJZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7CgoJCS8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2UKCQkvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzICJwZXJtaXNzaW9uIGRlbmllZCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KQoJCWlmICggKHBhcmVudCA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBwYXJlbnQudG9wICE9PSBwYXJlbnQgKSB7CgkJCS8vIFN1cHBvcnQ6IElFIDExCgkJCWlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7CgkJCQlwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggInVubG9hZCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7CgoJCQkvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seQoJCQl9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7CgkJCQlwYXJlbnQuYXR0YWNoRXZlbnQoICJvbnVubG9hZCIsIHVubG9hZEhhbmRsZXIgKTsKCQkJfQoJCX0KCgkJLyogQXR0cmlidXRlcwoJCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KCgkJLy8gU3VwcG9ydDogSUU8OAoJCS8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllcwoJCS8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKQoJCXN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkgewoJCQlkaXYuY2xhc3NOYW1lID0gImkiOwoJCQlyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIpOwoJCX0pOwoKCQkvKiBnZXRFbGVtZW50KHMpQnkqCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwoKCQkvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpIHJldHVybnMgb25seSBlbGVtZW50cwoJCXN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKCQkJZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCIiKSApOwoJCQlyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpLmxlbmd0aDsKCQl9KTsKCgkJLy8gU3VwcG9ydDogSUU8OQoJCXN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApOwoKCQkvLyBTdXBwb3J0OiBJRTwxMAoJCS8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZQoJCS8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1hdGljYWxseS1zZXQgbmFtZXMsCgkJLy8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0CgkJc3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CgkJCWRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbzsKCQkJcmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7CgkJfSk7CgoJCS8vIElEIGZpbmQgYW5kIGZpbHRlcgoJCWlmICggc3VwcG9ydC5nZXRCeUlkICkgewoJCQlFeHByLmZpbmRbIklEIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7CgkJCQlpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSAidW5kZWZpbmVkIiAmJiBkb2N1bWVudElzSFRNTCApIHsKCQkJCQl2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7CgkJCQkJcmV0dXJuIG0gPyBbIG0gXSA6IFtdOwoJCQkJfQoJCQl9OwoJCQlFeHByLmZpbHRlclsiSUQiXSA9IGZ1bmN0aW9uKCBpZCApIHsKCQkJCXZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApOwoJCQkJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJCXJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSgiaWQiKSA9PT0gYXR0cklkOwoJCQkJfTsKCQkJfTsKCQl9IGVsc2UgewoJCQkvLyBTdXBwb3J0OiBJRTYvNwoJCQkvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0CgkJCWRlbGV0ZSBFeHByLmZpbmRbIklEIl07CgoJCQlFeHByLmZpbHRlclsiSUQiXSA9ICBmdW5jdGlvbiggaWQgKSB7CgkJCQl2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTsKCQkJCXJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCQl2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09ICJ1bmRlZmluZWQiICYmCgkJCQkJCWVsZW0uZ2V0QXR0cmlidXRlTm9kZSgiaWQiKTsKCQkJCQlyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7CgkJCQl9OwoJCQl9OwoJCX0KCgkJLy8gVGFnCgkJRXhwci5maW5kWyJUQUciXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPwoJCQlmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkgewoJCQkJaWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gInVuZGVmaW5lZCIgKSB7CgkJCQkJcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApOwoKCQkJCS8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTgoJCQkJfSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7CgkJCQkJcmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7CgkJCQl9CgkJCX0gOgoKCQkJZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHsKCQkJCXZhciBlbGVtLAoJCQkJCXRtcCA9IFtdLAoJCQkJCWkgPSAwLAoJCQkJCS8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b28KCQkJCQlyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7CgoJCQkJLy8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50cwoJCQkJaWYgKCB0YWcgPT09ICIqIiApIHsKCQkJCQl3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHsKCQkJCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkgewoJCQkJCQkJdG1wLnB1c2goIGVsZW0gKTsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJcmV0dXJuIHRtcDsKCQkJCX0KCQkJCXJldHVybiByZXN1bHRzOwoJCQl9OwoKCQkvLyBDbGFzcwoJCUV4cHIuZmluZFsiQ0xBU1MiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkgewoJCQlpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09ICJ1bmRlZmluZWQiICYmIGRvY3VtZW50SXNIVE1MICkgewoJCQkJcmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVu", "base64"));
  res.write(new Buffer("dHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7CgkJCX0KCQl9OwoKCQkvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yCgkJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwoKCQkvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0CgoJCS8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpCgkJcmJ1Z2d5TWF0Y2hlcyA9IFtdOwoKCQkvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKQoJCS8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvcgoJCS8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWUKCQkvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvcgoJCS8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OAoJCXJidWdneVFTQSA9IFtdOwoKCQlpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHsKCQkJLy8gQnVpbGQgUVNBIHJlZ2V4CgkJCS8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmkKCQkJYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7CgkJCQkvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlCgkJCQkvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHkKCQkJCS8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLAoJCQkJLy8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2gKCQkJCS8vIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5CgkJCQlkb2NFbGVtLmFwcGVuZENoaWxkKCBkaXYgKS5pbm5lckhUTUwgPSAiPGEgaWQ9JyIgKyBleHBhbmRvICsgIic+PC9hPiIgKwoJCQkJCSI8c2VsZWN0IGlkPSciICsgZXhwYW5kbyArICItXHJcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+IiArCgkJCQkJIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+IjsKCgkJCQkvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2CgkJCQkvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9CgkJCQkvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCAic2FmZSIgZm9yIFdpblJUCgkJCQkvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGk=", "base64"));
  res.write(new Buffer("b24KCQkJCWlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIlttc2FsbG93Y2FwdHVyZV49JyddIikubGVuZ3RoICkgewoJCQkJCXJidWdneVFTQS5wdXNoKCAiWypeJF09IiArIHdoaXRlc3BhY2UgKyAiKig/OicnfFwiXCIpIiApOwoJCQkJfQoKCQkJCS8vIFN1cHBvcnQ6IElFOAoJCQkJLy8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCAidmFsdWUiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHkKCQkJCWlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCJbc2VsZWN0ZWRdIikubGVuZ3RoICkgewoJCQkJCXJidWdneVFTQS5wdXNoKCAiXFxbIiArIHdoaXRlc3BhY2UgKyAiKig/OnZhbHVlfCIgKyBib29sZWFucyArICIpIiApOwoJCQkJfQoKCQkJCS8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44KwoJCQkJaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoICJbaWR+PSIgKyBleHBhbmRvICsgIi1dIiApLmxlbmd0aCApIHsKCQkJCQlyYnVnZ3lRU0EucHVzaCgifj0iKTsKCQkJCX0KCgkJCQkvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50cwoJCQkJLy8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWQKCQkJCS8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzCgkJCQlpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCgiOmNoZWNrZWQiKS5sZW5ndGggKSB7CgkJCQkJcmJ1Z2d5UVNBLnB1c2goIjpjaGVja2VkIik7CgkJCQl9CgoJCQkJLy8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCsKCQkJCS8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTEKCQkJCS8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlscwoJCQkJaWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoICJhIyIgKyBleHBhbmRvICsgIisqIiApLmxlbmd0aCApIHsKCQkJCQlyYnVnZ3lRU0EucHVzaCgiLiMuK1srfl0iKTsKCQkJCX0KCQkJfSk7CgoJCQlhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHsKCQkJCS8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwcwoJCQkJLy8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50CgkJCQl2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwoJCQkJaW5wdXQuc2V0QXR0cmlidXRlKCAidHlwZSIsICJoaWRkZW4iICk7CgkJCQlkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCAibmFtZSIsICJEIiApOwoKCQkJCS8vIFN1cHBvcnQ6IElFOAoJCQkJLy8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXQ=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("VXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXMKCSAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbQoJICovCglnZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHsKCQl2YXIgbm9kZSwKCQkJcmV0ID0gIiIsCgkJCWkgPSAwLAoJCQlub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7CgoJCWlmICggIW5vZGVUeXBlICkgewoJCQkvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheQoJCQl3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHsKCQkJCS8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzCgkJCQlyZXQgKz0gZ2V0VGV4dCggbm9kZSApOwoJCQl9CgkJfSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkgewoJCQkvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzCgkJCS8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpCgkJCWlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09ICJzdHJpbmciICkgewoJCQkJcmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7CgkJCX0gZWxzZSB7CgkJCQkvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW4KCQkJCWZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkgewoJCQkJCXJldCArPSBnZXRUZXh0KCBlbGVtICk7CgkJCQl9CgkJCX0KCQl9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHsKCQkJcmV0dXJuIGVsZW0ubm9kZVZhbHVlOwoJCX0KCQkvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXMKCgkJcmV0dXJuIHJldDsKCX07CgoJRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7CgoJCS8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlcgoJCWNhY2hlTGVuZ3RoOiA1MCwKCgkJY3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sCgoJCW1hdGNoOiBtYXRjaEV4cHIsCgoJCWF0dHJIYW5kbGU6IHt9LAoKCQlmaW5kOiB7fSwKCgkJcmVsYXRpdmU6IHsKCQkJIj4iOiB7IGRpcjogInBhcmVudE5vZGUiLCBmaXJzdDogdHJ1ZSB9LAoJCQkiICI6IHsgZGlyOiAicGFyZW50Tm9kZSIgfSwKCQkJIisiOiB7IGRpcjogInByZXZpb3VzU2libGluZyIsIGZpcnN0OiB0cnVlIH0sCgkJCSJ+IjogeyBkaXI6ICJwcmV2aW91c1NpYmxpbmciIH0KCQl9LAoKCQlwcmVGaWx0ZXI6IHsKCQkJIkFUVFIiOiBmdW5jdGlvbiggbWF0Y2ggKSB7CgkJCQltYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7CgoJCQkJLy8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWQKCQkJCW1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCAiIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7CgoJCQkJaWYgKCBtYXRjaFsyXSA9PT0gIn49IiApIHsKCQkJCQltYXRjaFszXSA9ICIgIiArIG1hdGNoWzNdICsgIiAiOwoJCQkJfQoKCQkJCXJldHVybiBtYXRjaC5zbGljZSggMCwgNCApOwoJCQl9LAoKCQkJIkNISUxEIjogZnVuY3Rpb24oIG1hdGNoICkgewoJCQkJLyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwclsiQ0hJTEQiXQoJCQkJCTEgdHlwZSAob25seXxudGh8Li4uKQoJCQkJCTIgd2hhdCAoY2hpbGR8b2YtdHlwZSkKCQkJCQkzIGFyZ3VtZW50IChldmVufG9kZHxcZCp8XGQqbihbKy1dXGQrKT98Li4uKQoJCQkJCTQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XGQqbnwpCgkJCQkJNSBzaWduIG9mIHhuLWNvbXBvbmVudAoJCQkJCTYgeCBvZiB4bi1jb21wb25lbnQKCQkJCQk3IHNpZ24gb2YgeS1jb21wb25lbnQKCQkJCQk4IHkgb2YgeS1jb21wb25lbnQKCQkJCSovCgkJCQltYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7CgoJCQkJaWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSAibnRoIiApIHsKCQkJCQkvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudAoJCQkJCWlmICggIW1hdGNoWzNdICkgewoJCQkJCQlTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7CgkJCQkJfQoKCQkJCQkvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTEQKCQkJCQkvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xCgkJCQkJbWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09ICJldmVuIiB8fCBtYXRjaFszXSA9PT0gIm9kZCIgKSApOwoJCQkJCW1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09ICJvZGQiICk7CgoJCQkJLy8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzCgkJCQl9IGVsc2UgaWYgKCBtYXRjaFszXSApIHsKCQkJCQlTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7CgkJCQl9CgoJCQkJcmV0dXJuIG1hdGNoOwoJCQl9LAoKCQkJIlBTRVVETyI6IGZ1bmN0aW9uKCBtYXRjaCApIHsKCQkJCXZhciBleGNlc3MsCgkJCQkJdW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07CgoJCQkJaWYgKCBtYXRjaEV4cHJbIkNISUxEIl0udGVzdCggbWF0Y2hbMF0gKSApIHsKCQkJCQlyZXR1cm4gbnVsbDsKCQkJCX0KCgkJCQkvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pcwoJCQkJaWYgKCBtYXRjaFszXSApIHsKCQkJCQltYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8ICIiOwoKCQkJCS8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzCgkJCQl9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiYKCQkJCQkvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KQoJCQkJCShleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiYKCQkJCQkvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXMKCQkJCQkoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggIikiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7CgoJCQkJCS8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4CgkJCQkJbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7CgkJCQkJbWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7CgkJCQl9CgoJCQkJLy8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpCgkJCQlyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTsKCQkJfQoJCX0sCgoJCWZpbHRlcjogewoKCQkJIlRBRyI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkgewoJCQkJdmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7CgkJCQlyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gIioiID8KCQkJCQlmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOgoJCQkJCWZ1bmN0aW9uKCBlbGVtICkgewoJCQkJCQlyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lOwoJCQkJCX07CgkJCX0sCgoJCQkiQ0xBU1MiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkgewoJCQkJdmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyAiICIgXTsKCgkJCQlyZXR1cm4gcGF0dGVybiB8fAoJCQkJCShwYXR0ZXJuID0gbmV3IFJlZ0V4cCggIihefCIgKyB3aGl0ZXNwYWNlICsgIikiICsgY2xhc3NOYW1lICsgIigiICsgd2hpdGVzcGFjZSArICJ8JCkiICkpICYmCgkJCQkJY2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHsKCQkJCQkJcmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSAic3RyaW5nIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09ICJ1bmRlZmluZWQiICYmIGVsZW0uZ2V0QXR0cmlidXRlKCJjbGFzcyIpIHx8ICIiICk7CgkJCQkJfSk7CgkJCX0sCgoJCQkiQVRUUiI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7CgkJCQlyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQkJdmFyIHJl", "base64"));
  res.write(new Buffer("c3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7CgoJCQkJCWlmICggcmVzdWx0ID09IG51bGwgKSB7CgkJCQkJCXJldHVybiBvcGVyYXRvciA9PT0gIiE9IjsKCQkJCQl9CgkJCQkJaWYgKCAhb3BlcmF0b3IgKSB7CgkJCQkJCXJldHVybiB0cnVlOwoJCQkJCX0KCgkJCQkJcmVzdWx0ICs9ICIiOwoKCQkJCQlyZXR1cm4gb3BlcmF0b3IgPT09ICI9IiA/IHJlc3VsdCA9PT0gY2hlY2sgOgoJCQkJCQlvcGVyYXRvciA9PT0gIiE9IiA/IHJlc3VsdCAhPT0gY2hlY2sgOgoJCQkJCQlvcGVyYXRvciA9PT0gIl49IiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDoKCQkJCQkJb3BlcmF0b3IgPT09ICIqPSIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDoKCQkJCQkJb3BlcmF0b3IgPT09ICIkPSIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOgoJCQkJCQlvcGVyYXRvciA9PT0gIn49IiA/ICggIiAiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCAiICIgKSArICIgIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6CgkJCQkJCW9wZXJhdG9yID09PSAifD0iID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyAiLSIgOgoJCQkJCQlmYWxzZTsKCQkJCX07CgkJCX0sCgoJCQkiQ0hJTEQiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkgewoJCQkJdmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gIm50aCIsCgkJCQkJZm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09ICJsYXN0IiwKCQkJCQlvZlR5cGUgPSB3aGF0ID09PSAib2YtdHlwZSI7CgoJCQkJcmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgPwoKCQkJCQkvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pCgkJCQkJZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQkJCXJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTsKCQkJCQl9IDoKCgkJCQkJZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHsKCQkJCQkJdmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCwKCQkJCQkJCWRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/ICJuZXh0U2libGluZyIgOiAicHJldmlvdXNTaWJsaW5nIiwKCQkJCQkJCXBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSwKCQkJCQkJCW5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLAoJCQkJCQkJdXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsCgkJCQkJCQlkaWZmID0gZmFsc2U7CgoJCQkJCQlpZiAoIHBhcmVudCApIHsKCgkJCQkJCQkvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpCgkJCQkJCQlpZiAoIHNpbXBsZSApIHsKCQkJCQkJCQl3aGlsZSAoIGRpciApIHsKCQkJCQkJCQkJbm9kZSA9IGVsZW07CgkJCQkJCQkJCXdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7CgkJCQkJCQkJCQlpZiAoIG9mVHlwZSA/CgkJCQkJCQkJCQkJbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDoKCQkJCQkJCQkJCQlub2RlLm5vZGVUeXBlID09PSAxICkgewoKCQkJCQkJCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQkJCQkJCQl9CgkJCQkJCQkJCX0KCQkJCQkJCQkJLy8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pCgkJCQkJCQkJCXN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gIm9ubHkiICYmICFzdGFydCAmJiAibmV4dFNpYmxpbmciOwoJCQkJCQkJCX0KCQkJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkJCX0KCgkJCQkJCQlzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdOwoKCQkJCQkJCS8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgCgkJCQkJCQlpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7CgoJCQkJCQkJCS8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleAoKCQkJCQkJCQkvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5CgkJCQkJCQkJbm9kZSA9IHBhcmVudDsKCQkJCQkJCQlvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7CgoJCQkJCQkJCS8vIFN1cHBvcnQ6IElFIDw5IG9ubHkKCQkJCQkJCQkvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSkKCQkJCQkJCQl1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fAoJCQkJCQkJCQkob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pOwoKCQkJCQkJCQljYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107CgkJCQkJCQkJbm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdOwoJCQkJCQkJCWRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTsKCQkJCQkJCQlub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTsKCgkJCQkJCQkJd2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHwKCgkJCQkJCQkJCS8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0CgkJCQkJCQkJCShkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkgewoKCQkJCQkJCQkJLy8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWsKCQkJCQkJCQkJaWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkgewoJCQkJCQkJCQkJdW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07CgkJCQkJCQkJCQlicmVhazsKCQkJCQkJCQkJfQoJCQkJCQkJCX0KCgkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCS8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZQoJCQkJCQkJCWlmICggdXNlQ2FjaGUgKSB7CgkJCQkJCQkJCS8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXkKCQkJCQkJCQkJbm9kZSA9IGVsZW07CgkJCQkJCQkJCW91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTsKCgkJCQkJCQkJCS8vIFN1cHBvcnQ6IElFIDw5IG9ubHkKCQkJCQkJCQkJLy8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpCgkJCQkJCQkJCXVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8CgkJCQkJCQkJCQkob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pOwoKCQkJCQkJCQkJY2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdOwoJCQkJCQkJCQlub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07CgkJCQkJCQkJCWRpZmYgPSBub2RlSW5kZXg7CgkJCQkJCQkJfQoKCQkJCQkJCQkvLyB4bWwgOm50aC1jaGlsZCguLi4pCgkJCQkJCQkJLy8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKQoJCQkJCQkJCWlmICggZGlmZiA9PT0gZmFsc2UgKSB7CgkJCQkJCQkJCS8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0CgkJCQkJCQkJCXdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8CgkJCQkJCQkJCQkoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHsKCgkJCQkJCQkJCQlpZiAoICggb2ZUeXBlID8KCQkJCQkJCQkJCQlub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOgoJCQkJCQkJCQkJCW5vZGUubm9kZVR5cGUgPT09IDEgKSAmJgoJCQkJCQkJCQkJCSsrZGlmZiApIHsKCgkJCQkJCQkJCQkJLy8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudAoJCQkJCQkJCQkJCWlmICggdXNlQ2FjaGUgKSB7CgkJCQkJCQkJCQkJCW91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTsKCgkJCQkJCQkJCQkJCS8vIFN1cHBvcnQ6IElFIDw5IG9ubHkKCQkJCQkJCQkJCQkJLy8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpCgkJCQkJCQkJCQkJCXVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8CgkJCQkJCQkJCQkJCQkob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pOwoKCQkJCQkJCQkJCQkJdW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdOwoJCQkJCQkJCQkJCX0KCgkJCQkJCQkJCQkJaWYgKCBub2RlID09PSBlbGVtICkgewoJCQkJCQkJCQkJCQlicmVhazsKCQkJCQkJCQkJCQl9CgkJCQkJCQkJCQl9CgkJCQkJCQkJCX0KCQkJCQkJCQl9CgkJCQkJCQl9CgoJCQkJCQkJLy8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemUKCQkJCQkJCWRpZmYgLT0gbGFzdDsKCQkJCQkJCXJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApOwoJCQkJCQl9CgkJCQkJfTsKCQkJfSwKCgkJCSJQU0VVRE8iOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHsKCQkJCS8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZQoJCQkJLy8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3NlcwoJCQkJLy8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnMKCQkJCS8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3MKCQkJCXZhciBhcmdzLAoJCQkJCWZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHwKCQkJCQkJU2l6emxlLmVycm9yKCAidW5zdXBwb3J0ZWQgcHNldWRvOiAiICsgcHNldWRvICk7CgoJCQkJLy8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdAoJCQkJLy8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb24KCQkJCS8vIGp1c3QgYXMgU2l6emxlIGRvZXMKCQkJCWlmICggZm5bIGV4cGFuZG8gXSApIHsKCQkJCQlyZXR1cm4gZm4oIGFyZ3VtZW50ICk7CgkJCQl9CgoJCQkJLy8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzCgkJCQlpZiAoIGZuLmxlbmd0aCA+IDEgKSB7CgkJCQkJYXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sICIiLCBhcmd1bWVudCBdOwoJCQkJCXJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgPwoJCQkJCQltYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7CgkJCQkJCQl2YXIgaWR4LAoJCQkJCQkJCW1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSwKCQkJCQkJCQlpID0gbWF0Y2hlZC5sZW5ndGg7CgkJCQkJCQl3aGlsZSAoIGktLSApIHsKCQkJCQkJCQlpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7CgkJCQkJCQkJc2VlZFsgaWR4IF0gPSA=", "base64"));
  res.write(new Buffer("ISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7CgkJCQkJCQl9CgkJCQkJCX0pIDoKCQkJCQkJZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQkJCQlyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTsKCQkJCQkJfTsKCQkJCX0KCgkJCQlyZXR1cm4gZm47CgkJCX0KCQl9LAoKCQlwc2V1ZG9zOiB7CgkJCS8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvcwoJCQkibm90IjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHsKCQkJCS8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlCgkJCQkvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZwoJCQkJLy8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzCgkJCQl2YXIgaW5wdXQgPSBbXSwKCQkJCQlyZXN1bHRzID0gW10sCgkJCQkJbWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCAiJDEiICkgKTsKCgkJCQlyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID8KCQkJCQltYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHsKCQkJCQkJdmFyIGVsZW0sCgkJCQkJCQl1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksCgkJCQkJCQlpID0gc2VlZC5sZW5ndGg7CgoJCQkJCQkvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgCgkJCQkJCXdoaWxlICggaS0tICkgewoJCQkJCQkJaWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7CgkJCQkJCQkJc2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfSkgOgoJCQkJCWZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7CgkJCQkJCWlucHV0WzBdID0gZWxlbTsKCQkJCQkJbWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApOwoJCQkJCQkvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KQoJCQkJCQlpbnB1dFswXSA9IG51bGw7CgkJCQkJCXJldHVybiAhcmVzdWx0cy5wb3AoKTsKCQkJCQl9OwoJCQl9KSwKCgkJCSJoYXMiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkgewoJCQkJcmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJCXJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDsKCQkJCX07CgkJCX0pLAoKCQkJImNvbnRhaW5zIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkgewoJCQkJdGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTsKCQkJCXJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCQlyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xOwoJCQkJfTsKCQkJfSksCgoJCQkvLyAiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvcgoJCQkvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZQoJCQkvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLAoJCQkvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5ICItIi4KCQkJLy8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuCgkJCS8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuIgoJCQkvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvCgkJCSJsYW5nIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHsKCQkJCS8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXIKCQkJCWlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCAiIikgKSB7CgkJCQkJU2l6emxlLmVycm9yKCAidW5zdXBwb3J0ZWQgbGFuZzogIiArIGxhbmcgKTsKCQkJCX0KCQkJCWxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTsKCQkJCXJldHVybiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCQl2YXIgZWxlbUxhbmc7CgkJCQkJZG8gewoJCQkJCQlpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID8KCQkJCQkJCWVsZW0ubGFuZyA6CgkJCQkJCQllbGVtLmdldEF0dHJpYnV0ZSgieG1sOmxhbmciKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSgibGFuZyIpKSApIHsKCgkJCQkJCQllbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7CgkJCQkJCQlyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArICItIiApID09PSAwOwoJCQkJCQl9CgkJCQkJfSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfTsKCQkJfSksCgoJCQkvLyBNaXNjZWxsYW5lb3VzCgkJCSJ0YXJnZXQiOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCXZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoOwoJCQkJcmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkOwoJCQl9LAoKCQkJInJvb3QiOiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCXJldHVybiBlbGVtID09PSBkb2NFbGVtOwoJCQl9LAoKCQkJImZvY3VzIjogZnVuY3Rpb24oIGVsZW0gKSB7CgkJCQlyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfA==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("fQoKCWZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHsKCQlyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/CgkJCWZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7CgkJCQl2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDsKCQkJCXdoaWxlICggaS0tICkgewoJCQkJCWlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHsKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0KCQkJCX0KCQkJCXJldHVybiB0cnVlOwoJCQl9IDoKCQkJbWF0Y2hlcnNbMF07Cgl9CgoJZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkgewoJCXZhciBpID0gMCwKCQkJbGVuID0gY29udGV4dHMubGVuZ3RoOwoJCWZvciAoIDsgaSA8IGxlbjsgaSsrICkgewoJCQlTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApOwoJCX0KCQlyZXR1cm4gcmVzdWx0czsKCX0KCglmdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkgewoJCXZhciBlbGVtLAoJCQluZXdVbm1hdGNoZWQgPSBbXSwKCQkJaSA9IDAsCgkJCWxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsCgkJCW1hcHBlZCA9IG1hcCAhPSBudWxsOwoKCQlmb3IgKCA7IGkgPCBsZW47IGkrKyApIHsKCQkJaWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7CgkJCQlpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHsKCQkJCQluZXdVbm1hdGNoZWQucHVzaCggZWxlbSApOwoJCQkJCWlmICggbWFwcGVkICkgewoJCQkJCQltYXAucHVzaCggaSApOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIG5ld1VubWF0Y2hlZDsKCX0KCglmdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7CgkJaWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7CgkJCXBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7CgkJfQoJCWlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkgewoJCQlwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7CgkJfQoJCXJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHsKCQkJdmFyIHRlbXAsIGksIGVsZW0sCgkJCQlwcmVNYXAgPSBbXSwKCQkJCXBvc3RNYXAgPSBbXSwKCQkJCXByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsCgoJCQkJLy8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHQKCQkJCWVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCAiKiIsIGNvbnRleHQubm9kZVR5cGU=", "base64"));
  res.write(new Buffer("ID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLAoKCQkJCS8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvbgoJCQkJbWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/CgkJCQkJY29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOgoJCQkJCWVsZW1zLAoKCQkJCW1hdGNoZXJPdXQgPSBtYXRjaGVyID8KCQkJCQkvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLAoJCQkJCXBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID8KCgkJCQkJCS8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeQoJCQkJCQlbXSA6CgoJCQkJCQkvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHkKCQkJCQkJcmVzdWx0cyA6CgkJCQkJbWF0Y2hlckluOwoKCQkJLy8gRmluZCBwcmltYXJ5IG1hdGNoZXMKCQkJaWYgKCBtYXRjaGVyICkgewoJCQkJbWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTsKCQkJfQoKCQkJLy8gQXBwbHkgcG9zdEZpbHRlcgoJCQlpZiAoIHBvc3RGaWx0ZXIgKSB7CgkJCQl0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTsKCQkJCXBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTsKCgkJCQkvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluCgkJCQlpID0gdGVtcC5sZW5ndGg7CgkJCQl3aGlsZSAoIGktLSApIHsKCQkJCQlpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7CgkJCQkJCW1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCWlmICggc2VlZCApIHsKCQkJCWlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7CgkJCQkJaWYgKCBwb3N0RmluZGVyICkgewoJCQkJCQkvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHMKCQkJCQkJdGVtcCA9IFtdOwoJCQkJCQlpID0gbWF0Y2hlck91dC5sZW5ndGg7CgkJCQkJCXdoaWxlICggaS0tICkgewoJCQkJCQkJaWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkgewoJCQkJCQkJCS8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoCgkJCQkJCQkJdGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCQlwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7CgkJCQkJfQoKCQkJCQkvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZAoJCQkJCWkgPSBtYXRjaGVyT3V0Lmxlbmd0aDsKCQkJCQl3aGlsZSAoIGktLSApIHsKCQkJCQkJaWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmCgkJCQkJCQkodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7CgoJCQkJCQkJc2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJLy8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkCgkJCX0gZWxzZSB7CgkJCQltYXRjaGVyT3V0ID0gY29uZGVuc2UoCgkJCQkJbWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/CgkJCQkJCW1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6CgkJCQkJCW1hdGNoZXJPdXQKCQkJCSk7CgkJCQlpZiAoIHBvc3RGaW5kZXIgKSB7CgkJCQkJcG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7CgkJCQl9IGVsc2UgewoJCQkJCXB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTsKCQkJCX0KCQkJfQoJCX0pOwoJfQoKCWZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7CgkJdmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaiwKCQkJbGVuID0gdG9rZW5zLmxlbmd0aCwKCQkJbGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSwKCQkJaW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyIgIl0sCgkJCWkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCwKCgkJCS8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpCgkJCW1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkgewoJCQkJcmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDsKCQkJfSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLAoJCQltYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHsKCQkJCXJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xOwoJCQl9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksCgkJCW1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkgewoJCQkJdmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoCgkJCQkJKGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID8KCQkJCQkJbWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6CgkJCQkJCW1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTsKCQkJCS8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KQoJCQkJY2hlY2tDb250ZXh0ID0gbnVsbDsKCQkJCXJldHVybiByZXQ7CgkJCX0gXTsKCgkJZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CgkJCWlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHsKCQkJCW1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdOwoJCQl9IGVsc2UgewoJCQkJbWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApOwoKCQkJCS8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyCgkJCQlpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHsKCQkJCQkvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmcKCQkJCQlqID0gKytpOwoJCQkJCWZvciAoIDsgaiA8IGxlbjsgaisrICkgewoJCQkJCQlpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCX0KCQkJCQlyZXR1cm4gc2V0TWF0Y2hlcigKCQkJCQkJaSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksCgkJCQkJCWkgPiAxICYmIHRvU2VsZWN0b3IoCgkJCQkJCQkvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYAoJCQkJCQkJdG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gIiAiID8gIioiIDogIiIgfSkKCQkJCQkJKS5yZXBsYWNlKCBydHJpbSwgIiQxIiApLAoJCQkJCQltYXRjaGVyLAoJCQkJCQlpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSwKCQkJCQkJaiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLAoJCQkJCQlqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApCgkJCQkJKTsKCQkJCX0KCQkJCW1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTsKCQkJfQoJCX0KCgkJcmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApOwoJfQoKCWZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHsKCQl2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLAoJCQlieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCwKCQkJc3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkgewoJCQkJdmFyIGVsZW0sIGosIG1hdGNoZXIsCgkJCQkJbWF0Y2hlZENvdW50ID0gMCwKCQkJCQlpID0gIjAiLAoJCQkJCXVubWF0Y2hlZCA9IHNlZWQgJiYgW10sCgkJCQkJc2V0TWF0Y2hlZCA9IFtdLAoJCQkJCWNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LAoJCQkJCS8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHQKCQkJCQllbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsiVEFHIl0oICIqIiwgb3V0ZXJtb3N0ICksCgkJCQkJLy8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXIKCQkJCQlkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSwKCQkJCQlsZW4gPSBlbGVtcy5sZW5ndGg7CgoJCQkJaWYgKCBvdXRlcm1vc3QgKSB7CgkJCQkJb3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0OwoJCQkJfQoKCQkJCS8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzCgkJCQkvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmkKCQkJCS8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiAibGVuZ3RoIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWQKCQkJCWZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHsKCQkJCQlpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkgewoJCQkJCQlqID0gMDsKCQkJCQkJaWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkgewoJCQkJCQkJc2V0RG9jdW1lbnQoIGVsZW0gKTsKCQkJCQkJCXhtbCA9ICFkb2N1bWVudElzSFRNTDsKCQkJCQkJfQoJCQkJCQl3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkgewoJCQkJCQkJaWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkgewoJCQkJCQkJCXJlc3VsdHMucHVzaCggZWxlbSApOwoJCQkJCQkJCWJyZWFrOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCWlmICggb3V0ZXJtb3N0ICkgewoJCQkJCQkJZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCS8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnMKCQkJCQlpZiAoIGJ5U2V0ICkgewoJCQkJCQkvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3M=", "base64"));
  res.write(new Buffer("aWJsZSBtYXRjaGVycwoJCQkJCQlpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7CgkJCQkJCQltYXRjaGVkQ291bnQtLTsKCQkJCQkJfQoKCQkJCQkJLy8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdAoJCQkJCQlpZiAoIHNlZWQgKSB7CgkJCQkJCQl1bm1hdGNoZWQucHVzaCggZWxlbSApOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJCS8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGAKCQkJCS8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuCgkJCQltYXRjaGVkQ291bnQgKz0gaTsKCgkJCQkvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHMKCQkJCS8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGAKCQkJCS8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZQoJCQkJLy8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC4KCQkJCS8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nICIwIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0CgkJCQkvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhICIwMCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvCgkJCQkvLyBudW1lcmljYWxseSB6ZXJvLgoJCQkJaWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7CgkJCQkJaiA9IDA7CgkJCQkJd2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkgewoJCQkJCQltYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApOwoJCQkJCX0KCgkJCQkJaWYgKCBzZWVkICkgewoJCQkJCQkvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nCgkJCQkJCWlmICggbWF0Y2hlZENvdW50ID4gMCApIHsKCQkJCQkJCXdoaWxlICggaS0tICkgewoJCQkJCQkJCWlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7CgkJCQkJCQkJCXNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApOwoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJfQoKCQkJCQkJLy8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXMKCQkJCQkJc2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7CgkJCQkJfQoKCQkJCQkvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzCgkJCQkJcHVzaC5hcHBseSggcmVzdWw=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("IGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUKCQlpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkgewoKCQkJdmFyIG5hbWUgPSAiZGF0YS0iICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsICItJDEiICkudG9Mb3dlckNhc2UoKTsKCgkJCWRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApOwoKCQkJaWYgKCB0eXBlb2YgZGF0YSA9PT0gInN0cmluZyIgKSB7CgkJCQl0cnkgewoJCQkJCWRhdGEgPSBkYXRhID09PSAidHJ1ZSIgPyB0cnVlIDoKCQkJCQkJZGF0YSA9PT0gImZhbHNlIiA/IGZhbHNlIDoKCQkJCQkJZGF0YSA9PT0gIm51bGwiID8gbnVsbCA6CgoJCQkJCQkvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZwoJCQkJCQkrZGF0YSArICIiID09PSBkYXRhID8gK2RhdGEgOgoJCQkJCQlyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDoKCQkJCQkJZGF0YTsKCQkJCX0gY2F0Y2ggKCBlICkge30KCgkJCQkvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXIKCQkJCWpRdWVyeS5kYXRhKCBlbGVtLCBrZXksIGRhdGEgKTsKCgkJCX0gZWxzZSB7CgkJCQlkYXRhID0gdW5kZWZpbmVkOwoJCQl9CgkJfQoKCQlyZXR1cm4gZGF0YTsKCX0KCgkvLyBjaGVja3MgYSBjYWNoZSBvYmplY3QgZm9yIGVtcHRpbmVzcwoJZnVuY3Rpb24gaXNFbXB0eURhdGFPYmplY3QoIG9iaiApIHsKCQl2YXIgbmFtZTsKCQlmb3IgKCBuYW1lIGluIG9iaiApIHsKCgkJCS8vIGlmIHRoZSBwdWJsaWMgZGF0YSBvYmplY3QgaXMgZW1wdHksIHRoZSBwcml2YXRlIGlzIHN0aWxsIGVtcHR5CgkJCWlmICggbmFtZSA9PT0gImRhdGEiICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvYmpbIG5hbWUgXSApICkgewoJCQkJY29udGludWU7CgkJCX0KCQkJaWYgKCBuYW1lICE9PSAidG9KU09OIiApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0KCgkJcmV0dXJuIHRydWU7Cgl9CgoJZnVuY3Rpb24gaW50ZXJuYWxEYXRhKCBlbGVtLCBuYW1lLCBkYXRhLCBwdnQgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7CgkJaWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgcmV0LCB0aGlzQ2FjaGUsCgkJCWludGVybmFsS2V5ID0galF1ZXJ5LmV4cGFuZG8sCgoJCQkvLyBXZSBoYXZlIHRvIGhhbmRsZSBET00gbm9kZXMgYW5kIEpTIG9iamVjdHMgZGlmZmVyZW50bHkgYmVjYXVzZSBJRTYtNwoJCQkvLyBjYW4ndCBHQyBvYmplY3QgcmVmZXJlbmNlcyBwcm9wZXJseSBhY3Jvc3MgdGhlIERPTS1KUyBib3VuZGFyeQoJCQlpc05vZGUgPSBlbGVtLm5vZGVUeXBlLAoKCQkJLy8gT25seSBET00gbm9kZXMgbmVlZCB0aGUgZ2xvYmFsIGpRdWVyeSBjYWNoZTsgSlMgb2JqZWN0IGRhdGEgaXMKCQkJLy8gYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIG9iamVjdCBzbyBHQyBjYW4gb2NjdXIgYXV0b21hdGljYWxseQoJCQljYWNoZSA9IGlzTm9kZSA/IGpRdWVyeS5jYWNoZSA6IGVsZW0sCgoJCQkvLyBPbmx5IGRlZmluaW5nIGFuIElEIGZvciBKUyBvYmplY3RzIGlmIGl0cyBjYWNoZSBhbHJlYWR5IGV4aXN0cyBhbGxvd3MKCQkJLy8gdGhlIGNvZGUgdG8gc2hvcnRjdXQgb24gdGhlIHNhbWUgcGF0aCBhcyBhIERPTSBub2RlIHdpdGggbm8gY2FjaGUKCQkJaWQgPSBpc05vZGUgPyBlbGVtWyBpbnRlcm5hbEtleSBdIDogZWxlbVsgaW50ZXJuYWxLZXkgXSAmJiBpbnRlcm5hbEtleTsKCgkJLy8gQXZvaWQgZG9pbmcgYW55IG1vcmUgd29yayB0aGFuIHdlIG5lZWQgdG8gd2hlbiB0cnlpbmcgdG8gZ2V0IGRhdGEgb24gYW4KCQkvLyBvYmplY3QgdGhhdCBoYXMgbm8gZGF0YSBhdCBhbGwKCQlpZiAoICggIWlkIHx8ICFjYWNoZVsgaWQgXSB8fCAoICFwdnQgJiYgIWNhY2hlWyBpZCBdLmRhdGEgKSApICYmCgkJCWRhdGEgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbmFtZSA9PT0gInN0cmluZyIgKSB7CgkJCXJldHVybjsKCQl9CgoJCWlmICggIWlkICkgewoKCQkJLy8gT25seSBET00gbm9kZXMgbmVlZCBhIG5ldyB1bmlxdWUgSUQgZm9yIGVhY2ggZWxlbWVudCBzaW5jZSB0aGVpciBkYXRhCgkJCS8vIGVuZHMgdXAgaW4gdGhlIGdsb2JhbCBjYWNoZQoJCQlpZiAoIGlzTm9kZSApIHsKCQkJCWlkID0gZWxlbVsgaW50ZXJuYWxLZXkgXSA9IGRlbGV0ZWRJZHMucG9wKCkgfHwgalF1ZXJ5Lmd1aWQrKzsKCQkJfSBlbHNlIHsKCQkJCWlkID0gaW50ZXJuYWxLZXk7CgkJCX0KCQl9CgoJCWlmICggIWNhY2hlWyBpZCBdICkgewoKCQkJLy8gQXZvaWQgZXhwb3NpbmcgalF1ZXJ5IG1ldGFkYXRhIG9uIHBsYWluIEpTIG9iamVjdHMgd2hlbiB0aGUgb2JqZWN0CgkJCS8vIGlzIHNlcmlhbGl6ZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnkKCQkJY2FjaGVbIGlkIF0gPSBpc05vZGUgPyB7fSA6IHsgdG9KU09OOiBqUXVlcnkubm9vcCB9OwoJCX0KCgkJLy8gQW4gb2JqZWN0IGNhbiBiZSBwYXNzZWQgdG8galF1ZXJ5LmRhdGEgaW5zdGVhZCBvZiBhIGtleS92YWx1ZSBwYWlyOyB0aGlzIGdldHMKCQkvLyBzaGFsbG93IGNvcGllZCBvdmVyIG9udG8gdGhlIGV4aXN0aW5nIGNhY2hlCgkJaWYgKCB0eXBlb2YgbmFtZSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIG5hbWUgPT09ICJmdW5jdGlvbiIgKSB7CgkJCWlmICggcHZ0ICkgewoJCQkJY2FjaGVbIGlkIF0gPSBqUXVlcnkuZXh0ZW5kKCBjYWNoZVsgaWQgXSwgbmFtZSApOwoJCQl9IGVsc2UgewoJCQkJY2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTsKCQkJfQoJCX0KCgkJdGhpc0NhY2hlID0gY2FjaGVbIGlkIF07CgoJCS8vIGpRdWVyeSBkYQ==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("PSB0YWcgPT09ICJ0YWJsZSIgJiYgIXJ0Ym9keS50ZXN0KCBlbGVtICkgPwoJCQkJCQkJdG1wLmZpcnN0Q2hpbGQgOgoKCQkJCQkJCS8vIFN0cmluZyB3YXMgYSBiYXJlIDx0aGVhZD4gb3IgPHRmb290PgoJCQkJCQkJd3JhcFsgMSBdID09PSAiPHRhYmxlPiIgJiYgIXJ0Ym9keS50ZXN0KCBlbGVtICkgPwoJCQkJCQkJCXRtcCA6CgkJCQkJCQkJMDsKCgkJCQkJCWogPSBlbGVtICYmIGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7CgkJCQkJCXdoaWxlICggai0tICkgewoJCQkJCQkJaWYgKCBqUXVlcnkubm9kZU5hbWUoICggdGJvZHkgPSBlbGVtLmNoaWxkTm9kZXNbIGogXSApLCAidGJvZHkiICkgJiYKCQkJCQkJCQkhdGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggKSB7CgoJCQkJCQkJCWVsZW0ucmVtb3ZlQ2hpbGQoIHRib2R5ICk7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7CgoJCQkJCS8vIEZpeCAjMTIzOTIgZm9yIFdlYktpdCBhbmQgSUUgPiA5CgkJCQkJdG1wLnRleHRDb250ZW50ID0gIiI7CgoJCQkJCS8vIEZpeCAjMTIzOTIgZm9yIG9sZElFCgkJCQkJd2hpbGUgKCB0bXAuZmlyc3RDaGlsZCApIHsKCQkJCQkJdG1wLnJlbW92ZUNoaWxkKCB0bXAuZmlyc3RDaGlsZCApOwoJCQkJCX0KCgkJCQkJLy8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHByb3BlciBjbGVhbnVwCgkJCQkJdG1wID0gc2FmZS5sYXN0Q2hpbGQ7CgkJCQl9CgkJCX0KCQl9CgoJCS8vIEZpeCAjMTEzNTY6IENsZWFyIGVsZW1lbnRzIGZyb20gZnJhZ21lbnQKCQlpZiAoIHRtcCApIHsKCQkJc2FmZS5yZW1vdmVDaGlsZCggdG1wICk7CgkJfQoKCQkvLyBSZXNldCBkZWZhdWx0Q2hlY2tlZCBmb3IgYW55IHJhZGlvcyBhbmQgY2hlY2tib3hlcwoJCS8vIGFib3V0IHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBET00gaW4gSUUgNi83ICgjODA2MCkKCQlpZiAoICFzdXBwb3J0LmFwcGVuZENoZWNrZWQgKSB7CgkJCWpRdWVyeS5ncmVwKCBnZXRBbGwoIG5vZGVzLCAiaW5wdXQiICksIGZpeERlZmF1bHRDaGVja2VkICk7CgkJfQoKCQlpID0gMDsKCQl3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkgewoKCQkJLy8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4NykKCQkJaWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7CgkJCQlpZiAoIGlnbm9yZWQgKSB7CgkJCQkJaWdub3JlZC5wdXNoKCBlbGVtICk7CgkJCQl9CgoJCQkJY29udGludWU7CgkJCX0KCgkJCWNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTsKCgkJCS8vIEFwcGVuZCB0byBmcmFnbWVudAoJCQl0bXAgPSBnZXRBbGwoIHNhZmUuYXBwZW5kQ2hpbGQoIGVsZW0=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("dHlwZSA9PT0gInJhZGlvIiApIHsKCQkJCQkJalF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgInByb3BlcnR5Y2hhbmdlLl9jaGFuZ2UiLCBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCQkJCQlpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09PSAiY2hlY2tlZCIgKSB7CgkJCQkJCQkJdGhpcy5fanVzdENoYW5nZWQgPSB0cnVlOwoJCQkJCQkJfQoJCQkJCQl9ICk7CgkJCQkJCWpRdWVyeS5ldmVudC5hZGQoIHRoaXMsICJjbGljay5fY2hhbmdlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCQkJaWYgKCB0aGlzLl9qdXN0Q2hhbmdlZCAmJiAhZXZlbnQuaXNUcmlnZ2VyICkgewoJCQkJCQkJCXRoaXMuX2p1c3RDaGFuZ2VkID0gZmFsc2U7CgkJCQkJCQl9CgoJCQkJCQkJLy8gQWxsb3cgdHJpZ2dlcmVkLCBzaW11bGF0ZWQgY2hhbmdlIGV2ZW50cyAoIzExNTAwKQoJCQkJCQkJalF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCAiY2hhbmdlIiwgdGhpcywgZXZlbnQgKTsKCQkJCQkJfSApOwoJCQkJCX0KCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgoJCQkJLy8gRGVsZWdhdGVkIGV2ZW50OyBsYXp5LWFkZCBhIGNoYW5nZSBoYW5kbGVyIG9uIGRlc2NlbmRhbnQgaW5wdXRzCgkJCQlqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCAiYmVmb3JlYWN0aXZhdGUuX2NoYW5nZSIsIGZ1bmN0aW9uKCBlICkgewoJCQkJCXZhciBlbGVtID0gZS50YXJnZXQ7CgoJCQkJCWlmICggcmZvcm1FbGVtcy50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgIWpRdWVyeS5fZGF0YSggZWxlbSwgImNoYW5nZSIgKSApIHsKCQkJCQkJalF1ZXJ5LmV2ZW50LmFkZCggZWxlbSwgImNoYW5nZS5fY2hhbmdlIiwgZnVuY3Rpb24oIGV2ZW50ICkgewoJCQkJCQkJaWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzU2ltdWxhdGVkICYmICFldmVudC5pc1RyaWdnZXIgKSB7CgkJCQkJCQkJalF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCAiY2hhbmdlIiwgdGhpcy5wYXJlbnROb2RlLCBldmVudCApOwoJCQkJCQkJfQoJCQkJCQl9ICk7CgkJCQkJCWpRdWVyeS5fZGF0YSggZWxlbSwgImNoYW5nZSIsIHRydWUgKTsKCQkJCQl9CgkJCQl9ICk7CgkJCX0sCgoJCQloYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCXZhciBlbGVtID0gZXZlbnQudGFyZ2V0OwoKCQkJCS8vIFN3YWxsb3cgbmF0aXZlIGNoYW5nZSBldmVudHMgZnJvbSBjaGVja2JveC9yYWRpbywgd2UgYWxyZWFkeSB0cmlnZ2VyZWQgdGhlbSBhYm92ZQoJCQkJaWYgKCB0aGlzICE9PSBlbGVtIHx8IGV2ZW50LmlzU2ltdWxhdGVkIHx8IGV2ZW50LmlzVHJpZ2dlciB8fAoJCQkJCSggZWxlbS50eXBlICE9PSAicmFkaW8iICYmIGVsZW0udHlwZSAhPT0gImNoZWNrYm94IiApICkgewoKCQkJCQlyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQkJfQoJCQl9LAoKCQkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkJalF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgIi5fY2hhbmdlIiApOwoKCQkJCXJldHVybiAhcmZvcm1FbGVtcy50ZXN0KCB0aGlzLm5vZGVOYW1lICk7CgkJCX0KCQl9OwoJfQoKCS8vIFN1cHBvcnQ6IEZpcmVmb3gKCS8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHMKCS8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3CgkvLwoJLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmkKCS8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLAoJLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyCgkvLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTcKCWlmICggIXN1cHBvcnQuZm9jdXNpbiApIHsKCQlqUXVlcnkuZWFjaCggeyBmb2N1czogImZvY3VzaW4iLCBibHVyOiAiZm9jdXNvdXQiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7CgoJCQkvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dAoJCQl2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHsKCQkJCWpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTsKCQkJfTsKCgkJCWpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHsKCQkJCXNldHVwOiBmdW5jdGlvbigpIHsKCQkJCQl2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsCgkJCQkJCWF0dGFjaGVzID0galF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCApOwoKCQkJCQlpZiAoICFhdHRhY2hlcyApIHsKCQkJCQkJZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTsKCQkJCQl9CgkJCQkJalF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7CgkJCQl9LAoJCQkJdGVhcmRvd246IGZ1bmN0aW9uKCkgewoJCQkJCXZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcywKCQkJCQkJYXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICkgLSAxOwoKCQkJCQlpZiAoICFhdHRhY2hlcyApIHsKCQkJCQkJZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTsKCQkJCQkJalF1ZXJ5Ll9yZW1vdmVEYXRhKCBkb2MsIGZpeCApOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWpRdWVyeS5fZGF0YSggZG9jLCBmaXgsIGF0dGFjaGVzICk7CgkJCQkJfQoJCQkJfQoJCQl9OwoJCX0gKTsKCX0KCglqUXVlcnkuZm4uZXh0ZW5kKCB7CgoJCW9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHsKCQkJcmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7CgkJfSwKCQlvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkgewoJCQlyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTsKCQl9LAoJCW9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7CgkJCXZhciBoYW5kbGVPYmosIHR5cGU7CgkJCWlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkgewoKCQkJCS8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnQKCQkJCWhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajsKCQkJCWpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoCgkJCQkJaGFuZGxlT2JqLm5hbWVzcGFjZSA/CgkJCQkJCWhhbmRsZU9iai5vcmlnVHlwZSArICIuIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOgoJCQkJCQloYW5kbGVPYmoub3JpZ1R5cGUsCgkJCQkJaGFuZGxlT2JqLnNlbGVjdG9yLAoJCQkJCWhhbmRsZU9iai5oYW5kbGVyCgkJCQkpOwoJCQkJcmV0dXJuIHRoaXM7CgkJCX0KCQkJaWYgKCB0eXBlb2YgdHlwZXMgPT09ICJvYmplY3QiICkgewoKCQkJCS8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApCgkJCQlmb3IgKCB0eXBlIGluIHR5cGVzICkgewoJCQkJCXRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApOwoJCQkJfQoJCQkJcmV0dXJuIHRoaXM7CgkJCX0KCQkJaWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAiZnVuY3Rpb24iICkgewoKCQkJCS8vICggdHlwZXMgWywgZm5dICkKCQkJCWZuID0gc2VsZWN0b3I7CgkJCQlzZWxlY3RvciA9IHVuZGVmaW5lZDsKCQkJfQoJCQlpZiAoIGZuID09PSBmYWxzZSApIHsKCQkJCWZuID0gcmV0dXJuRmFsc2U7CgkJCX0KCQkJcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7CgkJCQlqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7CgkJCX0gKTsKCQl9LAoKCQl0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHsKCQkJcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7CgkJCQlqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApOwoJCQl9ICk7CgkJfSwKCQl0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7CgkJCXZhciBlbGVtID0gdGhpc1sgMCBdOwoJCQlpZiAoIGVsZW0gKSB7CgkJCQlyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTsKCQkJfQoJCX0KCX0gKTsKCgoJdmFyIHJpbmxpbmVqUXVlcnkgPSAvIGpRdWVyeVxkKz0iKD86bnVsbHxcZCspIi9nLAoJCXJub3NoaW1jYWNoZSA9IG5ldyBSZWdFeHAoICI8KD86IiArIG5vZGVOYW1lcyArICIpW1xccy8+XSIsICJpIiApLAoJCXJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzotXSspW14+XSopXC8+L2dpLAoKCQkvLyBTdXBwb3J0OiBJRSAxMC0xMSwgRWRnZSAxMDI0MCsKCQkvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLgoJCS8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvCgkJcm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksCgoJCS8vIGNoZWNrZWQ9ImNoZWNrZWQiIG9yIGNoZWNrZWQKCQlyY2hlY2tlZCA9IC9jaGVja2VkXHMqKD86W149XXw9XHMqLmNoZWNrZWQuKS9pLAoJCXJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXC8oLiopLywKCQlyY2xlYW5TY3JpcHQgPSAvXlxzKjwhKD86XFtDREFUQVxbfC0tKXwoPzpcXVxdfC0tKT5ccyokL2csCgkJc2FmZUZyYWdtZW50ID0gY3JlYXRlU2FmZUZyYWdtZW50KCBkb2N1bWVudCApLAoJCWZyYWdtZW50RGl2ID0gc2FmZUZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApICk7CgoJLy8gU3VwcG9ydDogSUU8OAoJLy8gTWFuaXB1bGF0aW5nIHRhYmxlcyByZXF1aXJlcyBhIHRib2R5CglmdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7CgkJcmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgInRhYmxlIiApICYmCgkJCWpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCAidHIiICkgPwoKCQkJZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZSggInRib2R5IiApWyAwIF0gfHwKCQkJCWVsZW0uYXBwZW5kQ2hpbGQoIGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCAidGJvZHkiICkgKSA6CgkJCWVsZW07Cgl9CgoJLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvbgoJZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHsKCQllbGVtLnR5cGUgPSAoIGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sICJ0eXBlIiApICE9PSBudWxsICkgKyAiLyIgKyBlbGVtLnR5cGU7CgkJcmV0dXJuIGVsZW07Cgl9CglmdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkgewoJCXZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApOwoJCWlmICggbWF0Y2ggKSB7CgkJCWVsZW0udHlwZSA9IG1hdGNoWyAxIF07CgkJfSBlbHNlIHsKCQkJZWxlbS5yZW1vdmVBdHRyaWJ1dGUoICJ0eXBlIiApOwoJCX0KCQlyZXR1cm4gZWxlbTsKCX0KCglmdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkgewoJCWlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5Lmhhc0RhdGEoIHNyYyApICkgewoJCQlyZXR1cm47CgkJfQoKCQl2YXIgdHlwZSwgaSwgbCwKCQkJb2xkRGF0YSA9IGpRdWVyeS5fZGF0YSggc3JjICksCgkJCWN1ckRhdGEgPSBqUXVlcnkuX2RhdGEoIGRlc3QsIG9sZERhdGEgKSwKCQkJZXZlbnRzID0gb2xkRGF0YS5ldmVudHM7CgoJCWlmICggZXZlbnRzICkgewoJCQlkZWxldGUgY3VyRGF0YS5oYW5kbGU7CgkJCWN1ckRhdGEuZXZlbnRzID0ge307CgoJCQlmb3IgKCB0eXBlIGluIGV2ZW50cyApIHsKCQkJCWZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkgewoJCQkJCWpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTsKCQkJCX0KCQkJfQoJCX0KCgkJLy8gbWFrZSB0aGUgY2xvbmVkIHB1YmxpYyBkYXRhIG9iamVjdCBhIGNvcHkgZnJvbSB0aGUgb3JpZ2luYWwKCQlpZiAoIGN1ckRhdGEuZGF0YSApIHsKCQkJY3VyRGF0YS5kYXRhID0galF1ZXJ5LmV4dGVuZCgge30sIGN1ckRhdGEuZGF0YSApOwoJCX0KCX0KCglmdW5jdGlvbiBmaXhDbG9uZU5vZGVJc3N1ZXMoIHNyYywgZGVzdCApIHsKCQl2YXIgbm9kZU5hbWUsIGUsIGRhdGE7CgoJCS8vIFdlIGRvIG5vdCBuZWVkIHRvIGRvIGFueXRoaW5nIGZvciBub24tRWxlbWVudHMKCQlpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7CgkJCXJldHVybjsKCQl9CgoJCW5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwoKCQkvLyBJRTYtOCBjb3BpZXMgZXZlbnRzIGJvdW5kIHZpYSBhdHRhY2hFdmVudCB3aGVuIHVzaW5nIGNsb25lTm9kZS4KCQlpZiAoICFzdXBwb3J0Lm5vQ2xvbmVFdmVudCAmJiBkZXN0WyBqUXVlcnkuZXhwYW5kbyBdICkgewoJCQlkYXRhID0galF1ZXJ5Ll9kYXRhKCBkZXN0ICk7CgoJCQlmb3IgKCBlIGluIGRhdGEuZXZlbnRzICkgewoJCQkJalF1ZXJ5LnJlbW92ZUV2ZW50KCBkZXN0LCBlLCBkYXRhLmhhbmRsZSApOwoJCQl9CgoJCQkvLyBFdmVudCBkYXRhIGdldHMgcmVmZXJlbmNlZCBpbnN0ZWFkIG9mIGNvcGllZCBpZiB0aGUgZXhwYW5kbyBnZXRzIGNvcGllZCB0b28KCQkJZGVzdC5yZW1vdmVBdHRyaWJ1dGUoIGpRdWVyeS5leHBhbmRvICk7CgkJfQoKCQkvLyBJRSBibGFua3MgY29udGVudHMgd2hlbiBjbG9uaW5nIHNjcmlwdHMsIGFuZCB0cmllcyB0byBldmFsdWF0ZSBuZXdseS1zZXQgdGV4dAoJCWlmICggbm9kZU5hbWUgPT09ICJzY3JpcHQiICYmIGRlc3QudGV4dCAhPT0gc3JjLnRleHQgKSB7CgkJCWRpc2FibGVTY3JpcHQoIGRlc3QgKS50ZXh0ID0gc3JjLnRleHQ7CgkJCXJlc3RvcmVTY3JpcHQoIGRlc3QgKTsKCgkJLy8gSUU2LTEwIGltcHJvcGVybHkgY2xvbmVzIGNoaWxkcmVuIG9mIG9iamVjdCBlbGVtZW50cyB1c2luZyBjbGFzc2lkLgoJCS8vIElFMTAgdGhyb3dzIE5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yIGlmIHBhcmVudCBpcyBudWxsLCAjMTIxMzIuCgkJfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJvYmplY3QiICkgewoJCQlpZiAoIGRlc3QucGFyZW50Tm9kZSApIHsKCQkJCWRlc3Qub3V0ZXJIVE1MID0gc3JjLm91dGVySFRNTDsKCQkJfQoKCQkJLy8gVGhpcyBwYXRoIGFwcGVhcnMgdW5hdm9pZGFibGUgZm9yIElFOS4gV2hlbiBjbG9uaW5nIGFuIG9iamVjdAoJCQkvLyBlbGVtZW50IGluIElFOSwgdGhlIG91dGVySFRNTCBzdHJhdGVneSBhYm92ZSBpcyBub3Qgc3VmZmljaWVudC4KCQkJLy8gSWYgdGhlIHNyYyBoYXMgaW5uZXJIVE1MIGFuZCB0aGUgZGVzdGluYXRpb24gZG9lcyBub3QsCgkJCS8vIGNvcHkgdGhlIHNyYy5pbm5lckhUTUwgaW50byB0aGUgZGVzdC5pbm5lckhUTUwuICMxMDMyNAoJCQlpZiAoIHN1cHBvcnQuaHRtbDVDbG9uZSAmJiAoIHNyYy5pbm5lckhUTUwgJiYgIWpRdWVyeS50cmltKCBkZXN0LmlubmVySFRNTCApICkgKSB7CgkJCQlkZXN0LmlubmVySFRNTCA9IHNyYy5pbm5lckhUTUw7CgkJCX0KCgkJfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJpbnB1dCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHsKCgkJCS8vIElFNi04IGZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3gKCQkJLy8gb3IgcmFkaW8gYnV0dG9uLiBXb3JzZSwgSUU2LTcgZmFpbCB0byBnaXZlIHRoZSBjbG9uZWQgZWxlbWVudAoJCQkvLyBhIGNoZWNrZWQgYXBwZWFyYW5jZSBpZiB0aGUgZGVmYXVsdENoZWNrZWQgdmFsdWUgaXNuJ3QgYWxzbyBzZXQKCgkJCWRlc3QuZGVmYXVsdENoZWNrZWQgPSBkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDsKCgkJCS8vIElFNi03IGdldCBjb25mdXNlZCBhbmQgZW5kIHVwIHNldHRpbmcgdGhlIHZhbHVlIG9mIGEgY2xvbmVkCgkJCS8vIGNoZWNrYm94L3JhZGlvIGJ1dHRvbiB0byBhbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZiAib24iCgkJCWlmICggZGVzdC52YWx1ZSAhPT0gc3JjLnZhbHVlICkgewoJCQkJZGVzdC52YWx1ZSA9IHNyYy52YWx1ZTsKCQkJfQoKCQkvLyBJRTYtOCBmYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZAoJCS8vIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zCgkJfSBlbHNlIGlmICggbm9kZU5hbWUgPT09ICJvcHRpb24iICkgewoJCQlkZXN0LmRlZmF1bHRTZWxlY3RlZCA9IGRlc3Quc2VsZWN0ZWQgPSBzcmMuZGVmYXVsdFNlbGVjdGVkOwoKCQkvLyBJRTYtOCBmYWlscyB0byBzZXQgdGhlIGRlZmF1bHRWYWx1ZSB0byB0aGUgY29ycmVjdCB2YWx1ZSB3aGVuCgkJLy8gY2xvbmluZyBvdGhlciB0eXBlcyBvZiBpbnB1dCBmaWVsZHMKCQl9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gImlucHV0IiB8fCBub2RlTmFtZSA9PT0gInRleHRhcmVhIiApIHsKCQkJZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlOwoJCX0KCX0KCglmdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7CgoJCS8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXMKCQlhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApOwoKCQl2YXIgZmlyc3QsIG5vZGUsIGhhc1NjcmlwdHMsCgkJCXNjcmlwdHMsIGRvYywgZnJhZ21lbnQsCgkJCWkgPSAwLAoJCQlsID0gY29sbGVjdGlvbi5sZW5ndGgsCgkJCWlOb0Nsb25lID0gbCAtIDEsCgkJCXZhbHVlID0gYXJnc1sgMCBdLAoJCQlpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7CgoJCS8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdAoJCWlmICggaXNGdW5jdGlvbiB8fAoJCQkJKCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09ICJzdHJpbmciICYmCgkJCQkJIXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7CgkJCXJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHsKCQkJCXZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTsKCQkJCWlmICggaXNGdW5jdGlvbiApIHsKCQkJCQlhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTsKCQkJCX0KCQkJCWRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApOwoJCQl9ICk7CgkJfQoKCQlpZiAoIGwgKSB7CgkJCWZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7CgkJCWZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDsKCgkJCWlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7CgkJCQlmcmFnbWVudCA9IGZpcnN0OwoJCQl9CgoJCQkvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2sKCQkJaWYgKCBmaXJzdCB8fCBpZ25vcmVkICkgewoJCQkJc2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsICJzY3JpcHQiICksIGRpc2FibGVTY3JpcHQgKTsKCQkJCWhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDsKCgkJCQkvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtCgkJCQkvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXAKCQkJCS8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuCgkJCQlmb3IgKCA7IGkgPCBsOyBpKysgKSB7CgkJCQkJbm9kZSA9IGZyYWdtZW50OwoKCQkJCQlpZiAoIGkgIT09IGlOb0Nsb25lICkgewoJCQkJCQlub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7CgoJCQkJCQkvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uCgkJCQkJCWlmICggaGFzU2NyaXB0cyApIHsKCgkJCQkJCQkvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgUGhhbnRvbUpTPDIKCQkJCQkJCS8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXQKCQkJCQkJCWpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCAic2NyaXB0IiApICk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApOwoJCQkJfQoKCQkJCWlmICggaGFzU2NyaXB0cyApIHsKCQkJCQlkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50OwoKCQkJCQkvLyBSZWVuYWJsZSBzY3JpcHRzCgkJCQkJalF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApOwoKCQkJCQkvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uCgkJCQkJZm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7CgkJCQkJCW5vZGUgPSBzY3JpcHRzWyBpIF07CgkJCQkJCWlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8ICIiICkgJiYKCQkJCQkJCSFqUXVlcnkuX2RhdGEoIG5vZGUsICJnbG9iYWxFdmFsIiApICYmCgkJCQkJCQlqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkgewoKCQkJCQkJCWlmICggbm9kZS5zcmMgKSB7CgoJCQkJCQkJCS8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50CgkJCQkJCQkJaWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7CgkJCQkJCQkJCWpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTsKCQkJCQkJCQl9CgkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCWpRdWVyeS5nbG9iYWxFdmFsKAoJCQkJCQkJCQkoIG5vZGUudGV4dCB8fCBub2RlLnRleHRDb250ZW50IHx8IG5vZGUuaW5uZXJIVE1MIHx8ICIiICkKCQkJCQkJCQkJCS5yZXBsYWNlKCByY2xlYW5TY3JpcHQsICIiICkKCQkJCQkJCQkpOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJCS8vIEZpeCAjMTE4MDk6IEF2b2lkIGxlYWtpbmcgbWVtb3J5CgkJCQlmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDsKCQkJfQoJCX0KCgkJcmV0dXJuIGNvbGxlY3Rpb247Cgl9CgoJZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7CgkJdmFyIG5vZGUsCgkJCWVsZW1zID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSwKCQkJaSA9IDA7CgoJCWZvciAoIDsgKCBub2RlID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHsKCgkJCWlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7CgkJCQlqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApOwoJCQl9CgoJCQlpZiAoIG5vZGUucGFyZW50Tm9kZSApIHsKCQkJCWlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHsKCQkJCQlzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsICJzY3JpcHQiICkgKTsKCQkJCX0KCQkJCW5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApOwoJCQl9CgkJfQoKCQlyZXR1cm4gZWxlbTsKCX0KCglqUXVlcnkuZXh0ZW5kKCB7CgkJaHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7CgkJCXJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgIjwkMT48LyQyPiIgKTsKCQl9LAoKCQljbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkgewoJCQl2YXIgZGVzdEVsZW1lbnRzLCBub2RlLCBjbG9uZSwgaSwgc3JjRWxlbWVudHMsCgkJCQlpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApOwoKCQkJaWYgKCBzdXBwb3J0Lmh0bWw1Q2xvbmUgfHwgalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgfHwKCQkJCSFybm9zaGltY2FjaGUudGVzdCggIjwiICsgZWxlbS5ub2RlTmFtZSArICI+IiApICkgewoKCQkJCWNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKTsKCgkJCS8vIElFPD04IGRvZXMgbm90IHByb3Blcmx5IGNsb25lIGRldGFjaGVkLCB1bmtub3duIGVsZW1lbnQgbm9kZXMKCQkJfSBlbHNlIHsKCQkJCWZyYWdtZW50RGl2LmlubmVySFRNTCA9IGVsZW0ub3V0ZXJIVE1MOwoJCQkJZnJhZ21lbnREaXYucmVtb3ZlQ2hpbGQoIGNsb25lID0gZnJhZ21lbnREaXYuZmlyc3RDaGlsZCApOwoJCQl9CgoJCQlpZiAoICggIXN1cHBvcnQubm9DbG9uZUV2ZW50IHx8ICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICkgJiYKCQkJCQkoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJiAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7CgoJCQkJLy8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzIKCQkJCWRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTsKCQkJCXNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7CgoJCQkJLy8gRml4IGFsbCBJRSBjbG9uaW5nIGlzc3VlcwoJCQkJZm9yICggaSA9IDA7ICggbm9kZSA9IHNyY0VsZW1lbnRzWyBpIF0gKSAhPSBudWxsOyArK2kgKSB7CgoJCQkJCS8vIEVuc3VyZSB0aGF0IHRoZSBkZXN0aW5hdGlvbiBub2RlIGlzIG5vdCBudWxsOyBGaXhlcyAjOTU4NwoJCQkJCWlmICggZGVzdEVsZW1lbnRzWyBpIF0gKSB7CgkJCQkJCWZpeENsb25lTm9kZUlzc3Vlcyggbm9kZSwgZGVzdEVsZW1lbnRzWyBpIF0gKTsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCS8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmUKCQkJaWYgKCBkYXRhQW5kRXZlbnRzICkgewoJCQkJaWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHsKCQkJCQlzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApOwoJCQkJCWRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7CgoJCQkJCWZvciAoIGkgPSAwOyAoIG5vZGUgPSBzcmNFbGVtZW50c1sgaSBdICkgIT0gbnVsbDsgaSsrICkgewoJCQkJCQljbG9uZUNvcHlFdmVudCggbm9kZSwgZGVzdEVsZW1lbnRzWyBpIF0gKTsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCWNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApOwoJCQkJfQoJCQl9CgoJCQkvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5CgkJCWRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsICJzY3JpcHQiICk7CgkJCWlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7CgkJCQlzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCAic2NyaXB0IiApICk7CgkJCX0KCgkJCWRlc3RFbGVtZW50cyA9IHNyY0VsZW1lbnRzID0gbm9kZSA9IG51bGw7CgoJCQkvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXQKCQkJcmV0dXJuIGNsb25lOwoJCX0sCgoJCWNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zLCAvKiBpbnRlcm5hbCAqLyBmb3JjZUFjY2VwdERhdGEgKSB7CgkJCXZhciBlbGVtLCB0eXBlLCBpZCwgZGF0YSwKCQkJCWkgPSAwLAoJCQkJaW50ZXJuYWxLZXkgPSBqUXVlcnkuZXhwYW5kbywKCQkJCWNhY2hlID0galF1ZXJ5LmNhY2hlLAoJCQkJYXR0cmlidXRlcyA9IHN1cHBvcnQuYXR0cmlidXRlcywKCQkJCXNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbDsKCgkJCWZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHsKCQkJCWlmICggZm9yY2VBY2NlcHREYXRhIHx8IGFjY2VwdERhdGEoIGVsZW0gKSApIHsKCgkJCQkJaWQgPSBlbGVtWyBpbnRlcm5hbEtleSBdOwoJCQkJCWRhdGEgPSBpZCAmJiBjYWNoZVsgaWQgXTsKCgkJCQkJaWYgKCBkYXRhICkgewoJCQkJCQlpZiAoIGRhdGEuZXZlbnRzICkgewoJCQkJCQkJZm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHsKCQkJCQkJCQlpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHsKCQkJCQkJCQkJalF1ZXJ5LmU=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("CQkJY29tcHV0ZVN0eWxlVGVzdHMoKTsKCQkJCX0KCQkJCXJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7CgkJCX0KCQl9ICk7CgoJCWZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkgewoJCQl2YXIgY29udGVudHMsIGRpdlN0eWxlLAoJCQkJZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwoKCQkJLy8gU2V0dXAKCQkJZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTsKCgkJCWRpdi5zdHlsZS5jc3NUZXh0ID0KCgkJCQkvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMwoJCQkJLy8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nCgkJCQkiLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94OyIgKwoJCQkJInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7IiArCgkJCQkibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDsiICsKCQkJCSJ0b3A6MSU7d2lkdGg6NTAlIjsKCgkJCS8vIFN1cHBvcnQ6IElFPDkKCQkJLy8gQXNzdW1lIHJlYXNvbmFibGUgdmFsdWVzIGluIHRoZSBhYnNlbmNlIG9mIGdldENvbXB1dGVkU3R5bGUKCQkJcGl4ZWxQb3NpdGlvblZhbCA9IGJveFNpemluZ1JlbGlhYmxlVmFsID0gcmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZmFsc2U7CgkJCXBpeGVsTWFyZ2luUmlnaHRWYWwgPSByZWxpYWJsZU1hcmdpblJpZ2h0VmFsID0gdHJ1ZTsKCgkJCS8vIENoZWNrIGZvciBnZXRDb21wdXRlZFN0eWxlIHNvIHRoYXQgdGhpcyBjb2RlIGlzIG5vdCBydW4gaW4gSUU8OS4KCQkJaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHsKCQkJCWRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApOwoJCQkJcGl4ZWxQb3NpdGlvblZhbCA9ICggZGl2U3R5bGUgfHwge30gKS50b3AgIT09ICIxJSI7CgkJCQlyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSAoIGRpdlN0eWxlIHx8IHt9ICkubWFyZ2luTGVmdCA9PT0gIjJweCI7CgkJCQlib3hTaXppbmdSZWxpYWJsZVZhbCA9ICggZGl2U3R5bGUgfHwgeyB3aWR0aDogIjRweCIgfSApLndpZHRoID09PSAiNHB4IjsKCgkJCQkvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5CgkJCQkvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3QKCQkJCWRpdi5zdHlsZS5tYXJnaW5SaWdodCA9ICI1MCUiOwoJCQkJcGl4ZWxNYXJnaW5SaWdodFZhbCA9ICggZGl2U3R5bGUgfHwgeyBtYXJnaW5SaWdodDogIjRweCIgfSApLm1hcmdpblJpZ2h0ID09PSAiNHB4IjsKCgkJCQkvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5CgkJCQkvLyBEaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5CgkJCQkvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIgKCMzMzMzKQoJCQkJLy8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0CgkJCQljb250ZW50cyA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKSApOwoKCQkJCS8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmcKCQkJCWNvbnRlbnRzLnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9CgoJCQkJCS8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zCgkJCQkJLy8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nCgkJCQkJIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7IiArCgkJCQkJImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjAiOwoJCQkJY29udGVudHMuc3R5bGUubWFyZ2luUmlnaHQgPSBjb250ZW50cy5zdHlsZS53aWR0aCA9ICIwIjsKCQkJCWRpdi5zdHlsZS53aWR0aCA9ICIxcHgiOwoKCQkJCXJlbGlhYmxlTWFyZ2luUmlnaHRWYWwgPQoJCQkJCSFwYXJzZUZsb2F0KCAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBjb250ZW50cyApIHx8IHt9ICkubWFyZ2luUmlnaHQgKTsKCgkJCQlkaXYucmVtb3ZlQ2hpbGQoIGNvbnRlbnRzICk7CgkJCX0KCgkJCS8vIFN1cHBvcnQ6IElFNi04CgkJCS8vIEZpcnN0IGNoZWNrIHRoYXQgZ2V0Q2xpZW50UmVjdHMgd29ya3MgYXMgZXhwZWN0ZWQKCQkJLy8gQ2hlY2sgaWYgdGFibGUgY2VsbHMgc3RpbGwgaGF2ZSBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB0aGV5IGFyZSBzZXQKCQkJLy8gdG8gZGlzcGxheTpub25lIGFuZCB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdmlzaWJsZSB0YWJsZSBjZWxscyBpbiBhCgkJCS8vIHRhYmxlIHJvdzsgaWYgc28sIG9mZnNldFdpZHRoL0hlaWdodCBhcmUgbm90IHJlbGlhYmxlIGZvciB1c2Ugd2hlbgoJCQkvLyBkZXRlcm1pbmluZyBpZiBhbiBlbGVtZW50IGhhcyBiZWVuIGhpZGRlbiBkaXJlY3RseSB1c2luZwoJCQkvLyBkaXNwbGF5Om5vbmUgKGl0IGlzIHN0aWxsIHNhZmUgdG8gdXNlIG9mZnNldHMgaWYgYSBwYXJlbnQgZWxlbWVudCBpcwoJCQkvLyBoaWRkZW47IGRvbiBzYWZldHkgZ29nZ2xlcyBhbmQgc2VlIGJ1ZyAjNDUxMiBmb3IgbW9yZSBpbmZvcm1hdGlvbikuCgkJCWRpdi5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQlyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgPSBkaXYuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPT09IDA7CgkJCWlmICggcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsICkgewoJCQkJZGl2LnN0eWxlLmRpc3BsYXkgPSAiIjsKCQkJCWRpdi5pbm5lckhUTUwgPSAiPHRhYmxlPjx0cj48dGQ+PA==", "base64"));
  res.write(new Buffer("L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+IjsKCQkJCWRpdi5jaGlsZE5vZGVzWyAwIF0uc3R5bGUuYm9yZGVyQ29sbGFwc2UgPSAic2VwYXJhdGUiOwoJCQkJY29udGVudHMgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJ0ZCIgKTsKCQkJCWNvbnRlbnRzWyAwIF0uc3R5bGUuY3NzVGV4dCA9ICJtYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjA7ZGlzcGxheTpub25lIjsKCQkJCXJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwOwoJCQkJaWYgKCByZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgKSB7CgkJCQkJY29udGVudHNbIDAgXS5zdHlsZS5kaXNwbGF5ID0gIiI7CgkJCQkJY29udGVudHNbIDEgXS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJCQkJCXJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwOwoJCQkJfQoJCQl9CgoJCQkvLyBUZWFyZG93bgoJCQlkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApOwoJCX0KCgl9ICkoKTsKCgoJdmFyIGdldFN0eWxlcywgY3VyQ1NTLAoJCXJwb3NpdGlvbiA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLzsKCglpZiAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICkgewoJCWdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkgewoKCQkJLy8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MCkKCQkJLy8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzCgkJCS8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCAiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSIKCQkJdmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7CgoJCQlpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHsKCQkJCXZpZXcgPSB3aW5kb3c7CgkJCX0KCgkJCXJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTsKCQl9OwoKCQljdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7CgkJCXZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsCgkJCQlzdHlsZSA9IGVsZW0uc3R5bGU7CgoJCQljb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApOwoKCQkJLy8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3CgkJCXJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7CgoJCQkvLyBTdXBwb3J0OiBPcGVyYSAxMi4xeCBvbmx5CgkJCS8vIEZhbGwgYmFjayB0byBzdHlsZSBldmVuIHdpdGhvdXQgY29tcHV0ZWQKCQkJLy8gY29tcHV0ZWQgaXMgdW5kZWZpbmVkIGZvciBlbGVtcyBvbiBkb2N1bWVudCBmcmFnbWVudHMKCQkJaWYgKCAoIHJldCA9PT0gIiIgfHwgcmV0ID09PSB1bmRlZmluZWQgKSAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHsKCQkJCXJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApOwoJCQl9CgoJCQlpZiAoIGNvbXB1dGVkICkgewoKCQkJCS8vIEEgdHJpYnV0ZSB0byB0aGUgImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHMiCgkJCQkvLyBDaHJvbWUgPCAxNyBhbmQgU2FmYXJpIDUuMCB1c2VzICJjb21wdXRlZCB2YWx1ZSIKCQkJCS8vIGluc3RlYWQgb2YgInVzZWQgdmFsdWUiIGZvciBtYXJnaW4tcmlnaHQKCQkJCS8vIFNhZmFyaSA1LjEuNyAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywKCQkJCS8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMKCQkJCS8vIHRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzoKCQkJCS8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXMKCQkJCWlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHsKCgkJCQkJLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlcwoJCQkJCXdpZHRoID0gc3R5bGUud2lkdGg7CgkJCQkJbWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDsKCQkJCQltYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoOwoKCQkJCQkvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0CgkJCQkJc3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0OwoJCQkJCXJldCA9IGNvbXB1dGVkLndpZHRoOwoKCQkJCQkvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzCgkJCQkJc3R5bGUud2lkdGggPSB3aWR0aDsKCQkJCQlzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoOwoJCQkJCXN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7CgkJCQl9CgkJCX0KCgkJCS8vIFN1cHBvcnQ6IElFCgkJCS8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuCgkJCXJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/CgkJCQlyZXQgOgoJCQkJcmV0ICsgIiI7CgkJfTsKCX0gZWxzZSBpZiAoIGRvY3VtZW50RWxlbWVudC5jdXJyZW50U3R5bGUgKSB7CgkJZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7CgkJCXJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTsKCQl9OwoKCQljdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7CgkJCXZhciBsZWZ0LCBycywgcnNMZWZ0LCByZXQsCgkJCQlzdHlsZSA9IGVsZW0uc3R5bGU7CgoJCQljb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApOwoJCQlyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7CgoJCQkvLyBBdm9pZCBzZXR0aW5nIHJldCB0byBlbXB0eSBzdHJpbmcgaGVyZQoJCQkvLyBzbyB3ZSBkb24ndCBkZWZhdWx0IHRvIGF1dG8KCQkJaWYgKCByZXQgPT0gbnVsbCAmJiBzdHlsZSAmJiBzdHlsZVsgbmFtZSBdICkgewoJCQkJcmV0ID0gc3R5bGVbIG5hbWUgXTsKCQkJfQoKCQkJLy8gRnJvbSB0aGUgYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkcwoJCQkvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxCgoJCQkvLyBJZiB3ZSdyZSBub3QgZGVhbGluZyB3aXRoIGEgcmVndWxhciBwaXhlbCBudW1iZXIKCQkJLy8gYnV0IGEgbnVtYmVyIHRoYXQgaGFzIGEgd2VpcmQgZW5kaW5nLCB3ZSBuZWVkIHRvIGNvbnZlcnQgaXQgdG8gcGl4ZWxzCgkJCS8vIGJ1dCBub3QgcG9zaXRpb24gY3NzIGF0dHJpYnV0ZXMsIGFzIHRob3NlIGFyZQoJCQkvLyBwcm9wb3J0aW9uYWwgdG8gdGhlIHBhcmVudCBlbGVtZW50IGluc3RlYWQKCQkJLy8gYW5kIHdlIGNhbid0IG1lYXN1cmUgdGhlIHBhcmVudCBpbnN0ZWFkIGJlY2F1c2UgaXQKCQkJLy8gbWlnaHQgdHJpZ2dlciBhICJzdGFja2luZyBkb2xscyIgcHJvYmxlbQoJCQlpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiAhcnBvc2l0aW9uLnRlc3QoIG5hbWUgKSApIHsKCgkJCQkvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzCgkJCQlsZWZ0ID0gc3R5bGUubGVmdDsKCQkJCXJzID0gZWxlbS5ydW50aW1lU3R5bGU7CgkJCQlyc0xlZnQgPSBycyAmJiBycy5sZWZ0OwoKCQkJCS8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXQKCQkJCWlmICggcnNMZWZ0ICkgewoJCQkJCXJzLmxlZnQgPSBlbGVtLmN1cnJlbnRTdHlsZS5sZWZ0OwoJCQkJfQoJCQkJc3R5bGUubGVmdCA9IG5hbWUgPT09ICJmb250U2l6ZSIgPyAiMWVtIiA6IHJldDsKCQkJCXJldCA9IHN0eWxlLnBpeGVsTGVmdCArICJweCI7CgoJCQkJLy8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlcwoJCQkJc3R5bGUubGVmdCA9IGxlZnQ7CgkJCQlpZiAoIHJzTGVmdCApIHsKCQkJCQlycy5sZWZ0ID0gcnNMZWZ0OwoJCQkJfQoJCQl9CgoJCQkvLyBTdXBwb3J0OiBJRQoJCQkvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLgoJCQlyZXR1cm4gcmV0ID09PSB1bmRlZmluZWQgPwoJCQkJcmV0IDoKCQkJCXJldCArICIiIHx8ICJhdXRvIjsKCQl9OwoJfQoKCgoKCWZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHsKCgkJLy8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC4KCQlyZXR1cm4gewoJCQlnZXQ6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKCBjb25kaXRpb25GbigpICkgewoKCQkJCQkvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWUKCQkJCQkvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuCgkJCQkJZGVsZXRlIHRoaXMuZ2V0OwoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQkvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi4KCQkJCXJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApOwoJCQl9CgkJfTsKCX0KCgoJdmFyCgoJCQlyYWxwaGEgPSAvYWxwaGFcKFteKV0qXCkvaSwKCQlyb3BhY2l0eSA9IC9vcGFjaXR5XHMqPVxzKihbXildKikvaSwKCgkJLy8gc3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHQKCQkvLyAidGFibGUiLCAidGFibGUtY2VsbCIsIG9yICJ0YWJsZS1jYXB0aW9uIgoJCS8vIHNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczoKCQkvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5CgkJcmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLAoJCXJudW1zcGxpdCA9IG5ldyBSZWdFeHAoICJeKCIgKyBwbnVtICsgIikoLiopJCIsICJpIiApLAoKCQljc3NTaG93ID0geyBwb3NpdGlvbjogImFic29sdXRlIiwgdmlzaWJpbGl0eTogImhpZGRlbiIsIGRpc3BsYXk6ICJibG9jayIgfSwKCQljc3NOb3JtYWxUcmFuc2Zvcm0gPSB7CgkJCWxldHRlclNwYWNpbmc6ICIwIiwKCQkJZm9udFdlaWdodDogIjQwMCIKCQl9LAoKCQljc3NQcmVmaXhlcyA9IFsgIldlYmtpdCIsICJPIiwgIk1veiIsICJtcyIgXSwKCQllbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKS5zdHlsZTsKCgoJLy8gcmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eQoJZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7CgoJCS8vIHNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkCgkJaWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7CgkJCXJldHVybiBuYW1lOwoJCX0KCgkJLy8gY2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lcwoJCXZhciBjYXBOYW1lID0gbmFtZS5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLAoJCQlpID0gY3NzUHJlZml4ZXMubGVuZ3RoOwoKCQl3aGlsZSAoIGktLSApIHsKCQkJbmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lOwoJCQlpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHsKCQkJCXJldHVybiBuYW1lOwoJCQl9CgkJfQoJfQoKCWZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHsKCQl2YXIgZGlzcGxheSwgZWxlbSwgaGlkZGVuLAoJCQl2YWx1ZXMgPSBbXSwKCQkJaW5kZXggPSAwLAoJCQlsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7CgoJCWZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7CgkJCWVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTsKCQkJaWYgKCAhZWxlbS5zdHlsZSApIHsKCQkJCWNvbnRpbnVlOwoJCQl9CgoJCQl2YWx1ZXNbIGluZGV4IF0gPSBqUXVlcnkuX2RhdGEoIGVsZW0sICJvbGRkaXNwbGF5IiApOwoJCQlkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5OwoJCQlpZiAoIHNob3cgKSB7CgoJCQkJLy8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHQ=", "base64"));
  res.write(new Buffer("aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXMKCQkJCS8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3QKCQkJCWlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSAibm9uZSIgKSB7CgkJCQkJZWxlbS5zdHlsZS5kaXNwbGF5ID0gIiI7CgkJCQl9CgoJCQkJLy8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZQoJCQkJLy8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXMKCQkJCS8vIGZvciBzdWNoIGFuIGVsZW1lbnQKCQkJCWlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSAiIiAmJiBpc0hpZGRlbiggZWxlbSApICkgewoJCQkJCXZhbHVlc1sgaW5kZXggXSA9CgkJCQkJCWpRdWVyeS5fZGF0YSggZWxlbSwgIm9sZGRpc3BsYXkiLCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApICk7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQloaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApOwoKCQkJCWlmICggZGlzcGxheSAmJiBkaXNwbGF5ICE9PSAibm9uZSIgfHwgIWhpZGRlbiApIHsKCQkJCQlqUXVlcnkuX2RhdGEoCgkJCQkJCWVsZW0sCgkJCQkJCSJvbGRkaXNwbGF5IiwKCQkJCQkJaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApCgkJCQkJKTsKCQkJCX0KCQkJfQoJCX0KCgkJLy8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AKCQkvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93CgkJZm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHsKCQkJZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdOwoJCQlpZiAoICFlbGVtLnN0eWxlICkgewoJCQkJY29udGludWU7CgkJCX0KCQkJaWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09ICJub25lIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09ICIiICkgewoJCQkJZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCAiIiA6ICJub25lIjsKCQkJfQoJCX0KCgkJcmV0dXJuIGVsZW1lbnRzOwoJfQoKCWZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7CgkJdmFyIG1hdGNoZXMgPSBybnVtc3BsaXQuZXhlYyggdmFsdWUgKTsKCQlyZXR1cm4gbWF0Y2hlcyA/CgoJCQkvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCAic3VidHJhY3QiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3MKCQkJTWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCAicHgiICkgOgoJCQl2YWx1ZTsKCX0KCglmdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7CgkJdmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/ICJib3JkZXIiIDogImNvbnRlbnQiICkgPwoKCQkJLy8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uCgkJCTQgOgoKCQkJLy8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllcwoJCQluYW1lID09PSAid2lkdGgiID8gMSA6IDAsCgoJCQl2YWwgPSAwOwoKCQlmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7CgoJCQkvLyBib3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0CgkJCWlmICggZXh0cmEgPT09ICJtYXJnaW4iICkgewoJCQkJdmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApOwoJCQl9CgoJCQlpZiAoIGlzQm9yZGVyQm94ICkgewoKCQkJCS8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudAoJCQkJaWYgKCBleHRyYSA9PT0gImNvbnRlbnQiICkgewoJCQkJCXZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCAicGFkZGluZyIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7CgkJCQl9CgoJCQkJLy8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXIKCQkJCWlmICggZXh0cmEgIT09ICJtYXJnaW4iICkgewoJCQkJCXZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCAiYm9yZGVyIiArIGNzc0V4cGFuZFsgaSBdICsgIldpZHRoIiwgdHJ1ZSwgc3R5bGVzICk7CgkJCQl9CgkJCX0gZWxzZSB7CgoJCQkJLy8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmcKCQkJCXZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCAicGFkZGluZyIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7CgoJCQkJLy8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlcgoJCQkJaWYgKCBleHRyYSAhPT0gInBhZGRpbmciICkgewoJCQkJCXZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCAiYm9yZGVyIiArIGNzc0V4cGFuZFsgaSBdICsgIldpZHRoIiwgdHJ1ZSwgc3R5bGVzICk7CgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybiB2YWw7Cgl9CgoJZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7CgoJCS8vIFN0YXJ0IHdpdGggb2Zmc2V0IHByb3BlcnR5LCB3aGljaCBpcyBlcXVpdmFsZW50IHRvIHRoZSBib3JkZXItYm94IHZhbHVlCgkJdmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLAoJCQl2YWwgPSBuYW1lID09PSAid2lkdGgiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LAoJCQlzdA==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("L3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5LwoJalF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7CgkJdGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTsKCQl0eXBlID0gdHlwZSB8fCAiZngiOwoKCQlyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkgewoJCQl2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7CgkJCWhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHsKCQkJCXdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTsKCQkJfTsKCQl9ICk7Cgl9OwoKCgkoIGZ1bmN0aW9uKCkgewoJCXZhciBhLAoJCQlpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJpbnB1dCIgKSwKCQkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKSwKCQkJc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggInNlbGVjdCIgKSwKCQkJb3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAib3B0aW9uIiApICk7CgoJCS8vIFNldHVwCgkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKTsKCQlkaXYuc2V0QXR0cmlidXRlKCAiY2xhc3NOYW1lIiwgInQiICk7CgkJZGl2LmlubmVySFRNTCA9ICIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz4iOwoJCWEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJhIiApWyAwIF07CgoJCS8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSkKCQkvLyBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpCgkJaW5wdXQuc2V0QXR0cmlidXRlKCAidHlwZSIsICJjaGVja2JveCIgKTsKCQlkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7CgoJCWEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJhIiApWyAwIF07CgoJCS8vIEZpcnN0IGJhdGNoIG9mIHRlc3RzLgoJCWEuc3R5bGUuY3NzVGV4dCA9ICJ0b3A6MXB4IjsKCgkJLy8gVGVzdCBzZXRBdHRyaWJ1dGUgb24gY2FtZWxDYXNlIGNsYXNzLgoJCS8vIElmIGl0IHdvcmtzLCB3ZSBuZWVkIGF0dHJGaXhlcyB3aGVuIGRvaW5nIGdldC9zZXRBdHRyaWJ1dGUgKGllNi83KQoJCXN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlID0gZGl2LmNsYXNzTmFtZSAhPT0gInQiOwoKCQkvLyBHZXQgdGhlIHN0eWxlIGluZm9ybWF0aW9uIGZyb20gZ2V0QXR0cmlidXRlCgkJLy8gKElFIHVzZXMgLmNzc1RleHQgaW5zdGVhZCkKCQlzdXBwb3J0LnN0eWxlID0gL3RvcC8udGVzdCggYS5nZXRBdHRyaWJ1dGUoICJzdHlsZSIgKSApOwoKCQkvLyBNYWtlIHN1cmUgdGhhdCBVUkxzIGFyZW4ndCBtYW5pcHVsYXRlZAoJCS8vIChJRSBub3JtYWxpemVzIGl0IGJ5IGRlZmF1bHQpCgkJc3VwcG9ydC5ocmVmTm9ybWFsaXplZCA9IGEuZ2V0QXR0cmlidXRlKCAiaHJlZiIgKSA9PT0gIi9hIjsKCgkJLy8gQ2hlY2sgdGhlIGRlZmF1bHQgY2hlY2tib3gvcmFkaW8gdmFsdWUgKCIiIG9uIFdlYktpdDsgIm9uIiBlbHNld2hlcmUpCgkJc3VwcG9ydC5jaGVja09uID0gISFpbnB1dC52YWx1ZTsKCgkJLy8gTWFrZSBzdXJlIHRoYXQgYSBzZWxlY3RlZC1ieS1kZWZhdWx0IG9wdGlvbiBoYXMgYSB3b3JraW5nIHNlbGVjdGVkIHByb3BlcnR5LgoJCS8vIChXZWJLaXQgZGVmYXVsdHMgdG8gZmFsc2UgaW5zdGVhZCBvZiB0cnVlLCBJRSB0b28sIGlmIGl0J3MgaW4gYW4gb3B0Z3JvdXApCgkJc3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDsKCgkJLy8gVGVzdHMgZm9yIGVuY3R5cGUgc3VwcG9ydCBvbiBhIGZvcm0gKCM2NzQzKQoJCXN1cHBvcnQuZW5jdHlwZSA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImZvcm0iICkuZW5jdHlwZTsKCgkJLy8gTWFrZSBzdXJlIHRoYXQgdGhlIG9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlbid0IG1hcmtlZCBhcyBkaXNhYmxlZAoJCS8vIChXZWJLaXQgbWFya3MgdGhlbSBhcyBkaXNhYmxlZCkKCQlzZWxlY3QuZGlzYWJsZWQgPSB0cnVlOwoJCXN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkOwoKCQkvLyBTdXBwb3J0OiBJRTggb25seQoJCS8vIENoZWNrIGlmIHdlIGNhbiB0cnVzdCBnZXRBdHRyaWJ1dGUoInZhbHVlIikKCQlpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJpbnB1dCIgKTsKCQlpbnB1dC5zZXRBdHRyaWJ1dGUoICJ2YWx1ZSIsICIiICk7CgkJc3VwcG9ydC5pbnB1dCA9IGlucHV0LmdldEF0dHJpYnV0ZSggInZhbHVlIiApID09PSAiIjsKCgkJLy8gQ2hlY2sgaWYgYW4gaW5wdXQgbWFpbnRhaW5zIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvCgkJaW5wdXQudmFsdWUgPSAidCI7CgkJaW5wdXQuc2V0QXR0cmlidXRlKCAidHlwZSIsICJyYWRpbyIgKTsKCQlzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gInQiOwoJfSApKCk7CgoKCXZhciBycmV0dXJuID0gL1xyL2csCgkJcnNwYWNlcyA9IC9bXHgyMFx0XHJcblxmXSsvZzsKCglqUXVlcnkuZm4uZXh0ZW5kKCB7CgkJdmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7CgkJCXZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLAoJCQkJZWxlbSA9IHRoaXNbIDAgXTsKCgkJCWlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7CgkJCQlpZiAoIGVsZW0gKSB7CgkJCQkJaG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8CgkJCQkJCWpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07CgoJCQkJCWlmICgKCQkJCQkJaG9va3MgJiYKCQkJCQkJImdldCIgaW4gaG9va3MgJiYKCQkJCQkJKCByZXQgPSBob29rcy5nZXQoIGVsZW0sICJ2YWx1ZSIgKSApICE9PSB1bmRlZmluZWQKCQkJCQkpIHsKCQkJCQkJcmV0dXJuIHJldDsKCQkJCQl9CgoJCQkJCXJldCA9IGVsZW0udmFsdWU7CgoJCQkJCXJldHVybiB0eXBlb2YgcmV0ID09PSAic3RyaW5nIiA/CgoJCQkJCQkvLyBoYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzCgkJCQkJCXJldC5yZXBsYWNlKCBycmV0dXJuLCAiIiApIDoKCgkJCQkJCS8vIGhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlcgoJCQkJCQlyZXQgPT0gbnVsbCA/ICIiIDogcmV0OwoJCQkJfQoKCQkJCXJldHVybjsKCQkJfQoKCQkJaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApOwoKCQkJcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7CgkJCQl2YXIgdmFsOwoKCQkJCWlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJaWYgKCBpc0Z1bmN0aW9uICkgewoJCQkJCXZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7CgkJCQl9IGVsc2UgewoJCQkJCXZhbCA9IHZhbHVlOwoJCQkJfQoKCQkJCS8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzICIiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nCgkJCQlpZiAoIHZhbCA9PSBudWxsICkgewoJCQkJCXZhbCA9ICIiOwoJCQkJfSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gIm51bWJlciIgKSB7CgkJCQkJdmFsICs9ICIiOwoJCQkJfSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkgewoJCQkJCXZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkgewoJCQkJCQlyZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICIiIDogdmFsdWUgKyAiIjsKCQkJCQl9ICk7CgkJCQl9CgoJCQkJaG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07CgoJCQkJLy8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmcKCQkJCWlmICggIWhvb2tzIHx8ICEoICJzZXQiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsICJ2YWx1ZSIgKSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCXRoaXMudmFsdWUgPSB2YWw7CgkJCQl9CgkJCX0gKTsKCQl9Cgl9ICk7CgoJalF1ZXJ5LmV4dGVuZCggewoJCXZhbEhvb2tzOiB7CgkJCW9wdGlvbjogewoJCQkJZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCQl2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgInZhbHVlIiApOwoJCQkJCXJldHVybiB2YWwgIT0gbnVsbCA/CgkJCQkJCXZhbCA6CgoJCQkJCQkvLyBTdXBwb3J0OiBJRTEwLTExKwoJCQkJCQkvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpCgkJCQkJCS8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlCgkJCQkJCS8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlCgkJCQkJCWpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICkucmVwbGFjZSggcnNwYWNlcywgIiAiICk7CgkJCQl9CgkJCX0sCgkJCXNlbGVjdDogewoJCQkJZ2V0OiBmdW5jdGlvbiggZWxlbSApIHsKCQkJCQl2YXIgdmFsdWUsIG9wdGlvbiwKCQkJCQkJb3B0aW9ucyA9IGVsZW0ub3B0aW9ucywKCQkJCQkJaW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsCgkJCQkJCW9uZSA9IGVsZW0udHlwZSA9PT0gInNlbGVjdC1vbmUiIHx8IGluZGV4IDwgMCwKCQkJCQkJdmFsdWVzID0gb25lID8gbnVsbCA6IFtdLAoJCQkJCQltYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCwKCQkJCQkJaSA9IGluZGV4IDwgMCA/CgkJCQkJCQltYXggOgoJCQkJCQkJb25lID8gaW5kZXggOiAwOwoKCQkJCQkvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zCgkJCQkJZm9yICggOyBpIDwgbWF4OyBpKysgKSB7CgkJCQkJCW9wdGlvbiA9IG9wdGlvbnNbIGkgXTsKCgkJCQkJCS8vIG9sZElFIGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKQoJCQkJCQlpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiYKCgkJCQkJCQkJLy8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cAoJCQkJCQkJCSggc3VwcG9ydC5vcHREaXNhYmxlZCA/CgkJCQkJCQkJCSFvcHRpb24uZGlzYWJsZWQgOgoJCQkJCQkJCQlvcHRpb24uZ2V0QXR0cmlidXRlKCAiZGlzYWJsZWQiICkgPT09IG51bGwgKSAmJgoJCQkJCQkJCSggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8CgkJCQkJCQkJCSFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCAib3B0Z3JvdXAiICkgKSApIHsKCgkJCQkJCQkvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uCgkJCQkJCQl2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7CgoJCQkJCQkJLy8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHMKCQkJCQkJCWlmICggb25lICkgewoJCQkJCQkJCXJldHVybiB2YWx1ZTsKCQkJCQkJCX0KCgkJCQkJCQkvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheQoJCQkJCQkJdmFsdWVzLnB1c2goIHZhbHVlICk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCXJldHVybiB2YWx1ZXM7CgkJCQl9LAoKCQkJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkgewoJCQkJCXZhciBvcHRpb25TZXQsIG9wdGlvbiw=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("NjogMzMgfSwgeyA0OiA0NSwgNjogMywgMTQ6IFsyLCA0Nl0sIDE1OiBbMiwgNDZdLCAxOTogWzIsIDQ2XSwgMjk6IFsyLCA0Nl0sIDM0OiBbMiwgNDZdLCA0NzogWzIsIDQ2XSwgNDg6IFsyLCA0Nl0sIDUxOiBbMiwgNDZdLCA1NTogWzIsIDQ2XSwgNjA6IFsyLCA0Nl0gfSwgeyA1OiBbMiwgMTBdLCAxNDogWzIsIDEwXSwgMTU6IFsyLCAxMF0sIDE4OiBbMiwgMTBdLCAxOTogWzIsIDEwXSwgMjk6IFsyLCAxMF0sIDM0OiBbMiwgMTBdLCAzOTogWzIsIDEwXSwgNDQ6IFsyLCAxMF0sIDQ3OiBbMiwgMTBdLCA0ODogWzIsIDEwXSwgNTE6IFsyLCAxMF0sIDU1OiBbMiwgMTBdLCA2MDogWzIsIDEwXSB9LCB7IDIwOiA0NiwgNzI6IFsxLCAzNV0sIDc4OiAyNiwgNzk6IDI3LCA4MDogWzEsIDI4XSwgODE6IFsxLCAyOV0sIDgyOiBbMSwgMzBdLCA4MzogWzEsIDMxXSwgODQ6IFsxLCAzMl0sIDg1OiBbMSwgMzRdLCA4NjogMzMgfSwgeyAyMDogNDcsIDcyOiBbMSwgMzVdLCA3ODogMjYsIDc5OiAyNywgODA6IFsxLCAyOF0sIDgxOiBbMSwgMjldLCA4MjogWzEsIDMwXSwgODM6IFsxLCAzMV0sIDg0OiBbMSwgMzJdLCA4NTogWzEsIDM0XSwgODY6IDMzIH0sIHsgMjA6IDQ4LCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDIwOiA0MiwgNTY6IDQ5LCA2NDogNDMsIDY1OiBbMSwgNDRdLCA3MjogWzEsIDM1XSwgNzg6IDI2LCA3OTogMjcsIDgwOiBbMSwgMjhdLCA4MTogWzEsIDI5XSwgODI6IFsxLCAzMF0sIDgzOiBbMSwgMzFdLCA4NDogWzEsIDMyXSwgODU6IFsxLCAzNF0sIDg2OiAzMyB9LCB7IDMzOiBbMiwgNzhdLCA0OTogNTAsIDY1OiBbMiwgNzhdLCA3MjogWzIsIDc4XSwgODA6IFsyLCA3OF0sIDgxOiBbMiwgNzhdLCA4MjogWzIsIDc4XSwgODM6IFsyLCA3OF0sIDg0OiBbMiwgNzhdLCA4NTogWzIsIDc4XSB9LCB7IDIzOiBbMiwgMzNdLCAzMzogWzIsIDMzXSwgNTQ6IFsyLCAzM10sIDY1OiBbMiwgMzNdLCA2ODogWzIsIDMzXSwgNzI6IFsyLCAzM10sIDc1OiBbMiwgMzNdLCA4MDogWzIsIDMzXSwgODE6IFsyLCAzM10sIDgyOiBbMiwgMzNdLCA4MzogWzIsIDMzXSwgODQ6IFsyLCAzM10sIDg1OiBbMiwgMzNdIH0sIHsgMjM6IFsyLCAzNF0sIDMzOiBbMiwgMzRdLCA1NDogWzIsIDM0XSwgNjU6IFsyLCAzNF0sIDY4OiBbMiwgMzRdLCA3MjogWzIsIDM0XSwgNzU6IFsyLCAzNF0sIDgwOiBbMiwgMzRdLCA4MTogWzIsIDM0XSwgODI6IFsyLCAzNF0sIDgzOiBbMiwgMzRdLCA4NDogWzIsIDM0XSwgODU6IFsyLCAzNF0gfSwgeyAyMzogWzIsIDM1XSwgMzM6IFsyLCAzNV0sIDU0OiBbMiwgMzVdLCA2NTogWzIsIDM1XSwgNjg6IFsyLCAzNV0sIDcyOiBbMiwgMzVdLCA3NTogWzIsIDM1XSwgODA6IFsyLCAzNV0sIDgxOiBbMiwgMzVdLCA4MjogWzIsIDM1XSwgODM6IFsyLCAzNV0sIDg0OiBbMiwgMzVdLCA4NTogWzIsIDM1XSB9LCB7IDIzOiBbMiwgMzZdLCAzMzogWzIsIDM2XSwgNTQ6IFsyLCAzNl0sIDY1OiBbMiwgMzZdLCA2ODogWzIsIDM2XSwgNzI6IFsyLCAzNl0sIDc1OiBbMiwgMzZdLCA4MDogWzIsIDM2XSwgODE6IFsyLCAzNl0sIDgyOiBbMiwgMzZdLCA4MzogWzIsIDM2XSwgODQ6IFsyLCAzNl0sIDg1OiBbMiwgMzZdIH0sIHsgMjM6IFsyLCAzN10sIDMzOiBbMiwgMzddLCA1NDogWzIsIDM3XSwgNjU6IFsyLCAzN10sIDY4OiBbMiwgMzddLCA3MjogWzIsIDM3XSwgNzU6IFsyLCAzN10sIDgwOiBbMiwgMzddLCA4MTogWzIsIDM3XSwgODI6IFsyLCAzN10sIDgzOiBbMiwgMzddLCA4NDogWzIsIDM3XSwgODU6IFsyLCAzN10gfSwgeyAyMzogWzIsIDM4XSwgMzM6IFsyLCAzOF0sIDU0OiBbMiwgMzhdLCA2NTogWzIsIDM4XSwgNjg6IFsyLCAzOF0sIDcyOiBbMiwgMzhdLCA3NTogWzIsIDM4XSwgODA6IFsyLCAzOF0sIDgxOiBbMiwgMzhdLCA4MjogWzIsIDM4XSwgODM6IFsyLCAzOF0sIDg0OiBbMiwgMzhdLCA4NTogWzIsIDM4XSB9LCB7IDIzOiBbMiwgMzldLCAzMzogWzIsIDM5XSwgNTQ6IFsyLCAzOV0sIDY1OiBbMiwgMzldLCA2ODogWzIsIDM5XSwgNzI6IFsyLCAzOV0sIDc1OiBbMiwgMzldLCA4MDogWzIsIDM5XSwgODE6IFsyLCAzOV0sIDgyOiBbMiwgMzldLCA4MzogWzIsIDM5XSwgODQ6IFsyLCAzOV0sIDg1OiBbMiwgMzldIH0sIHsgMjM6IFsyLCA0M10sIDMzOiBbMiwgNDNdLCA1NDogWzIsIDQzXSwgNjU6IFsyLCA0M10sIDY4OiBbMiwgNDNdLCA3MjogWzIsIDQzXSwgNzU6IFsyLCA0M10sIDgwOiBbMiwgNDNdLCA4MTogWzIsIDQzXSwgODI6IFsyLCA0M10sIDgzOiBbMiwgNDNdLCA4NDogWzIsIDQzXSwgODU6IFsyLCA0M10sIDg3OiBbMSwgNTFdIH0sIHsgNzI6IFsxLCAzNV0sIDg2OiA1MiB9LCB7IDIzOiBbMiwgNDVdLCAzMzogWzIsIDQ1XSwgNTQ6IFsyLCA0NV0sIDY1OiBbMiwgNDVdLCA2ODogWzIsIDQ1XSwgNzI6IFsyLCA0NV0sIDc1OiBbMiwgNDVdLCA4MDogWzIsIDQ1XSwgODE6IFsyLCA0NV0sIDgyOiBbMiwgNDVdLCA4MzogWzIsIDQ1XSwgODQ6IFsyLCA0NV0sIDg1OiBbMiwgNDVdLCA4NzogWzIsIDQ1XSB9LCB7IDUyOiA1MywgNTQ6IFsyLCA4Ml0sIDY1OiBbMiwgODJdLCA3MjogWzIsIDgyXSwgODA6IFsyLCA4Ml0sIDgxOiBbMiwgODJdLCA4MjogWzIsIDgyXSwgODM6IFsyLCA4Ml0sIDg0OiBbMiwgODJdLCA4NTogWzIsIDgyXSB9LCB7IDI1OiA1NCwgMzg6IDU2LCAzOTogWzEsIDU4XSwgNDM6IDU3LCA0NDogWzEsIDU5XSwgNDU6IDU1LCA0NzogWzIsIDU0XSB9LCB7IDI4OiA2MCwgNDM6IDYxLCA0NDogWzEsIDU5XSwgNDc6IFsyLCA1Nl0gfSwgeyAxMzogNjMsIDE1OiBbMSwgMjBdLCAxODogWzEsIA==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("NTogWzIsIDcxXSB9LCB7IDMzOiBbMiwgNzNdLCA3NTogWzIsIDczXSB9LCB7IDIzOiBbMiwgMjldLCAzMzogWzIsIDI5XSwgNTQ6IFsyLCAyOV0sIDY1OiBbMiwgMjldLCA2ODogWzIsIDI5XSwgNzI6IFsyLCAyOV0sIDc1OiBbMiwgMjldLCA4MDogWzIsIDI5XSwgODE6IFsyLCAyOV0sIDgyOiBbMiwgMjldLCA4MzogWzIsIDI5XSwgODQ6IFsyLCAyOV0sIDg1OiBbMiwgMjldIH0sIHsgMTQ6IFsyLCAxNV0sIDE1OiBbMiwgMTVdLCAxOTogWzIsIDE1XSwgMjk6IFsyLCAxNV0sIDM0OiBbMiwgMTVdLCAzOTogWzIsIDE1XSwgNDQ6IFsyLCAxNV0sIDQ3OiBbMiwgMTVdLCA0ODogWzIsIDE1XSwgNTE6IFsyLCAxNV0sIDU1OiBbMiwgMTVdLCA2MDogWzIsIDE1XSB9LCB7IDcyOiBbMSwgMTM4XSwgNzc6IFsxLCAxMzddIH0sIHsgNzI6IFsyLCAxMDBdLCA3NzogWzIsIDEwMF0gfSwgeyAxNDogWzIsIDE2XSwgMTU6IFsyLCAxNl0sIDE5OiBbMiwgMTZdLCAyOTogWzIsIDE2XSwgMzQ6IFsyLCAxNl0sIDQ0OiBbMiwgMTZdLCA0NzogWzIsIDE2XSwgNDg6IFsyLCAxNl0sIDUxOiBbMiwgMTZdLCA1NTogWzIsIDE2XSwgNjA6IFsyLCAxNl0gfSwgeyAzMzogWzEsIDEzOV0gfSwgeyAzMzogWzIsIDc1XSB9LCB7IDMzOiBbMiwgMzJdIH0sIHsgNzI6IFsyLCAxMDFdLCA3NzogWzIsIDEwMV0gfSwgeyAxNDogWzIsIDE3XSwgMTU6IFsyLCAxN10sIDE5OiBbMiwgMTddLCAyOTogWzIsIDE3XSwgMzQ6IFsyLCAxN10sIDM5OiBbMiwgMTddLCA0NDogWzIsIDE3XSwgNDc6IFsyLCAxN10sIDQ4OiBbMiwgMTddLCA1MTogWzIsIDE3XSwgNTU6IFsyLCAxN10sIDYwOiBbMiwgMTddIH1dLAoJCSAgICAgICAgZGVmYXVsdEFjdGlvbnM6IHsgNDogWzIsIDFdLCA1NTogWzIsIDU1XSwgNTc6IFsyLCAyMF0sIDYxOiBbMiwgNTddLCA3NDogWzIsIDgxXSwgODM6IFsyLCA4NV0sIDg3OiBbMiwgMThdLCA5MTogWzIsIDg5XSwgMTAyOiBbMiwgNTNdLCAxMDU6IFsyLCA5M10sIDExMTogWzIsIDE5XSwgMTEyOiBbMiwgNzddLCAxMTc6IFsyLCA5N10sIDEyMDogWzIsIDYzXSwgMTIzOiBbMiwgNjldLCAxMjQ6IFsyLCAxMl0sIDEzNjogWzIsIDc1XSwgMTM3OiBbMiwgMzJdIH0sCgkJICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkgewoJCSAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzdHIpOwoJCSAgICAgICAgfSwKCQkgICAgICAgIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShpbnB1dCkgewoJCSAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcywKCQkgICAgICAgICAgICAgICAgc3RhY2sgPSBbMF0sCgkJICAgICAgICAgICAgICAgIHZzdGFjayA9IFtudWxsXSwKCQkgICAgICAgICAgICAgICAgbHN0YWNrID0gW10sCgkJICAgICAgICAgICAgICAgIHRhYmxlID0gdGhpcy50YWJsZSwKCQkgICAgICAgICAgICAgICAgeXl0ZXh0ID0gIiIsCgkJICAgICAgICAgICAgICAgIHl5bGluZW5vID0gMCwKCQkgICAgICAgICAgICAgICAgeXlsZW5nID0gMCwKCQkgICAgICAgICAgICAgICAgcmVjb3ZlcmluZyA9IDAsCgkJICAgICAgICAgICAgICAgIFRFUlJPUiA9IDIsCgkJICAgICAgICAgICAgICAgIEVPRiA9IDE7CgkJICAgICAgICAgICAgdGhpcy5sZXhlci5zZXRJbnB1dChpbnB1dCk7CgkJICAgICAgICAgICAgdGhpcy5sZXhlci55eSA9IHRoaXMueXk7CgkJICAgICAgICAgICAgdGhpcy55eS5sZXhlciA9IHRoaXMubGV4ZXI7CgkJICAgICAgICAgICAgdGhpcy55eS5wYXJzZXIgPSB0aGlzOwoJCSAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5sZXhlci55eWxsb2MgPT0gInVuZGVmaW5lZCIpIHRoaXMubGV4ZXIueXlsbG9jID0ge307CgkJICAgICAgICAgICAgdmFyIHl5bG9jID0gdGhpcy5sZXhlci55eWxsb2M7CgkJICAgICAgICAgICAgbHN0YWNrLnB1c2goeXlsb2MpOwoJCSAgICAgICAgICAgIHZhciByYW5nZXMgPSB0aGlzLmxleGVyLm9wdGlvbnMgJiYgdGhpcy5sZXhlci5vcHRpb25zLnJhbmdlczsKCQkgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMueXkucGFyc2VFcnJvciA9PT0gImZ1bmN0aW9uIikgdGhpcy5wYXJzZUVycm9yID0gdGhpcy55eS5wYXJzZUVycm9yOwoJCSAgICAgICAgICAgIGZ1bmN0aW9uIHBvcFN0YWNrKG4pIHsKCQkgICAgICAgICAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMiAqIG47CgkJICAgICAgICAgICAgICAgIHZzdGFjay5sZW5ndGggPSB2c3RhY2subGVuZ3RoIC0gbjsKCQkgICAgICAgICAgICAgICAgbHN0YWNrLmxlbmd0aCA9IGxzdGFjay5sZW5ndGggLSBuOwoJCSAgICAgICAgICAgIH0KCQkgICAgICAgICAgICBmdW5jdGlvbiBsZXgoKSB7CgkJICAgICAgICAgICAgICAgIHZhciB0b2tlbjsKCQkgICAgICAgICAgICAgICAgdG9rZW4gPSBzZWxmLmxleGVyLmxleCgpIHx8IDE7CgkJICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09ICJudW1iZXIiKSB7CgkJICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHNlbGYuc3ltYm9sc19bdG9rZW5dIHx8IHRva2VuOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjsKCQkgICAgICAgICAgICB9CgkJICAgICAgICAgICAgdmFyIHN5bWJvbCwKCQkgICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wsCgkJICAgICAgICAgICAgICAgIHN0YXRlLAoJCSAgICAgICAgICAgICAgICBhY3Rpb24sCgkJICAgICAgICAgICAgICAgIGEsCgkJICAgICAgICAgICAgICAgIHIsCgkJICAgICAgICAgICAgICAgIHl5dmFsID0ge30sCgkJICAgICAgICAgICAgICAgIHAsCgkJICAgICAgICAgICAgICAgIGxlbiwKCQkgICAgICAgICAgICAgICAgbmV3U3RhdGUsCgkJICAgICAgICAgICAgICAgIGV4cGVjdGVkOwoJCSAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7CgkJICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07CgkJICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkgewoJCSAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gdGhpcy5kZWZhdWx0QWN0aW9uc1tzdGF0ZV07CgkJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgICAgICBpZiAoc3ltYm9sID09PSBudWxsIHx8IHR5cGVvZiBzeW1ib2wgPT0gInVuZGVmaW5lZCIpIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBsZXgoKTsKCQkgICAgICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA=", "base64"));
  res.write(new Buffer("PSB0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF07CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICJ1bmRlZmluZWQiIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHsKCQkgICAgICAgICAgICAgICAgICAgIHZhciBlcnJTdHIgPSAiIjsKCQkgICAgICAgICAgICAgICAgICAgIGlmICghcmVjb3ZlcmluZykgewoJCSAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkID0gW107CgkJICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwIGluIHRhYmxlW3N0YXRlXSkgaWYgKHRoaXMudGVybWluYWxzX1twXSAmJiBwID4gMikgewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZC5wdXNoKCInIiArIHRoaXMudGVybWluYWxzX1twXSArICInIik7CgkJICAgICAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxleGVyLnNob3dQb3NpdGlvbikgewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSAiUGFyc2UgZXJyb3Igb24gbGluZSAiICsgKHl5bGluZW5vICsgMSkgKyAiOlxuIiArIHRoaXMubGV4ZXIuc2hvd1Bvc2l0aW9uKCkgKyAiXG5FeHBlY3RpbmcgIiArIGV4cGVjdGVkLmpvaW4oIiwgIikgKyAiLCBnb3QgJyIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArICInIjsKCQkgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSAiUGFyc2UgZXJyb3Igb24gbGluZSAiICsgKHl5bGluZW5vICsgMSkgKyAiOiBVbmV4cGVjdGVkICIgKyAoc3ltYm9sID09IDEgPyAiZW5kIG9mIGlucHV0IiA6ICInIiArICh0aGlzLnRlcm1pbmFsc19bc3ltYm9sXSB8fCBzeW1ib2wpICsgIiciKTsKCQkgICAgICAgICAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwgeyB0ZXh0OiB0aGlzLmxleGVyLm1hdGNoLCB0b2tlbjogdGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sLCBsaW5lOiB0aGlzLmxleGVyLnl5bGluZW5vLCBsb2M6IHl5bG9jLCBleHBlY3RlZDogZXhwZWN0ZWQgfSk7CgkJICAgICAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgaWYgKGFjdGlvblswXSBpbnN0YW5jZW9mIEFycmF5ICYmIGFjdGlvbi5sZW5ndGggPiAxKSB7CgkJICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiAiICsgc3RhdGUgKyAiLCB0b2tlbjogIiArIHN5bWJvbCk7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHsKCQkgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKCQkgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrLnB1c2godGhpcy5sZXhlci55eXRleHQpOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjay5wdXNoKHRoaXMubGV4ZXIueXlsbG9jKTsKCQkgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGFjdGlvblsxXSk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gbnVsbDsKCQkgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXByZUVycm9yU3ltYm9sKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5bGVuZyA9IHRoaXMubGV4ZXIueXlsZW5nOwoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eXRleHQgPSB0aGlzLmxleGVyLnl5dGV4dDsKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXlsaW5lbm8gPSB0aGlzLmxleGVyLnl5bGluZW5vOwoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eWxvYyA9IHRoaXMubGV4ZXIueXlsbG9jOwoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVjb3ZlcmluZyA+IDApIHJlY292ZXJpbmctLTsKCQkgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBwcmVFcnJvclN5bWJvbDsKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlRXJyb3JTeW1ib2wgPSBudWxsOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKCQkgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSB0aGlzLnByb2R1Y3Rpb25zX1thY3Rpb25bMV1dWzFdOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLiQgPSB2c3RhY2tbdnN0YWNrLmxlbmd0aCAtIGxlbl07CgkJICAgICAgICAgICAgICAgICAgICAgICAgeXl2YWwuXyQgPSB7IGZpcnN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfbGluZSwgbGFzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfbGluZSwgZmlyc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2NvbHVtbiwgbGFzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9jb2x1bW4gfTsKCQkgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VzKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl5dmFsLl8kLnJhbmdlID0gW2xzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0ucmFuZ2VbMF0sIGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ucmFuZ2VbMV1dOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIHl5dGV4dCwgeXlsZW5nLCB5eWxpbmVubywgdGhpcy55eSwgYWN0aW9uWzFdLCB2c3RhY2ssIGxzdGFjayk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAidW5kZWZpbmVkIikgewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjsKCQkgICAgICAgICAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbikgewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKDAsIC0xICogbGVuICogMik7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZzdGFjayA9IHZzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxzdGFjayA9IGxzdGFjay5zbGljZSgwLCAtMSAqIGxlbik7CgkJICAgICAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVswXSk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgdnN0YWNrLnB1c2goeXl2YWwuJCk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgbHN0YWNrLnB1c2goeXl2YWwuXyQpOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gdGFibGVbc3RhY2tbc3RhY2subGVuZ3RoIC0gMl1dW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdXTsKCQkgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5ld1N0YXRlKTsKCQkgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKCQkgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIH0KCQkgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCQkgICAgICAgIH0KCQkgICAgfTsKCQkgICAgLyogSmlzb24gZ2VuZXJhdGVkIGxleGVyICovCgkJICAgIHZhciBsZXhlciA9IChmdW5jdGlvbiAoKSB7CgkJICAgICAgICB2YXIgbGV4ZXIgPSB7IEVPRjogMSwKCQkgICAgICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCkgewoJCSAgICAgICAgICAgICAgICBpZiAodGhpcy55eS5wYXJzZXIpIHsKCQkgICAgICAgICAgICAgICAgICAgIHRoaXMueXkucGFyc2VyLnBhcnNlRXJyb3Ioc3RyLCBoYXNoKTsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihzdHIpOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICBzZXRJbnB1dDogZnVuY3Rpb24gc2V0SW5wdXQoaW5wdXQpIHsKCQkgICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDsKCQkgICAgICAgICAgICAgICAgdGhpcy5fbW9yZSA9IHRoaXMuX2xlc3MgPSB0aGlzLmRvbmUgPSBmYWxzZTsKCQkgICAgICAgICAgICAgICAgdGhpcy55eWxpbmVubyA9IHRoaXMueXlsZW5nID0gMDsKCQkgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoID0gJyc7CgkJICAgICAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTsKCQkgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MgPSB7IGZpcnN0X2xpbmU6IDEsIGZpcnN0X2NvbHVtbjogMCwgbGFzdF9saW5lOiAxLCBsYXN0X2NvbHVtbjogMCB9OwoJCSAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykgdGhpcy55eWxsb2MucmFuZ2UgPSBbMCwgMF07CgkJICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gaW5wdXQoKSB7CgkJICAgICAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuX2lucHV0WzBdOwoJCSAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBjaDsKCQkgICAgICAgICAgICAgICAgdGhpcy55eWxlbmcrKzsKCQkgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQrKzsKCQkgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCArPSBjaDsKCQkgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IGNoOwoJCSAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSBjaC5tYXRjaCgvKD86XHJcbj98XG4pLiovZyk7CgkJICAgICAgICAgICAgICAgIGlmIChsaW5lcykgewoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxpbmVubysrOwoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MubGFzdF9saW5lKys7CgkJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbisrOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB0aGlzLnl5bGxvYy5yYW5nZVsxXSsrOwoKCQkgICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZSgxKTsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIGNoOwoJCSAgICAgICAgICAgIH0sCgkJICAgICAgICAgICAgdW5wdXQ6IGZ1bmN0aW9uIHVucHV0KGNoKSB7CgkJICAgICAgICAgICAgICAgIHZhciBsZW4gPSBjaC5sZW5ndGg7CgkJICAgICAgICAgICAgICAgIHZhciBsaW5lcyA9IGNoLnNwbGl0KC8oPzpcclxuP3xcbikvZyk7CgoJCSAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dCA9IGNoICsgdGhpcy5faW5wdXQ7CgkJICAgICAgICAgICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy55eXRleHQuc3Vic3RyKDAsIHRoaXMueXl0ZXh0Lmxlbmd0aCAtIGxlbiAtIDEpOwoJCSAgICAgICAgICAgICAgICAvL3RoaXMueXlsZW5nIC09IGxlbjsKCQkgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgLT0gbGVuOwoJCSAgICAgICAgICAgICAgICB2YXIgb2xkTGluZXMgPSB0aGlzLm1hdGNoLnNwbGl0KC8oPzpcclxuP3xcbikvZyk7CgkJICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggPSB0aGlzLm1hdGNoLnN1YnN0cigwLCB0aGlzLm1hdGNoLmxlbmd0aCAtIDEpOwoJCSAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGggLSAxKTsKCgkJICAgICAgICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggLSAxKSB0aGlzLnl5bGluZW5vIC09IGxpbmVzLmxlbmd0aCAtIDE7CgkJICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy55eWxsb2MucmFuZ2U7CgoJCSAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYyA9IHsgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSwKCQkgICAgICAgICAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubyArIDEsCgkJICAgICAgICAgICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiwKCQkgICAgICAgICAgICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/IChsaW5lcy5sZW5ndGggPT09IG9sZExpbmVzLmxlbmd0aCA/IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiA6IDApICsgb2xkTGluZXNbb2xkTGluZXMubGVuZ3RoIC0gbGluZXMubGVuZ3RoXS5sZW5ndGggLSBsaW5lc1swXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gLSBsZW4KCQkgICAgICAgICAgICAgICAgfTsKCgkJICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFtyWzBdLCByWzBdICsgdGhpcy55eWxlbmcgLSBsZW5dOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwoJCSAgICAgICAgICAgIH0sCgkJICAgICAgICAgICAgbW9yZTogZnVuY3Rpb24gbW9yZSgpIHsKCQkgICAgICAgICAgICAgICAgdGhpcy5fbW9yZSA9IHRydWU7CgkJICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwoJCSAgICAgICAgICAgIH0sCgkJICAgICAgICAgICAgbGVzczogZnVuY3Rpb24gbGVzcyhuKSB7CgkJICAgICAgICAgICAgICAgIHRoaXMudW5wdXQodGhpcy5tYXRjaC5zbGljZShuKSk7CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICBwYXN0SW5wdXQ6IGZ1bmN0aW9uIHBhc3RJbnB1dCgpIHsKCQkgICAgICAgICAgICAgICAgdmFyIHBhc3QgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGggLSB0aGlzLm1hdGNoLmxlbmd0aCk7CgkJICAgICAgICAgICAgICAgIHJldHVybiAocGFzdC5sZW5ndGggPiAyMCA/ICcuLi4nIDogJycpICsgcGFzdC5zdWJzdHIoLTIwKS5yZXBsYWNlKC9cbi9nLCAiIik7CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICB1cGNvbWluZ0lucHV0OiBmdW5jdGlvbiB1cGNvbWluZ0lucHV0KCkgewoJCSAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7CgkJICAgICAgICAgICAgICAgIGlmIChuZXh0Lmxlbmd0aCA8IDIwKSB7CgkJICAgICAgICAgICAgICAgICAgICBuZXh0ICs9IHRoaXMuX2lucHV0LnN1YnN0cigwLCAyMCAtIG5leHQubGVuZ3RoKTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICByZXR1cm4gKG5leHQuc3Vic3RyKDAsIDIwKSArIChuZXh0Lmxlbmd0aCA+IDIwID8gJy4uLicgOiAnJykpLnJlcGxhY2UoL1xuL2csICIiKTsKCQkgICAgICAgICAgICB9LAoJCSAgICAgICAgICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24gc2hvd1Bvc2l0aW9uKCkgewoJCSAgICAgICAgICAgICAgICB2YXIgcHJlID0gdGhpcy5wYXN0SW5wdXQoKTsKCQkgICAgICAgICAgICAgICAgdmFyIGMgPSBuZXcgQXJyYXkocHJlLmxlbmd0aCArIDEpLmpvaW4oIi0iKTsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIHByZSArIHRoaXMudXBjb21pbmdJbnB1dCgpICsgIlxuIiArIGMgKyAiXiI7CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkgewoJCSAgICAgICAgICAgICAgICBpZiAodGhpcy5kb25lKSB7CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5FT0Y7CgkJICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbnB1dCkgdGhpcy5kb25lID0gdHJ1ZTsKCgkJICAgICAgICAgICAgICAgIHZhciB0b2tlbiwgbWF0Y2gsIHRlbXBNYXRjaCwgaW5kZXgsIGNvbCwgbGluZXM7CgkJICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbW9yZSkgewoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy55eXRleHQgPSAnJzsKCQkgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggPSAnJzsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLl9jdXJyZW50UnVsZXMoKTsKCQkgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykgewoJCSAgICAgICAgICAgICAgICAgICAgdGVtcE1hdGNoID0gdGhpcy5faW5wdXQubWF0Y2godGhpcy5ydWxlc1tydWxlc1tpXV0pOwoJCSAgICAgICAgICAgICAgICAgICAgaWYgKHRlbXBNYXRjaCAmJiAoIW1hdGNoIHx8IHRlbXBNYXRjaFswXS5sZW5ndGggPiBtYXRjaFswXS5sZW5ndGgpKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSB0ZW1wTWF0Y2g7CgkJICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBp", "base64"));
  res.write(new Buffer("OwoJCSAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmZsZXgpIGJyZWFrOwoJCSAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgewoJCSAgICAgICAgICAgICAgICAgICAgbGluZXMgPSBtYXRjaFswXS5tYXRjaCgvKD86XHJcbj98XG4pLiovZyk7CgkJICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMpIHRoaXMueXlsaW5lbm8gKz0gbGluZXMubGVuZ3RoOwoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy55eWxsb2MgPSB7IGZpcnN0X2xpbmU6IHRoaXMueXlsbG9jLmxhc3RfbGluZSwKCQkgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLAoJCSAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sCgkJICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IGxpbmVzID8gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoIC0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubWF0Y2goL1xyP1xuPy8pWzBdLmxlbmd0aCA6IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uICsgbWF0Y2hbMF0ubGVuZ3RoIH07CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTsKCQkgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggKz0gbWF0Y2hbMF07CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaDsKCQkgICAgICAgICAgICAgICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoOwoJCSAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFt0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKz0gdGhpcy55eWxlbmddOwoJCSAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlOwoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShtYXRjaFswXS5sZW5ndGgpOwoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVkICs9IG1hdGNoWzBdOwoJCSAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLnBlcmZvcm1BY3Rpb24uY2FsbCh0aGlzLCB0aGlzLnl5LCB0aGlzLCBydWxlc1tpbmRleF0sIHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSk7CgkJICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kb25lICYmIHRoaXMuX2lucHV0KSB0aGlzLmRvbmUgPSBmYWxzZTsKCQkgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikgcmV0dXJuIHRva2VuO2Vsc2UgcmV0dXJuOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbnB1dCA9PT0gIiIpIHsKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkVPRjsKCQkgICAgICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoJ0xleGljYWwgZXJyb3Igb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKSArICcuIFVucmVjb2duaXplZCB0ZXh0LlxuJyArIHRoaXMuc2hvd1Bvc2l0aW9uKCksIHsgdGV4dDogIiIsIHRva2VuOiBudWxsLCBsaW5lOiB0aGlzLnl5bGluZW5vIH0pOwoJCSAgICAgICAgICAgICAgICB9CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICBsZXg6IGZ1bmN0aW9uIGxleCgpIHsKCQkgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLm5leHQoKTsKCQkgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykgewoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7CgkJICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZXgoKTsKCQkgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgIH0sCgkJICAgICAgICAgICAgYmVnaW46IGZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikgewoJCSAgICAgICAgICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTsKCQkgICAgICAgICAgICB9LAoJCSAgICAgICAgICAgIHBvcFN0YXRlOiBmdW5jdGlvbiBwb3BTdGF0ZSgpIHsKCQkgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICBfY3VycmVudFJ1bGVzOiBmdW5jdGlvbiBfY3VycmVudFJ1bGVzKCkgewoJCSAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW3RoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXV0ucnVsZXM7CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICB0b3BTdGF0ZTogZnVuY3Rpb24gdG9wU3RhdGUoKSB7CgkJICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMl07CgkJICAgICAgICAgICAgfSwKCQkgICAgICAgICAgICBwdXNoU3RhdGU6IGZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikgewoJCSAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7CgkJICAgICAgICAgICAgfSB9OwoJCSAgICAgICAgbGV4ZXIub3B0aW9ucyA9IHt9OwoJCSAgICAgICAgbGV4ZXIucGVyZm9ybUFjdGlvbiA9IGZ1bmN0aW9uIGFub255bW91cyh5eSwgeXlfLCAkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLCBZWV9TVEFSVAoJCSAgICAgICAgLyoqLykgewoKCQkgICAgICAgICAgICBmdW5jdGlvbiBzdHJpcChzdGFydCwgZW5kKSB7CgkJICAgICAgICAgICAgICAgIHJldHVybiB5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5zdWJzdHIoc3RhcnQsIHl5Xy55eWxlbmcgLSBlbmQpOwoJCSAgICAgICAgICAgIH0KCgkJICAgICAgICAgICAgdmFyIFlZU1RBVEUgPSBZWV9TVEFSVDsKCQkgICAgICAgICAgICBzd2l0Y2ggKCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMpIHsKCQkgICAgICAgICAgICAgICAgY2FzZSAwOgoJCSAgICAgICAgICAgICAgICAgICAgaWYgKHl5Xy55eXRleHQuc2xpY2UoLTIpID09PSAiXFxcXCIpIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcCgwLCAxKTsKCQkgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCJtdSIpOwoJCSAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5eV8ueXl0ZXh0LnNsaWNlKC0xKSA9PT0gIlxcIikgewoJCSAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwKDAsIDEpOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmVnaW4oImVtdSIpOwoJCSAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCJtdSIpOwoJCSAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICAgICAgaWYgKHl5Xy55eXRleHQpIHJldHVybiAxNTsKCgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAxOgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMjoKCQkgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTsKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTsKCgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAzOgoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbigncmF3Jyk7cmV0dXJuIDE1OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgNDoKCQkgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTsKCQkgICAgICAgICAgICAgICAgICAgIC8vIFNob3VsZCBiZSB1c2luZyBgdGhpcy50b3BTdGF0ZSgpYCBiZWxvdywgYnV0IGl0IGN1cnJlbnRseQoJCSAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyB0aGUgc2Vjb25kIHRvcCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCB0b3AuIE9wZW5lZCBhbgoJCSAgICAgICAgICAgICAgICAgICAgLy8gaXNzdWUgYWJvdXQgaXQgYXQgaHR0cHM6Ly9naXRodWIuY29tL3phYWNoL2ppc29uL2lzc3Vlcy8yOTEKCQkgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0gPT09ICdyYXcnKSB7CgkJICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE1OwoJCSAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKCQkgICAgICAgICAgICAgICAgICAgICAgICB5eV8ueXl0ZXh0ID0geXlfLnl5dGV4dC5zdWJzdHIoNSwgeXlfLnl5bGVuZyAtIDkpOwoJCSAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnRU5EX1JBV19CTE9DSyc7CgkJICAgICAgICAgICAgICAgICAgICB9CgoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgNToKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiAxNTsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDY6CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTQ7CgoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgNzoKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA2NTsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDg6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gNjg7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSA5OgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE5OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMTA6CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luKCdyYXcnKTsKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiAyMzsKCgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAxMToKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA1NTsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDEyOgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDYwOwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMTM6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjk7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAxNDoKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA0NzsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDE1OgoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO3JldHVybiA0NDsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDE2OgoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO3JldHVybiA0NDsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDE3OgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDM0OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMTg6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzk7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAxOToKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA1MTsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDIwOgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQ4OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMjE6CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnVucHV0KHl5Xy55eXRleHQpOwoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpOwoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpbignY29tJyk7CgoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMjI6CgkJICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTQ7CgoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMjM6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDg7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAyNDoKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA3MzsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDI1OgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDcyOwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMjY6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzI7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAyNzoKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA4NzsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDI4OgoJCSAgICAgICAgICAgICAgICAgICAgLy8gaWdub3JlIHdoaXRlc3BhY2UKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDI5OgoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO3JldHVybiA1NDsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDMwOgoJCSAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO3JldHVybiAzMzsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDMxOgoJCSAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHN0cmlwKDEsIDIpLnJlcGxhY2UoL1xcIi9nLCAnIicpO3JldHVybiA4MDsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDMyOgoJCSAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHN0cmlwKDEsIDIpLnJlcGxhY2UoL1xcJy9nLCAiJyIpO3JldHVybiA4MDsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDMzOgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDg1OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMzQ6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gODI7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAzNToKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA4MjsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDM2OgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDgzOwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgMzc6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gODQ7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSAzODoKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA4MTsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDM5OgoJCSAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDc1OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgICAgIGNhc2UgNDA6CgkJICAgICAgICAgICAgICAgICAgICByZXR1cm4gNzc7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSA0MToKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA3MjsKCQkgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoJCSAgICAgICAgICAgICAgICBjYXNlIDQyOgoJCSAgICAgICAgICAgICAgICAgICAgeXlfLnl5dGV4dCA9IHl5Xy55eXRleHQucmVwbGFjZSgvXFwoW1xcXF1dKS9nLCAnJDEnKTtyZXR1cm4gNzI7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSA0MzoKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiAnSU5WQUxJRCc7CgkJICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkgICAgICAgICAgICAgICAgY2FzZSA0NDoKCQkgICAgICAgICAgICAgICAgICAgIHJldHVybiA1OwoJCSAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJICAgICAgICAgICAgfQoJCSAgICAgICAgfTsKCQkgICAgICAgIGxleGVyLnJ1bGVzID0gWy9eKD86W15ceDAwXSo/KD89KFx7XHspKSkvLCAvXig/OlteXHgwMF0rKS8sIC9eKD86W15ceDAwXXsyLH0/KD89KFx7XHt8XFxce1x7fFxcXFxce1x7fCQpKSkvLCAvXig/Olx7XHtce1x7KD89W15cL10pKS8sIC9eKD86XHtce1x7XHtcL1teXHMhIiMlLSxcLlwvOy0+QFxbLVxeYFx7LX5dKyg/PVs9fVxzXC8uXSlcfVx9XH1cfSkvLCAvXig/OlteXHgwMF0qPyg/PShce1x7XHtceykpKS8sIC9eKD86W1xzXFNdKj8tLSh+KT9cfVx9KS8sIC9eKD86XCgpLywgL14oPzpcKSkvLCAvXig/Olx7XHtce1x7KS8sIC9eKD86XH1cfVx9XH0pLywgL14oPzpce1x7KH4pPz4pLywgL14oPzpce1x7KH4pPyM+KS8sIC9eKD86XHtceyh+KT8jXCo/KS8sIC9eKD86XHtceyh+KT9cLykvLCAvXig/Olx7XHsofik/XF5ccyoofik/XH1cfSkvLCAvXig/Olx7XHsofik/XHMqZWxzZVxzKih+KT9cfVx9KS8sIC9eKD86XHtceyh+KT9cXikvLCAvXig/Olx7XHsofik/XHMqZWxzZVxiKS8sIC9eKD86XHtceyh+KT9ceykvLCAvXig/Olx7XHsofik/JikvLCAvXig/Olx7XHsofik/IS0tKS8sIC9eKD86XHtceyh+KT8hW1xzXFNdKj9cfVx9KS8sIC9eKD86XHtceyh+KT9cKj8pLywgL14oPzo9KS8sIC9eKD86XC5cLikvLCAvXig/OlwuKD89KFs9fn1cc1wvLil8XSkpKS8sIC9eKD86W1wvLl0pLywgL14oPzpccyspLywgL14oPzpcfSh+KT9cfVx9KS8sIC9eKD86KH4pP1x9XH0pLywgL14oPzoiKFxcWyJdfFteIl0pKiIpLywgL14oPzonKFxcWyddfFteJ10pKicpLywgL14oPzpAKS8sIC9eKD86dHJ1ZSg/PShbfn1ccyldKSkpLywgL14oPzpmYWxzZSg/PShbfn1ccyldKSkpLywgL14oPzp1bmRlZmluZWQoPz0oW359XHMpXSkpKS8sIC9eKD86bnVsbCg/PShbfn1ccyldKSkpLywgL14oPzotP1swLTldKyg/OlwuWzAtOV0rKT8oPz0oW359XHMpXSkpKS8sIC9eKD86YXNccytcfCkvLCAvXig/Olx8KS8sIC9eKD86KFteXHMhIiMlLSxcLlwvOy0+QFxbLVxeYFx7LX5dKyg/PShbPX59XHNcLy4pfF0pKSkpLywgL14oPzpcWyhcXFxdfFteXF1dKSpcXSkvLCAvXig/Oi4pLywgL14oPzokKS9dOwoJCSAgICAgICAgbGV4ZXIuY29uZGl0aW9ucyA9IHsgIm11IjogeyAicnVsZXMiOiBbNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0XSwgImluY2x1c2l2ZSI6IGZhbHNlIH0sICJlbXUiOiB7ICJydWxlcyI6IFsyXSwgImluY2x1c2l2ZSI6IGZhbHNlIH0sICJjb20iOiB7ICJydWxlcyI6IFs2XSwgImluY2x1c2l2ZSI6IGZhbHNlIH0sICJyYXciOiB7ICJydWxlcyI6IFszLCA0LCA1XSwgImluY2x1c2l2ZSI6IGZhbHNlIH0sICJJTklUSUFMIjogeyAicnVsZXMiOiBbMCwgMSwgNDRdLCAiaW5jbHVzaXZlIjogdHJ1ZSB9IH07CgkJICAgICAgICByZXR1cm4gbGV4ZXI7CgkJICAgIH0pKCk7CgkJICAgIHBhcnNlci5sZXhlciA9IGxleGVyOwoJCSAgICBmdW5jdGlvbiBQYXJzZXIoKSB7CgkJICAgICAgICB0aGlzLnl5ID0ge307CgkJICAgIH1QYXJzZXIucHJvdG90eXBlID0gcGFyc2VyO3BhcnNlci5QYXJzZXIgPSBQYXJzZXI7CgkJICAgIHJldHVybiBuZXcgUGFyc2VyKCk7CgkJfSkoKTtleHBvcnRzWyJkZWZhdWx0Il0gPSBoYW5kbGViYXJzOwoJCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1siZGVmYXVsdCJdOwoKCS8qKiovIH0pLAoJLyogMzggKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkJJ3VzZSBzdHJpY3QnOwoKCQl2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oMSlbJ2RlZmF1bHQnXTsKCgkJZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCgkJdmFyIF92aXNpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7CgoJCXZhciBfdmlzaXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92aXNpdG9yKTsKCgkJZnVuY3Rpb24gV2hpdGVzcGFjZUNvbnRyb2woKSB7CgkJICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdOwoKCQkgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CgkJfQoJCVdoaXRlc3BhY2VDb250cm9sLnByb3RvdHlwZSA9IG5ldyBfdmlzaXRvcjJbJ2RlZmF1bHQnXSgpOwoKCQlXaGl0ZXNwYWNlQ29udHJvbC5wcm90b3R5cGUuUHJvZ3JhbSA9IGZ1bmN0aW9uIChwcm9ncmFtKSB7CgkJICB2YXIgZG9TdGFuZGFsb25lID0gIXRoaXMub3B0aW9ucy5pZ25vcmVTdGFuZGFsb25lOwoKCQkgIHZhciBpc1Jvb3QgPSAhdGhpcy5pc1Jvb3RTZWVuOwoJCSAgdGhpcy5pc1Jvb3RTZWVuID0gdHJ1ZTsKCgkJICB2YXIgYm9keSA9IHByb2dyYW0uYm9keTsKCQkgIGZvciAodmFyIGkgPSAwLCBsID0gYm9keS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkgICAgdmFyIGN1cnJlbnQgPSBib2R5W2ldLAoJCSAgICAgICAgc3RyaXAgPSB0aGlzLmFjY2VwdChjdXJyZW50KTsKCgkJICAgIGlmICghc3RyaXApIHsKCQkgICAgICBjb250aW51ZTsKCQkgICAgfQoKCQkgICAgdmFyIF9pc1ByZXZXaGl0ZXNwYWNlID0gaXNQcmV2V2hpdGVzcGFjZShib2R5LCBpLCBpc1Jvb3QpLAoJCSAgICAgICAgX2lzTmV4dFdoaXRlc3BhY2UgPSBpc05leHRXaGl0ZXNwYWNlKGJvZHksIGksIGlzUm9vdCksCgkJICAgICAgICBvcGVuU3RhbmRhbG9uZSA9IHN0cmlwLm9wZW5TdGFuZGFsb25lICYmIF9pc1ByZXZXaGl0ZXNwYWNlLAoJCSAgICAgICAgY2xvc2VTdGFuZGFsb25lID0gc3RyaXAuY2xvc2VTdGFuZGFsb25lICYmIF9pc05leHRXaGl0ZXNwYWNlLAoJCSAgICAgICAgaW5saW5lU3RhbmRhbA==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("CQkgIGZvciAodmFyIGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkJICAgIHZhciBwYXJ0ID0gcGFydHNbaV0ucGFydCwKCgkJICAgIC8vIElmIHdlIGhhdmUgW10gc3ludGF4IHRoZW4gd2UgZG8gbm90IHRyZWF0IHBhdGggcmVmZXJlbmNlcyBhcyBvcGVyYXRvcnMsCgkJICAgIC8vIGkuZS4gZm9vLlt0aGlzXSByZXNvbHZlcyB0byBhcHByb3hpbWF0ZWx5IGNvbnRleHQuZm9vWyd0aGlzJ10KCQkgICAgaXNMaXRlcmFsID0gcGFydHNbaV0ub3JpZ2luYWwgIT09IHBhcnQ7CgkJICAgIG9yaWdpbmFsICs9IChwYXJ0c1tpXS5zZXBhcmF0b3IgfHwgJycpICsgcGFydDsKCgkJICAgIGlmICghaXNMaXRlcmFsICYmIChwYXJ0ID09PSAnLi4nIHx8IHBhcnQgPT09ICcuJyB8fCBwYXJ0ID09PSAndGhpcycpKSB7CgkJICAgICAgaWYgKGRpZy5sZW5ndGggPiAwKSB7CgkJICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnSW52YWxpZCBwYXRoOiAnICsgb3JpZ2luYWwsIHsgbG9jOiBsb2MgfSk7CgkJICAgICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7CgkJICAgICAgICBkZXB0aCsrOwoJCSAgICAgICAgZGVwdGhTdHJpbmcgKz0gJy4uLyc7CgkJICAgICAgfQoJCSAgICB9IGVsc2UgewoJCSAgICAgIGRpZy5wdXNoKHBhcnQpOwoJCSAgICB9CgkJICB9CgoJCSAgcmV0dXJuIHsKCQkgICAgdHlwZTogJ1BhdGhFeHByZXNzaW9uJywKCQkgICAgZGF0YTogZGF0YSwKCQkgICAgZGVwdGg6IGRlcHRoLAoJCSAgICBwYXJ0czogZGlnLAoJCSAgICBvcmlnaW5hbDogb3JpZ2luYWwsCgkJICAgIGxvYzogbG9jCgkJICB9OwoJCX0KCgkJZnVuY3Rpb24gcHJlcGFyZU11c3RhY2hlKHBhdGgsIHBhcmFtcywgaGFzaCwgb3Blbiwgc3RyaXAsIGxvY0luZm8pIHsKCQkgIC8vIE11c3QgdXNlIGNoYXJBdCB0byBzdXBwb3J0IElFIHByZS0xMAoJCSAgdmFyIGVzY2FwZUZsYWcgPSBvcGVuLmNoYXJBdCgzKSB8fCBvcGVuLmNoYXJBdCgyKSwKCQkgICAgICBlc2NhcGVkID0gZXNjYXBlRmxhZyAhPT0gJ3snICYmIGVzY2FwZUZsYWcgIT09ICcmJzsKCgkJICB2YXIgZGVjb3JhdG9yID0gL1wqLy50ZXN0KG9wZW4pOwoJCSAgcmV0dXJuIHsKCQkgICAgdHlwZTogZGVjb3JhdG9yID8gJ0RlY29yYXRvcicgOiAnTXVzdGFjaGVTdGF0ZW1lbnQnLAoJCSAgICBwYXRoOiBwYXRoLAoJCSAgICBwYXJhbXM6IHBhcmFtcywKCQkgICAgaGFzaDogaGFzaCwKCQkgICAgZXNjYXBlZDogZXNjYXBlZCwKCQkgICAgc3RyaXA6IHN0cmlwLAoJCSAgICBsb2M6IHRoaXMubG9jSW5mbyhsb2NJbmZvKQoJCSAgfTsKCQl9CgoJCWZ1bmN0aW9uIHByZXBhcmVSYXdCbG9jayhvcGVuUmF3QmxvY2ssIGNvbnRlbnRzLCBjbG9zZSwgbG9jSW5mbykgewoJCSAgdmFsaWRhdGVDbG9zZShvcGVuUmF3QmxvY2ssIGNsb3NlKTsKCgkJICBsb2NJbmZvID0gdGg=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIER9LCQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PT09RiYmJChILGUsbiksdih0KSxlPWIoZSwhMCksdihuKSxyKGosZSk/KG4uZW51bWVyYWJsZT8ocih0LFApJiZ0W1BdW2VdJiYodFtQXVtlXT0hMSksbj1NKG4se2VudW1lcmFibGU6dygwLCExKX0pKToocih0LFApfHxBKHQsUCx3KDEse30pKSx0W1BdW2VdPSEwKSxCKHQsZSxuKSk6QSh0LGUsbil9LEc9ZnVuY3Rpb24odCxlKXt2KHQpO2Zvcih2YXIgbixpPV8oZT15KGUpKSxyPTAsbz1pLmxlbmd0aDtvPnI7KSQodCxuPWlbcisrXSxlW25dKTtyZXR1cm4gdH0sSz1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lP00odCk6RyhNKHQpLGUpfSxKPWZ1bmN0aW9uKHQpe3ZhciBlPUkuY2FsbCh0aGlzLHQ9Yih0LCEwKSk7cmV0dXJuISh0aGlzPT09RiYmcihqLHQpJiYhcihILHQpKSYmKCEoZXx8IXIodGhpcyx0KXx8IXIoaix0KXx8cih0aGlzLFApJiZ0aGlzW1BdW3RdKXx8ZSl9LFg9ZnVuY3Rpb24odCxlKXtpZih0PXkodCksZT1iKGUsITApLHQhPT1GfHwhcihqLGUpfHxyKEgsZSkpe3ZhciBuPXgodCxlKTtyZXR1cm4hbnx8IXIoaixlKXx8cih0LFApJiZ0W1BdW2VdfHwobi5lbnVtZXJhYmxlPSEwKSxufX0sUT1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj1FKHkodCkpLGk9W10sbz0wO24ubGVuZ3RoPm87KXIoaixlPW5bbysrXSl8fGU9PVB8fGU9PWx8fGkucHVzaChlKTtyZXR1cm4gaX0sWj1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj10PT09RixpPUUobj9IOnkodCkpLG89W10scz0wO2kubGVuZ3RoPnM7KSFyKGosZT1pW3MrK10pfHxuJiYhcihGLGUpfHxvLnB1c2goaltlXSk7cmV0dXJuIG99O3p8fChEPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIEQpdGhyb3cgVHlwZUVycm9yKCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhIik7dmFyIHQ9aChhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCksZT1mdW5jdGlvbihuKXt0aGlzPT09RiYmZS5jYWxsKEgsbikscih0aGlzLFApJiZyKHRoaXNbUF0sdCkmJih0aGlzW1BdW3RdPSExKSxCKHRoaXMsdCx3KDEsbikpfTtyZXR1cm4gbyYmVyYmQihGLHQse2NvbmZpZ3VyYWJsZTohMCxzZXQ6ZX0pLFYodCl9LGEoRFtPXSwidG9TdHJpbmciLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSxULmY9WCxrLmY9JCxuKDQ5KS5mPVMuZj1RLG4oNDMpLmY9SixuKDQyKS5mPVosbyYmIW4oMjgpJiZhKEYsInByb3BlcnR5SXNFbnVtZXJhYmxlIixKLCEwKSxmLmY9ZnVuY3Rpb24odCl7cmV0dXJuIFYocCh0KSl9KSxzKHMuRytzLlcrcy5GKiF6LHtTeW1ib2w6RH0pO2Zvcih2YXIgdHQ9Imhhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzIi5zcGxpdCgiLCIpLGV0PTA7dHQubGVuZ3RoPmV0OylwKHR0W2V0KytdKTtmb3IodmFyIG50PUwocC5zdG9yZSksaXQ9MDtudC5sZW5ndGg+aXQ7KW0obnRbaXQrK10pO3Mocy5TK3MuRioheiwiU3ltYm9sIix7ImZvciI6ZnVuY3Rpb24odCl7cmV0dXJuIHIoUix0Kz0iIik/Ult0XTpSW3RdPUQodCl9LGtleUZvcjpmdW5jdGlvbih0KXtpZighcSh0KSl0aHJvdyBUeXBlRXJyb3IodCsiIGlzIG5vdCBhIHN5bWJvbCEiKTtmb3IodmFyIGUgaW4gUilpZihSW2VdPT09dClyZXR1cm4gZX0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7Vz0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7Vz0hMX19KSxzKHMuUytzLkYqIXosIk9iamVjdCIse2NyZWF0ZTpLLGRlZmluZVByb3BlcnR5OiQsZGVmaW5lUHJvcGVydGllczpHLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpYLGdldE93blByb3BlcnR5TmFtZXM6USxnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6Wn0pLEMmJnMocy5TK3MuRiooIXp8fGMoZnVuY3Rpb24oKXt2YXIgdD1EKCk7cmV0dXJuIltudWxsXSIhPVkoW3RdKXx8Int9IiE9WSh7YTp0fSl8fCJ7fSIhPVkoT2JqZWN0KHQpKX0pKSwiSlNPTiIse3N0cmluZ2lmeTpmdW5jdGlvbih0KXtpZih2b2lkIDAhPT10JiYhcSh0KSl7Zm9yKHZhciBlLG4saT1bdF0scj0xO2FyZ3VtZW50cy5sZW5ndGg+cjspaS5wdXNoKGFyZ3VtZW50c1tyKytdKTtyZXR1cm4gZT1pWzFdLCJmdW5jdGlvbiI9PXR5cGVvZiBlJiYobj1lKSwhbiYmZyhlKXx8KGU9ZnVuY3Rpb24odCxlKXtpZihuJiYoZT1uLmNhbGwodGhpcyx0LGUpKSwhcShlKSlyZXR1cm4gZX0pLGlbMV09ZSxZLmFwcGx5KEMsaSl9fX0pLERbT11bTl18fG4oMTApKERbT10sTixEW09dLnZhbHVlT2YpLGQoRCwiU3ltYm9sIiksZChNYXRoLCJNYXRoIiwhMCksZChpLkpTT04sIkpTT04iLCEwKX0sZnVuY3Rpb24odCxlKXt2YXIgbj10LmV4cG9ydHM9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCk7Im51bWJlciI9PXR5cGVvZiBfX2cmJihfX2c9bil9LGZ1bmN0aW9uKHQsZSl7dmFyIG49e30uaGFzT3duUHJvcGVydHk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4uY2FsbCh0LGUpfX0sZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz0hbig3KShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4hIXQoKX1jYXRjaChlKXtyZXR1cm4hMH19fSxmdW5jdGlvbih0LGUsbil7dmFyIGk9big0KSxyPW4oOSksbz1uKDEwKSxzPW4oMTgpLA==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("ZSxuKXt2YXIgaT1uKDgpO2koaS5TLCJSZWZsZWN0Iix7aGFzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUgaW4gdH19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oOCkscj1uKDEyKSxvPU9iamVjdC5pc0V4dGVuc2libGU7aShpLlMsIlJlZmxlY3QiLHtpc0V4dGVuc2libGU6ZnVuY3Rpb24odCl7cmV0dXJuIHIodCksIW98fG8odCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDgpO2koaS5TLCJSZWZsZWN0Iix7b3duS2V5czpuKDI0OSl9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oNDkpLHI9big0Miksbz1uKDEyKSxzPW4oNCkuUmVmbGVjdDt0LmV4cG9ydHM9cyYmcy5vd25LZXlzfHxmdW5jdGlvbih0KXt2YXIgZT1pLmYobyh0KSksbj1yLmY7cmV0dXJuIG4/ZS5jb25jYXQobih0KSk6ZX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDgpLHI9bigxMiksbz1PYmplY3QucHJldmVudEV4dGVuc2lvbnM7aShpLlMsIlJlZmxlY3QiLHtwcmV2ZW50RXh0ZW5zaW9uczpmdW5jdGlvbih0KXtyKHQpO3RyeXtyZXR1cm4gbyYmbyh0KSwhMH1jYXRjaChlKXtyZXR1cm4hMX19fSl9LGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQsZSxuKXt2YXIgbCxoLHA9YXJndW1lbnRzLmxlbmd0aDw0P3Q6YXJndW1lbnRzWzNdLGY9by5mKHUodCksZSk7aWYoIWYpe2lmKGQoaD1zKHQpKSlyZXR1cm4gaShoLGUsbixwKTtmPWMoMCl9cmV0dXJuIGEoZiwidmFsdWUiKT8hKGYud3JpdGFibGU9PT0hMXx8IWQocCkpJiYobD1vLmYocCxlKXx8YygwKSxsLnZhbHVlPW4sci5mKHAsZSxsKSwhMCk6dm9pZCAwIT09Zi5zZXQmJihmLnNldC5jYWxsKHAsbiksITApfXZhciByPW4oMTEpLG89big1MCkscz1uKDU4KSxhPW4oNSksbD1uKDgpLGM9bigxNyksdT1uKDEyKSxkPW4oMTMpO2wobC5TLCJSZWZsZWN0Iix7c2V0Oml9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oOCkscj1uKDcyKTtyJiZpKGkuUywiUmVmbGVjdCIse3NldFByb3RvdHlwZU9mOmZ1bmN0aW9uKHQsZSl7ci5jaGVjayh0LGUpO3RyeXtyZXR1cm4gci5zZXQodCxlKSwhMH1jYXRjaChuKXtyZXR1cm4hMX19fSl9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIGk9big4KSxyPW4oMzYpKCEwKTtpKGkuUCwiQXJyYXkiLHtpbmNsdWRlczpmdW5jdGlvbih0KXtyZXR1cm4gcih0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pLG4oMTg3KSgiaW5jbHVkZXMiKX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgaT1uKDgpLHI9bigyNTUpLG89big1Nykscz1uKDM3KSxhPW4oMjEpLGw9bigxNzQpO2koaS5QLCJBcnJheSIse2ZsYXRNYXA6ZnVuY3Rpb24odCl7dmFyIGUsbixpPW8odGhpcyk7cmV0dXJuIGEodCksZT1zKGkubGVuZ3RoKSxuPWwoaSwwKSxyKG4saSxpLGUsMCwxLHQsYXJndW1lbnRzWzFdKSxufX0pLG4oMTg3KSgiZmxhdE1hcCIpfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGkodCxlLG4sYyx1LGQsaCxwKXtmb3IodmFyIGYsbSxfPXUsZz0wLHY9ISFoJiZhKGgscCwzKTtnPGM7KXtpZihnIGluIG4pe2lmKGY9dj92KG5bZ10sZyxlKTpuW2ddLG09ITEsbyhmKSYmKG09ZltsXSxtPXZvaWQgMCE9PW0/ISFtOnIoZikpLG0mJmQ+MClfPWkodCxlLGYscyhmLmxlbmd0aCksXyxkLTEpLTE7ZWxzZXtpZihfPj05MDA3MTk5MjU0NzQwOTkxKXRocm93IFR5cGVFcnJvcigpO3RbX109Zn1fKyt9ZysrfXJldHVybiBffXZhciByPW4oNDQpLG89bigxMykscz1uKDM3KSxhPW4oMjApLGw9bigyNSkoImlzQ29uY2F0U3ByZWFkYWJsZSIpO3QuZXhwb3J0cz1pfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciBpPW4oOCkscj1uKDI1NSksbz1uKDU3KSxzPW4oMzcpLGE9bigzOCksbD1uKDE3NCk7aShpLlAsIkFycmF5Iix7ZmxhdHRlbjpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50c1swXSxlPW8odGhpcyksbj1zKGUubGVuZ3RoKSxpPWwoZSwwKTtyZXR1cm4gcihpLGUsZSxuLDAsdm9pZCAwPT09dD8xOmEodCkpLGl9fSksbigxODcpKCJmbGF0dGVuIil9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIGk9big4KSxyPW4oMTI3KSghMCk7aShpLlAsIlN0cmluZyIse2F0OmZ1bmN0aW9uKHQpe3JldHVybiByKHRoaXMsdCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIGk9big4KSxyPW4oMjU5KTtpKGkuUCwiU3RyaW5nIix7cGFkU3RhcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHIodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLCEwKX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMzcpLHI9big5MCksbz1uKDM1KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4scyl7dmFyIGE9U3RyaW5nKG8odCkpLGw9YS5sZW5ndGgsYz12b2lkIDA9PT1uPyIgIjpTdHJpbmcobiksdT1pKGUpO2lmKHU8PWx8fCIiPT1jKXJldHVybiBhO3ZhciBkPXUtbCxoPXIuY2FsbChjLE1hdGguY2VpbChkL2MubGVuZ3RoKSk7cmV0dXJuIGgubGVuZ3RoPmQmJihoPWguc2xpY2UoMCxkKSkscz9oK2E6YStofX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgaT1uKDgpLHI9bigyNTkpO2koaS5QLCJTdHJpbmciLHtwYWRFbmQ6ZnVuY3Rpb24odCl7cmV0dXJuIHIodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLCExKX19KX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtuKDgyKSgidHJpbUxlZnQiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsMSl9fSwidHJpbVN0YXJ0Iil9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7big4MikoInRyaW1SaWdodCIsZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcywyKX19LCJ0cmltRW5kIil9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIGk9big4KSxyPW4oMzUpLG89bigzNykscz1uKDEzNCksYT1uKDE5NyksbD1SZWdFeHAucHJvdG90eXBlLGM9ZnVuY3Rpb24odCxlKXt0aGlzLl9yPXQsdGhpcy5fcz1lfTtuKDEzMCkoYywiUmVnRXhwIFN0cmluZyIsZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9yLmV4ZWModGhpcy5fcyk7cmV0dXJue3ZhbHVlOnQsZG9uZTpudWxsPT09dH19KSxpKGkuUCwiU3RyaW5nIix7bWF0Y2hBbGw6ZnVuY3Rpb24odCl7aWYocih0aGlzKSwhcyh0KSl0aHJvdyBUeXBlRXJyb3IodCsiIGlzIG5vdCBhIHJlZ2V4cCEiKTt2YXIgZT1TdHJpbmcodGhpcyksbj0iZmxhZ3MiaW4gbD9TdHJpbmcodC5mbGFncyk6YS5jYWxsKHQpLGk9bmV3IFJlZ0V4cCh0LnNvdXJjZSx+bi5pbmRleE9mKCJnIik/bjoiZyIrbik7cmV0dXJuIGkubGFzdEluZGV4PW8odC5sYXN0SW5kZXgpLG5ldyBjKGksZSl9fSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDI3KSgiYXN5bmNJdGVyYXRvciIpfSxmdW5jdGlvbih0LGUsbil7bigyNykoIm9ic2VydmFibGUiKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oOCkscj1uKDI0OSksbz1uKDMyKSxzPW4oNTApLGE9bigxNjQpO2koaS5TLCJPYmplY3QiLHtnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuLGk9byh0KSxsPXMuZixjPXIoaSksdT17fSxkPTA7Yy5sZW5ndGg+ZDspbj1sKGksZT1jW2QrK10pLHZvaWQgMCE9PW4mJmEodSxlLG4pO3JldHVybiB1fX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9big4KSxyPW4oMjY4KSghMSk7aShpLlMsIk9iamVjdCIse3ZhbHVlczpmdW5jdGlvbih0KXtyZXR1cm4gcih0KX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMzApLHI9bigzMiksbz1uKDQzKS5mO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciBuLHM9cihlKSxhPWkocyksbD1hLmxlbmd0aCxjPTAsdT1bXTtsPmM7KW8uY2FsbChzLG49YVtjKytdKSYmdS5wdXNoKHQ/W24sc1tuXV06c1tuXSk7cmV0dXJuIHV9fX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oOCkscj1uKDI2OCkoITApO2koaS5TLCJPYmplY3QiLHtlbnRyaWVzOmZ1bmN0aW9uKHQpe3JldHVybiByKHQpfX0pfSxmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO3ZhciBpPW4oOCkscj1uKDU3KSxvPW4oMjEpLHM9bigxMSk7big2KSYmaShpLlArbigyNzEpLCJPYmplY3QiLHtfX2RlZmluZUdldHRlcl9fOmZ1bmN0aW9uKHQsZSl7cy5mKHIodGhpcyksdCx7Z2V0Om8oZSksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX19KX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt0LmV4cG9ydHM9bigyOCl8fCFuKDcpKGZ1bmN0aW9uKCl7dmFyIHQ9TWF0aC5yYW5kb20oKTtfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCx0LGZ1bmN0aW9uKCl7fSksZGVsZXRlIG4oNClbdF19KX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgaT1uKDgpLHI9big1Nyksbz1uKDIxKSxzPW4oMTEpO24oNikmJmkoaS5QK24oMjcxKSwiT2JqZWN0Iix7X19kZWZpbmVTZXR0ZXJfXzpmdW5jdGlvbih0LGUpe3MuZihyKHRoaXMpLHQse3NldDpvKGUpLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9fSl9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIGk9big4KSxyPW4oNTcpLG89bigxNikscz1uKDU4KSxhPW4oNTApLmY7big2KSYmaShpLlArbigyNzEpLCJPYmplY3QiLHtfX2xvb2t1cEdldHRlcl9fOmZ1bmN0aW9uKHQpe3ZhciBlLG49cih0aGlzKSxpPW8odCwhMCk7ZG8gaWYoZT1hKG4saSkpcmV0dXJuIGUuZ2V0O3doaWxlKG49cyhuKSl9fSl9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIGk9big4KSxyPW4oNTcpLG89bigxNikscz1uKDU4KSxhPW4oNTApLmY7big2KSYmaShpLlArbigyNzEpLCJPYmplY3QiLHtfX2xvb2t1cFNldHRlcl9fOmZ1bmN0aW9uKHQpe3ZhciBlLG49cih0aGlzKSxpPW8odCwhMCk7ZG8gaWYoZT1hKG4saSkpcmV0dXJuIGUuc2V0O3doaWxlKG49cyhuKSl9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDgpO2koaS5QK2kuUiwiTWFwIix7dG9KU09OOm4oMjc2KSgiTWFwIil9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oNzQpLHI9bigyNzcpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtpZihpKHRoaXMpIT10KXRocm93IFR5cGVFcnJvcih0KyIjdG9KU09OIGlzbid0IGdlbmVyaWMiKTtyZXR1cm4gcih0aGlzKX19fSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigyMDcpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuPVtdO3JldHVybiBpKHQsITEsbi5wdXNoLG4sZSksbn19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDgpO2koaS5QK2kuUiwiU2V0Iix7dG9KU09OOm4oMjc2KSgiU2V0Iil9KX0sZnVuY3Rpb24odCxlLG4pe24oMjgwKSgiTWFwIil9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7dmFyIGk9big4KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aShpLlMsdCx7b2Y6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxlPUFycmF5KHQpO3QtLTspZVt0XT1hcmd1bWVudHNbdF07cmV0dXJuIG5ldyB0aGlzKGUpfX0pfX0sZnVuY3Rpb24odCxlLG4pe24oMjgwKSgiU2V0Iil9LGZ1bmN0aW9uKHQsZSxuKXtuKDI4MCkoIldlYWtNYXAiKX0sZnVuY3Rpb24odCxlLG4pe24oMjgwKSgiV2Vha1NldCIpfSxmdW5jdGlvbih0LGUsbil7bigyODUpKCJNYXAiKX0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0Ijt2YXIgaT1uKDgpLHI9bigyMSksbz1uKDIwKSxzPW4oMjA3KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aShpLlMsdCx7ZnJvbTo=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("ciBpLHIsbz0xLzAscz0xLzA7aWYobnVsbD09ZSYmbnVsbCE9dCl7dD1EKHQpP3Q6TS52YWx1ZXModCk7Zm9yKHZhciBhPTAsbD10Lmxlbmd0aDthPGw7YSsrKWk9dFthXSxpPG8mJihvPWkpfWVsc2UgZT1UKGUsbiksTS5lYWNoKHQsZnVuY3Rpb24odCxuLGkpe3I9ZSh0LG4saSksKHI8c3x8cj09PTEvMCYmbz09PTEvMCkmJihvPXQscz1yKX0pO3JldHVybiBvfSxNLnNodWZmbGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49RCh0KT90Ok0udmFsdWVzKHQpLGk9bi5sZW5ndGgscj1BcnJheShpKSxvPTA7bzxpO28rKyllPU0ucmFuZG9tKDAsbyksZSE9PW8mJihyW29dPXJbZV0pLHJbZV09bltvXTtyZXR1cm4gcn0sTS5zYW1wbGU9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBudWxsPT1lfHxuPyhEKHQpfHwodD1NLnZhbHVlcyh0KSksdFtNLnJhbmRvbSh0Lmxlbmd0aC0xKV0pOk0uc2h1ZmZsZSh0KS5zbGljZSgwLE1hdGgubWF4KDAsZSkpfSxNLnNvcnRCeT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGU9VChlLG4pLE0ucGx1Y2soTS5tYXAodCxmdW5jdGlvbih0LG4saSl7cmV0dXJue3ZhbHVlOnQsaW5kZXg6bixjcml0ZXJpYTplKHQsbixpKX19KS5zb3J0KGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5jcml0ZXJpYSxpPWUuY3JpdGVyaWE7aWYobiE9PWkpe2lmKG4+aXx8dm9pZCAwPT09bilyZXR1cm4gMTtpZihuPGl8fHZvaWQgMD09PWkpcmV0dXJuLTF9cmV0dXJuIHQuaW5kZXgtZS5pbmRleH0pLCJ2YWx1ZSIpfTt2YXIgQz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLGkpe3ZhciByPXt9O3JldHVybiBuPVQobixpKSxNLmVhY2goZSxmdW5jdGlvbihpLG8pe3ZhciBzPW4oaSxvLGUpO3QocixpLHMpfSkscn19O00uZ3JvdXBCeT1DKGZ1bmN0aW9uKHQsZSxuKXtNLmhhcyh0LG4pP3Rbbl0ucHVzaChlKTp0W25dPVtlXX0pLE0uaW5kZXhCeT1DKGZ1bmN0aW9uKHQsZSxuKXt0W25dPWV9KSxNLmNvdW50Qnk9QyhmdW5jdGlvbih0LGUsbil7TS5oYXModCxuKT90W25dKys6dFtuXT0xfSksTS50b0FycmF5PWZ1bmN0aW9uKHQpe3JldHVybiB0P00uaXNBcnJheSh0KT9mLmNhbGwodCk6RCh0KT9NLm1hcCh0LE0uaWRlbnRpdHkpOk0udmFsdWVzKHQpOltdfSxNLnNpemU9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXQ/MDpEKHQpP3QubGVuZ3RoOk0ua2V5cyh0KS5sZW5ndGh9LE0ucGFydGl0aW9uPWZ1bmN0aW9uKHQsZSxuKXtlPVQoZSxuKTt2YXIgaT1bXSxyPVtdO3JldHVybiBNLmVhY2godCxmdW5jdGlvbih0LG4sbyl7KGUodCxuLG8pP2k6cikucHVzaCh0KX0pLFtpLHJdfSxNLmZpcnN0PU0uaGVhZD1NLnRha2U9ZnVuY3Rpb24odCxlLG4pe2lmKG51bGwhPXQpcmV0dXJuIG51bGw9PWV8fG4/dFswXTpNLmluaXRpYWwodCx0Lmxlbmd0aC1lKX0sTS5pbml0aWFsPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZi5jYWxsKHQsMCxNYXRoLm1heCgwLHQubGVuZ3RoLShudWxsPT1lfHxuPzE6ZSkpKX0sTS5sYXN0PWZ1bmN0aW9uKHQsZSxuKXtpZihudWxsIT10KXJldHVybiBudWxsPT1lfHxuP3RbdC5sZW5ndGgtMV06TS5yZXN0KHQsTWF0aC5tYXgoMCx0Lmxlbmd0aC1lKSl9LE0ucmVzdD1NLnRhaWw9TS5kcm9wPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZi5jYWxsKHQsbnVsbD09ZXx8bj8xOmUpfSxNLmNvbXBhY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIE0uZmlsdGVyKHQsTS5pZGVudGl0eSl9O3ZhciBZPWZ1bmN0aW9uKHQsZSxuLGkpe2Zvcih2YXIgcj1bXSxvPTAscz1pfHwwLGE9RSh0KTtzPGE7cysrKXt2YXIgbD10W3NdO2lmKEQobCkmJihNLmlzQXJyYXkobCl8fE0uaXNBcmd1bWVudHMobCkpKXtlfHwobD1Z", "base64"));
  res.write(new Buffer("KGwsZSxuKSk7dmFyIGM9MCx1PWwubGVuZ3RoO2ZvcihyLmxlbmd0aCs9dTtjPHU7KXJbbysrXT1sW2MrK119ZWxzZSBufHwocltvKytdPWwpfXJldHVybiByfTtNLmZsYXR0ZW49ZnVuY3Rpb24odCxlKXtyZXR1cm4gWSh0LGUsITEpfSxNLndpdGhvdXQ9ZnVuY3Rpb24odCl7cmV0dXJuIE0uZGlmZmVyZW5jZSh0LGYuY2FsbChhcmd1bWVudHMsMSkpfSxNLnVuaXE9TS51bmlxdWU9ZnVuY3Rpb24odCxlLG4saSl7TS5pc0Jvb2xlYW4oZSl8fChpPW4sbj1lLGU9ITEpLG51bGwhPW4mJihuPVQobixpKSk7Zm9yKHZhciByPVtdLG89W10scz0wLGE9RSh0KTtzPGE7cysrKXt2YXIgbD10W3NdLGM9bj9uKGwscyx0KTpsO2U/KHMmJm89PT1jfHxyLnB1c2gobCksbz1jKTpuP00uY29udGFpbnMobyxjKXx8KG8ucHVzaChjKSxyLnB1c2gobCkpOk0uY29udGFpbnMocixsKXx8ci5wdXNoKGwpfXJldHVybiByfSxNLnVuaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIE0udW5pcShZKGFyZ3VtZW50cywhMCwhMCkpfSxNLmludGVyc2VjdGlvbj1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj1hcmd1bWVudHMubGVuZ3RoLGk9MCxyPUUodCk7aTxyO2krKyl7dmFyIG89dFtpXTtpZighTS5jb250YWlucyhlLG8pKXtmb3IodmFyIHM9MTtzPG4mJk0uY29udGFpbnMoYXJndW1lbnRzW3NdLG8pO3MrKyk7cz09PW4mJmUucHVzaChvKX19cmV0dXJuIGV9LE0uZGlmZmVyZW5jZT1mdW5jdGlvbih0KXt2YXIgZT1ZKGFyZ3VtZW50cywhMCwhMCwxKTtyZXR1cm4gTS5maWx0ZXIodCxmdW5jdGlvbih0KXtyZXR1cm4hTS5jb250YWlucyhlLHQpfSl9LE0uemlwPWZ1bmN0aW9uKCl7cmV0dXJuIE0udW56aXAoYXJndW1lbnRzKX0sTS51bnppcD1mdW5jdGlvbih0KXtmb3IodmFyIGU9dCYmTS5tYXgodCxFKS5sZW5ndGh8fDAsbj1BcnJheShlKSxpPTA7aTxlO2krKyluW2ldPU0ucGx1Y2sodCxpKTtyZXR1cm4gbn0sTS5vYmplY3Q9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49e30saT0wLHI9RSh0KTtpPHI7aSsrKWU/blt0W2ldXT1lW2ldOm5bdFtpXVswXV09dFtpXVsxXTtyZXR1cm4gbn0sTS5maW5kSW5kZXg9bygxKSxNLmZpbmRMYXN0SW5kZXg9bygtMSksTS5zb3J0ZWRJbmRleD1mdW5jdGlvbih0LGUsbixpKXtuPVQobixpLDEpO2Zvcih2YXIgcj1uKGUpLG89MCxzPUUodCk7bzxzOyl7dmFyIGE9TWF0aC5mbG9vcigobytzKS8yKTtuKHRbYV0pPHI/bz1hKzE6cz1hfXJldHVybiBvfSxNLmluZGV4T2Y9cygxLE0uZmluZEluZGV4LE0uc29ydGVkSW5kZXgpLE0ubGFzdEluZGV4T2Y9cygtMSxNLmZpbmRMYXN0SW5kZXgpLE0ucmFuZ2U9ZnVuY3Rpb24odCxlLG4pe251bGw9PWUmJihlPXR8fDAsdD0wKSxuPW58fDE7Zm9yKHZhciBpPU1hdGgubWF4KE1hdGguY2VpbCgoZS10KS9uKSwwKSxyPUFycmF5KGkpLG89MDtvPGk7bysrLHQrPW4pcltvXT10O3JldHVybiByfTt2YXIgTz1mdW5jdGlvbih0LGUsbixpLHIpe2lmKCEoaSBpbnN0YW5jZW9mIGUpKXJldHVybiB0LmFwcGx5KG4scik7dmFyIG89TCh0LnByb3RvdHlwZSkscz10LmFwcGx5KG8scik7cmV0dXJuIE0uaXNPYmplY3Qocyk/czpvfTtNLmJpbmQ9ZnVuY3Rpb24odCxlKXtpZih5JiZ0LmJpbmQ9PT15KXJldHVybiB5LmFwcGx5KHQsZi5jYWxsKGFyZ3VtZW50cywxKSk7aWYoIU0uaXNGdW5jdGlvbih0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJCaW5kIG11c3QgYmUgY2FsbGVkIG9uIGEgZnVuY3Rpb24iKTt2YXIgbj1mLmNhbGwoYXJndW1lbnRzLDIpLGk9ZnVuY3Rpb24oKXtyZXR1cm4gTyh0LGksZSx0aGlzLG4uY29uY2F0KGYuY2FsbChhcmd1bWVudHMpKSl9O3JldHVybiBpfSxNLnBhcnRpYWw9ZnVuY3Rpb24odCl7dmFyIGU9Zi5jYWxsKGFyZ3VtZW50cywxKSxuPWZ1bmN0aW9uKCl7Zm9yKHZhciBpPTAscj1lLmxlbmd0aCxvPUFycmF5KHIpLHM9MDtzPHI7cysrKW9bc109ZVtzXT09PU0/YXJndW1lbnRzW2krK106ZVtzXTtmb3IoO2k8YXJndW1lbnRzLmxlbmd0aDspby5wdXNoKGFyZ3VtZW50c1tpKytdKTtyZXR1cm4gTyh0LG4sdGhpcyx0aGlzLG8pfTtyZXR1cm4gbn0sTS5iaW5kQWxsPWZ1bmN0aW9uKHQpe3ZhciBlLG4saT1hcmd1bWVudHMubGVuZ3RoO2lmKGk8PTEpdGhyb3cgbmV3IEVycm9yKCJiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzIik7Zm9yKGU9MTtlPGk7ZSsrKW49YXJndW1lbnRzW2VdLHRbbl09TS5iaW5kKHRbbl0sdCk7cmV0dXJuIHR9LE0ubWVtb2l6ZT1mdW5jdGlvbih0LGUpe3ZhciBuPWZ1bmN0aW9uKGkpe3ZhciByPW4uY2FjaGUsbz0iIisoZT9lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTppKTtyZXR1cm4gTS5oYXMocixvKXx8KHJbb109dC5hcHBseSh0aGlzLGFyZ3VtZW50cykpLHJbb119O3JldHVybiBuLmNhY2hlPXt9LG59LE0uZGVsYXk9ZnVuY3Rpb24odCxlKXt2YXIgbj1mLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkobnVsbCxuKX0sZSl9LE0uZGVmZXI9TS5wYXJ0aWFsKE0uZGVsYXksTSwxKSxNLnRocm90dGxlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyLG8scz1udWxsLGE9MDtufHwobj17fSk7dmFyIGw9ZnVuY3Rpb24oKXthPW4ubGVhZGluZz09PSExPzA6TS5ub3coKSxzPW51bGwsbz10LmFwcGx5KGksciksc3x8KGk9cj1udWxsKX07cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9TS5ub3coKTthfHxuLmxlYWRpbmchPT0hMXx8KGE9Yyk7dmFyIHU9ZS0oYy1hKTtyZXR1cm4gaT10aGlzLHI9YXJndW1lbnRzLHU8PTB8fHU+ZT8ocyYmKGNsZWFyVGltZW91dChzKSxzPW51bGwpLGE9YyxvPXQuYXBwbHkoaSxyKSxzfHwoaT1yPW51bGwpKTpzfHxuLnRyYWlsaW5nPT09ITF8fChzPXNldFRpbWVvdXQobCx1KSksb319LE0uZGVib3VuY2U9ZnVuY3Rpbw==", "base64"));
  res.write(new Buffer("bih0LGUsbil7dmFyIGkscixvLHMsYSxsPWZ1bmN0aW9uKCl7dmFyIGM9TS5ub3coKS1zO2M8ZSYmYz49MD9pPXNldFRpbWVvdXQobCxlLWMpOihpPW51bGwsbnx8KGE9dC5hcHBseShvLHIpLGl8fChvPXI9bnVsbCkpKX07cmV0dXJuIGZ1bmN0aW9uKCl7bz10aGlzLHI9YXJndW1lbnRzLHM9TS5ub3coKTt2YXIgYz1uJiYhaTtyZXR1cm4gaXx8KGk9c2V0VGltZW91dChsLGUpKSxjJiYoYT10LmFwcGx5KG8sciksbz1yPW51bGwpLGF9fSxNLndyYXA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTS5wYXJ0aWFsKGUsdCl9LE0ubmVnYXRlPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiF0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LE0uY29tcG9zZT1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cyxlPXQubGVuZ3RoLTE7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBuPWUsaT10W2VdLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtuLS07KWk9dFtuXS5jYWxsKHRoaXMsaSk7cmV0dXJuIGl9fSxNLmFmdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoLS10PDEpcmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0sTS5iZWZvcmU9ZnVuY3Rpb24odCxlKXt2YXIgbjtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4tLXQ+MCYmKG49ZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpLHQ8PTEmJihlPW51bGwpLG59fSxNLm9uY2U9TS5wYXJ0aWFsKE0uYmVmb3JlLDIpO3ZhciBQPSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoInRvU3RyaW5nIiksTj1bInZhbHVlT2YiLCJpc1Byb3RvdHlwZU9mIiwidG9TdHJpbmciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImhhc093blByb3BlcnR5IiwidG9Mb2NhbGVTdHJpbmciXTtNLmtleXM9ZnVuY3Rpb24odCl7aWYoIU0uaXNPYmplY3QodCkpcmV0dXJuW107aWYodilyZXR1cm4gdih0KTt2YXIgZT1bXTtmb3IodmFyIG4gaW4gdClNLmhhcyh0LG4pJiZlLnB1c2gobik7cmV0dXJuIFAmJmEodCxlKSxlfSxNLmFsbEtleXM9ZnVuY3Rpb24odCl7aWYoIU0uaXNPYmplY3QodCkpcmV0dXJuW107dmFyIGU9W107Zm9yKHZhciBuIGluIHQpZS5wdXNoKG4pO3JldHVybiBQJiZhKHQsZSksZX0sTS52YWx1ZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPU0ua2V5cyh0KSxuPWUubGVuZ3RoLGk9QXJyYXkobikscj0wO3I8bjtyKyspaVtyXT10W2Vbcl1dO3JldHVybiBpfSxNLm1hcE9iamVjdD1mdW5jdGlvbih0LGUsbil7ZT1UKGUsbik7Zm9yKHZhciBpLHI9TS5rZXlzKHQpLG89ci5sZW5ndGgscz17fSxhPTA7YTxvO2ErKylpPXJbYV0sc1tpXT1lKHRbaV0saSx0KTtyZXR1cm4gc30sTS5wYWlycz1mdW5jdGlvbih0KXtmb3IodmFyIGU9TS5rZXlzKHQpLG49ZS5sZW5ndGgsaT1BcnJheShuKSxyPTA7cjxuO3IrKylpW3JdPVtlW3JdLHRbZVtyXV1dO3JldHVybiBpfSxNLmludmVydD1mdW5jdGlvbih0KXtmb3IodmFyIGU9e30sbj1NLmtleXModCksaT0wLHI9bi5sZW5ndGg7aTxyO2krKyllW3RbbltpXV1dPW5baV07cmV0dXJuIGV9LE0uZnVuY3Rpb25zPU0ubWV0aG9kcz1mdW5jdGlvbih0KXt2YXIgZT1bXTtmb3IodmFyIG4gaW4gdClNLmlzRnVuY3Rpb24odFtuXSkmJmUucHVzaChuKTtyZXR1cm4gZS5zb3J0KCl9LE0uZXh0ZW5kPWsoTS5hbGxLZXlzKSxNLmV4dGVuZE93bj1NLmFzc2lnbj1rKE0ua2V5cyksTS5maW5kS2V5PWZ1bmN0aW9uKHQsZSxuKXtlPVQoZSxuKTtmb3IodmFyIGkscj1NLmtleXModCksbz0wLHM9ci5sZW5ndGg7bzxzO28rKylpZihpPXJbb10sZSh0W2ldLGksdCkpcmV0dXJuIGl9LE0ucGljaz1mdW5jdGlvbih0LGUsbil7dmFyIGkscixvPXt9LHM9dDtpZihudWxsPT1zKXJldHVybiBvO00uaXNGdW5jdGlvbihlKT8ocj1NLmFsbEtleXMocyksaT1TKGUsbikpOihyPVkoYXJndW1lbnRzLCExLCExLDEpLGk9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlIGluIG59LHM9T2JqZWN0KHMpKTtmb3IodmFyIGE9MCxsPXIubGVuZ3RoO2E8bDthKyspe3ZhciBjPXJbYV0sdT1zW2NdO2kodSxjLHMpJiYob1tjXT11KX1yZXR1cm4gb30sTS5vbWl0PWZ1bmN0aW9uKHQsZSxuKXtpZihNLmlzRnVuY3Rpb24oZSkpZT1NLm5lZ2F0ZShlKTtlbHNle3ZhciBpPU0ubWFwKFkoYXJndW1lbnRzLCExLCExLDEpLFN0cmluZyk7ZT1mdW5jdGlvbih0LGUpe3JldHVybiFNLmNvbnRhaW5zKGksZSl9fXJldHVybiBNLnBpY2sodCxlLG4pfSxNLmRlZmF1bHRzPWsoTS5hbGxLZXlzLCEwKSxNLmNyZWF0ZT1mdW5jdGlvbih0LGUpe3ZhciBuPUwodCk7cmV0dXJuIGUmJk0uZXh0ZW5kT3duKG4sZSksbn0sTS5jbG9uZT1mdW5jdGlvbih0KXtyZXR1cm4gTS5pc09iamVjdCh0KT9NLmlzQXJyYXkodCk/dC5zbGljZSgpOk0uZXh0ZW5kKHt9LHQpOnR9LE0udGFwPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUodCksdH0sTS5pc01hdGNoPWZ1bmN0aW9uKHQsZSl7dmFyIG49TS5rZXlzKGUpLGk9bi5sZW5ndGg7aWYobnVsbD09dClyZXR1cm4haTtmb3IodmFyIHI9T2JqZWN0KHQpLG89MDtvPGk7bysrKXt2YXIgcz1uW29dO2lmKGVbc10hPT1yW3NdfHwhKHMgaW4gcikpcmV0dXJuITF9cmV0dXJuITB9O3ZhciBJPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKHQ9PT1lKXJldHVybiAwIT09dHx8MS90PT09MS9lO2lmKG51bGw9PXR8fG51bGw9PWUpcmV0dXJuIHQ9PT1lO3QgaW5zdGFuY2VvZiBNJiYodD10Ll93cmFwcGVkKSxlIGluc3RhbmNlb2YgTSYmKGU9ZS5fd3JhcHBlZCk7dmFyIHI9bS5jYWxsKHQpO2lmKHIhPT1tLmNhbGwoZSkpcmV0dXJuITE7c3dpdGNoKHIpe2Nhc2UiW29iamVjdCBSZWdFeHBdIjpjYXNlIltvYmplY3QgU3RyaW5nXSI6cmV0dXJuIiIrdD09IiIrZTtjYXNlIltvYmplY3QgTnVtYmVyXSI6cmV0dXJuK3QhPT0rdD8rZSE9PStlOjA9PT0rdD8xLyt0PT09MS9lOit0PT09K2U7Y2FzZSJbb2JqZWN0IERhdGVdIjpjYXNlIltvYmplY3QgQm9vbGVhbl0iOnJldHVybit0PT09K2V9dmFyIG89IltvYmplY3QgQXJyYXldIj09PXI7aWYoIW8pe2lmKCJvYmplY3QiIT10eXBlb2YgdHx8Im9iamVjdCIhPXR5cGVvZiBlKXJldHVybiExO3ZhciBzPXQuY29uc3RydWN0b3IsYT1lLmNvbnN0cnVjdG9yO2lmKHMhPT1hJiYhKE0uaXNGdW5jdGlvbihzKSYmcyBpbnN0YW5jZW9mIHMmJk0uaXNGdW5jdGlvbihhKSYmYSBpbnN0YW5jZW9mIGEpJiYiY29uc3RydWN0b3IiaW4gdCYmImNvbnN0cnVjdG9yImluIGUpcmV0dXJuITF9bj1ufHxbXSxpPWl8fFtdO2Zvcih2YXIgbD1uLmxlbmd0aDtsLS07KWlmKG5bbF09PT10KXJldHVybiBpW2xdPT09ZTtpZihuLnB1c2godCksaS5wdXNoKGUpLG8pe2lmKGw9dC5sZW5ndGgsbCE9PWUubGVuZ3RoKXJldHVybiExO2Zvcig7bC0tOylpZighSSh0W2xdLGVbbF0sbixpKSlyZXR1cm4hMX1lbHNle3ZhciBjLHU9TS5rZXlzKHQpO2lmKGw9dS5sZW5ndGgsTS5rZXlzKGUpLmxlbmd0aCE9PWwpcmV0dXJuITE7Zm9yKDtsLS07KWlmKGM9dVtsXSwhTS5oYXMoZSxjKXx8IUkodFtjXSxlW2NdLG4saSkpcmV0dXJuITF9cmV0dXJuIG4ucG9wKCksaS5wb3AoKSwhMH07TS5pc0VxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEkodCxlKX0sTS5pc0VtcHR5PWZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT10fHwoRCh0KSYmKE0uaXNBcnJheSh0KXx8TS5pc1N0cmluZyh0KXx8TS5pc0FyZ3VtZW50cyh0KSk/MD09PXQubGVuZ3RoOjA9PT1NLmtleXModCkubGVuZ3RoKX0sTS5pc0VsZW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuISghdHx8MSE9PXQubm9kZVR5cGUpfSxNLmlzQXJyYXk9Z3x8ZnVuY3Rpb24odCl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PW0uY2FsbCh0KX0sTS5pc09iamVjdD1mdW5jdGlvbih0KXt2YXIgZT10eXBlb2YgdDtyZXR1cm4iZnVuY3Rpb24iPT09ZXx8Im9iamVjdCI9PT1lJiYhIXR9LE0uZWFjaChbIkFyZ3VtZW50cyIsIkZ1bmN0aW9uIiwiU3RyaW5nIiwiTnVtYmVyIiwiRGF0ZSIsIlJlZ0V4cCIsIkVycm9yIl0sZnVuY3Rpb24odCl7TVsiaXMiK3RdPWZ1bmN0aW9uKGUpe3JldHVybiBtLmNhbGwoZSk9PT0iW29iamVjdCAiK3QrIl0ifX0pLE0uaXNBcmd1bWVudHMoYXJndW1lbnRzKXx8KE0uaXNBcmd1bWVudHM9ZnVuY3Rpb24odCl7cmV0dXJuIE0uaGFzKHQsImNhbGxlZSIpfSksImZ1bmN0aW9uIiE9dHlwZW9mLy4vJiYib2JqZWN0IiE9dHlwZW9mIEludDhBcnJheSYmKE0uaXNGdW5jdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgdHx8ITF9KSxNLmlzRmluaXRlPWZ1bmN0aW9uKHQpe3JldHVybiBpc0Zpbml0ZSh0KSYmIWlzTmFOKHBhcnNlRmxvYXQodCkpfSxNLmlzTmFOPWZ1bmN0aW9uKHQpe3JldHVybiBNLmlzTnVtYmVyKHQpJiZ0IT09K3R9LE0uaXNCb29sZWFuPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09ITB8fHQ9PT0hMXx8IltvYmplY3QgQm9vbGVhbl0iPT09bS5jYWxsKHQpfSxNLmlzTnVsbD1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09PXR9LE0uaXNVbmRlZmluZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXR9LE0uaGFzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGwhPXQmJl8uY2FsbCh0LGUpfSxNLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gbC5fPWMsdGhpc30sTS5pZGVudGl0eT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sTS5jb25zdGFudD1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdH19LE0ubm9vcD1mdW5jdGlvbigpe30sTS5wcm9wZXJ0eT14LE0ucHJvcGVydHlPZj1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD9mdW5jdGlvbigpe306ZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19fSxNLm1hdGNoZXI9TS5tYXRjaGVzPWZ1bmN0aW9uKHQpe3JldHVybiB0PU0uZXh0ZW5kT3duKHt9LHQpLGZ1bmN0aW9uKGUpe3JldHVybiBNLmlzTWF0Y2goZSx0KX19LE0udGltZXM9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPUFycmF5KE1hdGgubWF4KDAsdCkpO2U9UyhlLG4sMSk7Zm9yKHZhciByPTA7cjx0O3IrKylpW3JdPWUocik7cmV0dXJuIGl9LE0ucmFuZG9tPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGw9PWUmJihlPXQsdD0wKSx0K01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooZS10KzEpKX0sTS5ub3c9RGF0ZS5ub3d8fGZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lKCl9O3ZhciBSPXsiJiI6IiZhbXA7IiwiPCI6IiZsdDsiLCI+IjoiJmd0OyIsJyInOiImcXVvdDsiLCInIjoiJiN4Mjc7IiwiYCI6IiYjeDYwOyJ9LGo9TS5pbnZlcnQoUiksSD1mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0sbj0iKD86IitNLmtleXModCkuam9pbigifCIpKyIpIixpPVJlZ0V4cChuKSxyPVJlZ0V4cChuLCJnIik7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiB0PW51bGw9PXQ/IiI6IiIrdCxpLnRlc3QodCk/dC5yZXBsYWNlKHIsZSk6dH19O00uZXNjYXBlPUgoUiksTS51bmVzY2FwZT1IKGopLE0ucmVzdWx0PWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1udWxsPT10P3ZvaWQgMDp0W2VdO3JldHVybiB2b2lkIDA9PT1pJiYoaT1uKSxNLmlzRnVuY3Rpb24oaSk/aS5jYWxsKHQpOml9O3ZhciBGPTA7TS51bmlxdWVJZD1mdW5jdGlvbih0KXt2YXIgZT0rK0YrIiI7cmV0dXJuIHQ/dCtlOmV9LE0udGVtcGxhdGVTZXR0aW5ncz17ZXZhbHVhdGU6LzwlKFtcc1xTXSs/KSU+L2csaW50ZXJwb2xhdGU6LzwlPShbXHNcU10rPyklPi9nLGVzY2FwZTovPCUtKFtcc1xTXSs/KSU+L2d9O3ZhciB6PS8oLileLyxVPXsiJyI6IiciLCJcXCI6IlxcIiwiXHIiOiJyIiwiXG4iOiJuIiwiXHUyMDI4IjoidTIwMjgiLCI=", "base64"));
  res.write(new Buffer("XHUyMDI5IjoidTIwMjkifSxXPS9cXHwnfFxyfFxufFx1MjAyOHxcdTIwMjkvZyxCPWZ1bmN0aW9uKHQpe3JldHVybiJcXCIrVVt0XX07TS50ZW1wbGF0ZT1mdW5jdGlvbih0LGUsbil7IWUmJm4mJihlPW4pLGU9TS5kZWZhdWx0cyh7fSxlLE0udGVtcGxhdGVTZXR0aW5ncyk7dmFyIGk9UmVnRXhwKFsoZS5lc2NhcGV8fHopLnNvdXJjZSwoZS5pbnRlcnBvbGF0ZXx8eikuc291cmNlLChlLmV2YWx1YXRlfHx6KS5zb3VyY2VdLmpvaW4oInwiKSsifCQiLCJnIikscj0wLG89Il9fcCs9JyI7dC5yZXBsYWNlKGksZnVuY3Rpb24oZSxuLGkscyxhKXtyZXR1cm4gbys9dC5zbGljZShyLGEpLnJlcGxhY2UoVyxCKSxyPWErZS5sZW5ndGgsbj9vKz0iJytcbigoX190PSgiK24rIikpPT1udWxsPycnOl8uZXNjYXBlKF9fdCkpK1xuJyI6aT9vKz0iJytcbigoX190PSgiK2krIikpPT1udWxsPycnOl9fdCkrXG4nIjpzJiYobys9Iic7XG4iK3MrIlxuX19wKz0nIiksZX0pLG8rPSInO1xuIixlLnZhcmlhYmxlfHwobz0id2l0aChvYmp8fHt9KXtcbiIrbysifVxuIiksbz0idmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XG4iK28rInJldHVybiBfX3A7XG4iO3RyeXt2YXIgcz1uZXcgRnVuY3Rpb24oZS52YXJpYWJsZXx8Im9iaiIsIl8iLG8pfWNhdGNoKGEpe3Rocm93IGEuc291cmNlPW8sYX12YXIgbD1mdW5jdGlvbih0KXtyZXR1cm4gcy5jYWxsKHRoaXMsdCxNKX0sYz1lLnZhcmlhYmxlfHwib2JqIjtyZXR1cm4gbC5zb3VyY2U9ImZ1bmN0aW9uKCIrYysiKXtcbiIrbysifSIsbH0sTS5jaGFpbj1mdW5jdGlvbih0KXt2YXIgZT1NKHQpO3JldHVybiBlLl9jaGFpbj0hMCxlfTt2YXIgVj1mdW5jdGlvbih0LGUpe3JldHVybiB0Ll9jaGFpbj9NKGUpLmNoYWluKCk6ZX07TS5taXhpbj1mdW5jdGlvbih0KXtNLmVhY2goTS5mdW5jdGlvbnModCksZnVuY3Rpb24oZSl7dmFyIG49TVtlXT10W2VdO00ucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7dmFyIHQ9W3RoaXMuX3dyYXBwZWRdO3JldHVybiBwLmFwcGx5KHQsYXJndW1lbnRzKSxWKHRoaXMsbi5hcHBseShNLHQpKX19KX0sTS5taXhpbihNKSxNLmVhY2goWyJwb3AiLCJwdXNoIiwicmV2ZXJzZSIsInNoaWZ0Iiwic29ydCIsInNwbGljZSIsInVuc2hpZnQiXSxmdW5jdGlvbih0KXt2YXIgZT11W3RdO00ucHJvdG90eXBlW3RdPWZ1bmN0aW9uKCl7dmFyIG49dGhpcy5fd3JhcHBlZDtyZXR1cm4gZS5hcHBseShuLGFyZ3VtZW50cyksInNoaWZ0IiE9PXQmJiJzcGxpY2UiIT09dHx8MCE9PW4ubGVuZ3RofHxkZWxldGUgblswXSxWKHRoaXMsbil9fSksTS5lYWNoKFsiY29uY2F0Iiwiam9pbiIsInNsaWNlIl0sZnVuY3Rpb24odCl7dmFyIGU9dVt0XTtNLnByb3RvdHlwZVt0XT1mdW5jdGlvbigpe3JldHVybiBWKHRoaXMsZS5hcHBseSh0aGlzLl93cmFwcGVkLGFyZ3VtZW50cykpfX0pLE0ucHJvdG90eXBlLnZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dyYXBwZWR9LE0ucHJvdG90eXBlLnZhbHVlT2Y9TS5wcm90b3R5cGUudG9KU09OPU0ucHJvdG90eXBlLnZhbHVlLE0ucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIiIrdGhpcy5fd3JhcHBlZH0saT1bXSxyPWZ1bmN0aW9uKCl7cmV0dXJuIE19LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0pLmNhbGwodGhpcyl9LGZ1bmN0aW9uKHQsZSxuKXsvKiEKCgkJIGhhbmRsZWJhcnMgdjQuMC41CgoJCUNvcHlyaWdodCAoQykgMjAxMS0yMDE1IGJ5IFllaHVkYSBLYXR6CgoJCVBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKCQlvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAoJCWluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKCQl0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCgkJY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCgkJZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKCgkJVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KCQlhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KCgkJVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKCQlJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKCQlGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKCQlBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCgkJTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKCQlPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOCgkJVEhFIFNPRlRXQVJFLgoKCQlAbGljZW5zZQoJCSovCgkhZnVuY3Rpb24oZSxuKXt0LmV4cG9ydHM9bigpfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoaSl7aWYobltpXSlyZXR1cm4gbltpXS5leHBvcnRzO3ZhciByPW5baV09e2V4cG9ydHM6e30saWQ6aSxsb2FkZWQ6ITF9O3JldHVybiB0W2ldLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLGUpLHIubG9hZGVkPSEwLHIuZXhwb3J0c312YXIgbj17fTtyZXR1cm4gZS5tPXQsZS5jPW4sZS5wPSIiLGUoMCl9KFtmdW5jdGlvbih0LGUsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGkoKXt2YXIgdD1nKCk7cmV0dXJuIHQuY29tcGlsZT1mdW5jdGlvbihlLG4pe3JldHVybiB1LmNvbXBpbGUoZSxuLHQpfSx0LnByZWNvbXBpbGU9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdS5wcmVjb21waWxlKGUsbix0KX0sdC5BU1Q9bFsiZGVmYXVsdCJdLHQuQ29tcGlsZXI9dS5Db21waWxlcix0LkphdmFTY3JpcHRDb21waWxlcj1oWyJkZWZhdWx0Il0sdC5QYXJzZXI9Yy5wYXJzZXIsdC5wYXJzZT1jLnBhcnNlLHR9dmFyIHI9bigxKVsiZGVmYXVsdCJdO2UuX19lc01vZHVsZT0hMDt2YXIgbz1uKDIpLHM9cihvKSxhPW4oMjEpLGw9cihhKSxjPW4oMjIpLHU9bigyNyksZD1uKDI4KSxoPXIoZCkscD1uKDI1KSxmPXIocCksbT1uKDIwKSxfPXIobSksZz1zWyJkZWZhdWx0Il0uY3JlYXRlLHY9aSgpO3YuY3JlYXRlPWksX1siZGVmYXVsdCJdKHYpLHYuVmlzaXRvcj1mWyJkZWZhdWx0Il0sdlsiZGVmYXVsdCJdPXYsZVsiZGVmYXVsdCJdPXYsdC5leHBvcnRzPWVbImRlZmF1bHQiXX0sZnVuY3Rpb24odCxlKXsidXNlIHN0cmljdCI7ZVsiZGVmYXVsdCJdPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ImRlZmF1bHQiOnR9fSxlLl9fZXNNb2R1bGU9ITB9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gaSgpe3ZhciB0PW5ldyBhLkhhbmRsZWJhcnNFbnZpcm9ubWVudDtyZXR1cm4gcC5leHRlbmQodCxhKSx0LlNhZmVTdHJpbmc9Y1siZGVmYXVsdCJdLHQuRXhjZXB0aW9uPWRbImRlZmF1bHQiXSx0LlV0aWxzPXAsdC5lc2NhcGVFeHByZXNzaW9uPXAuZXNjYXBlRXhwcmVzc2lvbix0LlZNPW0sdC50ZW1wbGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gbS50ZW1wbGF0ZShlLHQpfSx0fXZhciByPW4oMylbImRlZmF1bHQiXSxvPW4oMSlbImRlZmF1bHQiXTtlLl9fZXNNb2R1bGU9ITA7dmFyIHM9big0KSxhPXIocyksbD1uKDE4KSxjPW8obCksdT1uKDYpLGQ9byh1KSxoPW4oNSkscD1yKGgpLGY9bigxOSksbT1yKGYpLF89bigyMCksZz1vKF8pLHY9aSgpO3YuY3JlYXRlPWksZ1siZGVmYXVsdCJdKHYpLHZbImRlZmF1bHQiXT12LGVbImRlZmF1bHQiXT12LHQuZXhwb3J0cz1lWyJkZWZhdWx0Il19LGZ1bmN0aW9uKHQsZSl7InVzZSBzdHJpY3QiO2VbImRlZmF1bHQiXT1mdW5jdGlvbih0KXtpZih0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIGU9e307aWYobnVsbCE9dClmb3IodmFyIG4gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxuKSYmKGVbbl09dFtuXSk7cmV0dXJuIGVbImRlZmF1bHQiXT10LGV9LGUuX19lc01vZHVsZT0hMH0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBpKHQsZSxuKXt0aGlzLmhlbHBlcnM9dHx8e30sdGhpcy5wYXJ0aWFscz1lfHx7fSx0aGlzLmRlY29yYXRvcnM9bnx8e30sbC5yZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpLGMucmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyh0aGlzKX12YXIgcj1uKDEpWyJkZWZhdWx0Il07ZS5fX2VzTW9kdWxlPSEwLGUuSGFuZGxlYmFyc0Vudmlyb25tZW50PWk7dmFyIG89big1KSxzPW4oNiksYT1yKHMpLGw9big3KSxjPW4oMTUpLHU9bigxNyksZD1yKHUpLGg9IjQuMC41IjtlLlZFUlNJT049aDt2YXIgcD03O2UuQ09NUElMRVJfUkVWSVNJT049cDt2YXIgZj17MToiPD0gMS4wLnJjLjIiLDI6Ij09IDEuMC4wLXJjLjMiLDM6Ij09IDEuMC4wLXJjLjQiLDQ6Ij09IDEueC54Iiw1OiI9PSAyLjAuMC1hbHBoYS54Iiw2OiI+PSAyLjAuMC1iZXRhLjEiLDc6Ij49IDQuMC4wIn07ZS5SRVZJU0lPTl9DSEFOR0VTPWY7dmFyIG09IltvYmplY3QgT2JqZWN0XSI7aS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmksbG9nZ2VyOmRbImRlZmF1bHQiXSxsb2c6ZFsiZGVmYXVsdCJdLmxvZyxyZWdpc3RlckhlbHBlcjpmdW5jdGlvbih0LGUpe2lmKG8udG9TdHJpbmcuY2FsbCh0KT09PW0pe2lmKGUpdGhyb3cgbmV3IGFbImRlZmF1bHQiXSgiQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzIik7by5leHRlbmQodGhpcy5oZWxwZXJzLHQpfWVsc2UgdGhpcy5oZWxwZXJzW3RdPWV9LHVucmVnaXN0ZXJIZWxwZXI6ZnVuY3Rpb24odCl7ZGVsZXRlIHRoaXMuaGVscGVyc1t0XX0scmVnaXN0ZXJQYXJ0aWFsOmZ1bmN0aW9uKHQsZSl7aWYoby50b1N0cmluZy5jYWxsKHQpPT09bSlvLmV4dGVuZCh0aGlzLnBhcnRpYWxzLHQpO2Vsc2V7aWYoInVuZGVmaW5lZCI9PXR5cGVvZiBlKXRocm93IG5ldyBhWyJkZWZhdWx0Il0oJ0F0dGVtcHRpbmcgdG8gcmVnaXN0ZXIgYSBwYXJ0aWFsIGNhbGxlZCAiJyt0KyciIGFzIHVuZGVmaW5lZCcpO3RoaXMucGFydGlhbHNbdF09ZX19LHVucmVnaXN0ZXJQYXJ0aWFsOmZ1bmN0aW9uKHQpe2RlbGV0ZSB0aGlzLnBhcnRpYWxzW3RdfSxyZWdpc3RlckRlY29yYXRvcjpmdW5jdGlvbih0LGUpe2lmKG8udG9TdHJpbmcuY2FsbCh0KT09PW0pe2lmKGUpdGhyb3cgbmV3IGFbImRlZmF1bHQiXSgiQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBkZWNvcmF0b3JzIik7by5leHRlbmQodGhpcy5kZWNvcmF0b3JzLHQpfWVsc2UgdGhpcy5kZWNvcmF0b3JzW3RdPWV9LHVucmVnaXN0ZXJEZWNvcmF0b3I6ZnVuY3Rpb24odCk=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("OlsyLDQ1XSw4NzpbMiw0NV19LHs1Mjo1Myw1NDpbMiw4Ml0sNjU6WzIsODJdLDcyOlsyLDgyXSw4MDpbMiw4Ml0sODE6WzIsODJdLDgyOlsyLDgyXSw4MzpbMiw4Ml0sODQ6WzIsODJdLDg1OlsyLDgyXX0sezI1OjU0LDM4OjU2LDM5OlsxLDU4XSw0Mzo1Nyw0NDpbMSw1OV0sNDU6NTUsNDc6WzIsNTRdfSx7Mjg6NjAsNDM6NjEsNDQ6WzEsNTldLDQ3OlsyLDU2XX0sezEzOjYzLDE1OlsxLDIwXSwxODpbMSw2Ml19LHsxNTpbMiw0OF0sMTg6WzIsNDhdfSx7MzM6WzIsODZdLDU3OjY0LDY1OlsyLDg2XSw3MjpbMiw4Nl0sODA6WzIsODZdLDgxOlsyLDg2XSw4MjpbMiw4Nl0sODM6WzIsODZdLDg0OlsyLDg2XSw4NTpbMiw4Nl19LHszMzpbMiw0MF0sNjU6WzIsNDBdLDcyOlsyLDQwXSw4MDpbMiw0MF0sODE6WzIsNDBdLDgyOlsyLDQwXSw4MzpbMiw0MF0sODQ6WzIsNDBdLDg1OlsyLDQwXX0sezMzOlsyLDQxXSw2NTpbMiw0MV0sNzI6WzIsNDFdLDgwOlsyLDQxXSw4MTpbMiw0MV0sODI6WzIsNDFdLDgzOlsyLDQxXSw4NDpbMiw0MV0sODU6WzIsNDFdfSx7MjA6NjUsNzI6WzEsMzVdLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjY6NjYsNDc6WzEsNjddfSx7MzA6NjgsMzM6WzIsNThdLDY1OlsyLDU4XSw3MjpbMiw1OF0sNzU6WzIsNThdLDgwOlsyLDU4XSw4MTpbMiw1OF0sODI6WzIsNThdLDgzOlsyLDU4XSw4NDpbMiw1OF0sODU6WzIsNThdfSx7MzM6WzIsNjRdLDM1OjY5LDY1OlsyLDY0XSw3MjpbMiw2NF0sNzU6WzIsNjRdLDgwOlsyLDY0XSw4MTpbMiw2NF0sODI6WzIsNjRdLDgzOlsyLDY0XSw4NDpbMiw2NF0sODU6WzIsNjRdfSx7MjE6NzAsMjM6WzIsNTBdLDY1OlsyLDUwXSw3MjpbMiw1MF0sODA6WzIsNTBdLDgxOlsyLDUwXSw4MjpbMiw1MF0sODM6WzIsNTBdLDg0OlsyLDUwXSw4NTpbMiw1MF19LHszMzpbMiw5MF0sNjE6NzEsNjU6WzIsOTBdLDcyOlsyLDkwXSw4MDpbMiw5MF0sODE6WzIsOTBdLDgyOlsyLDkwXSw4MzpbMiw5MF0sODQ6WzIsOTBdLDg1OlsyLDkwXX0sezIwOjc1LDMzOlsyLDgwXSw1MDo3Miw2Mzo3Myw2NDo3Niw2NTpbMSw0NF0sNjk6NzQsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7NzI6WzEsODBdfSx7MjM6WzIsNDJdLDMzOlsyLDQyXSw1NDpbMiw0Ml0sNjU6WzIsNDJdLDY4OlsyLDQyXSw3MjpbMiw0Ml0sNzU6WzIsNDJdLDgwOlsyLDQyXSw4MTpbMiw0Ml0sODI6WzIsNDJdLDgzOlsyLDQyXSw4NDpbMiw0Ml0sODU6WzIsNDJdLDg3OlsxLDUxXX0sezIwOjc1LDUzOjgxLDU0OlsyLDg0XSw2Mzo4Miw2NDo3Niw2NTpbMSw0NF0sNjk6ODMsNzA6NzcsNzE6NzgsNzI6WzEsNzldLDc4OjI2LDc5OjI3LDgwOlsxLDI4XSw4MTpbMSwyOV0sODI6WzEsMzBdLDgzOlsxLDMxXSw4NDpbMSwzMl0sODU6WzEsMzRdLDg2OjMzfSx7MjY6ODQsNDc6WzEsNjddfSx7NDc6WzIsNTVdfSx7NDo4NSw2OjMsMTQ6WzIsNDZdLDE1OlsyLDQ2XSwxOTpbMiw0Nl0sMjk6WzIsNDZdLDM0OlsyLDQ2XSwzOTpbMiw0Nl0sNDQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHs0NzpbMiwyMF19LHsyMDo4Niw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHs0Ojg3LDY6MywxNDpbMiw0Nl0sMTU6WzIsNDZdLDE5OlsyLDQ2XSwyOTpbMiw0Nl0sMzQ6WzIsNDZdLDQ3OlsyLDQ2XSw0ODpbMiw0Nl0sNTE6WzIsNDZdLDU1OlsyLDQ2XSw2MDpbMiw0Nl19LHsyNjo4OCw0NzpbMSw2N119LHs0NzpbMiw1N119LHs1OlsyLDExXSwxNDpbMiwxMV0sMTU6WzIsMTFdLDE5OlsyLDExXSwyOTpbMiwxMV0sMzQ6WzIsMTFdLDM5OlsyLDExXSw0NDpbMiwxMV0sNDc6WzIsMTFdLDQ4OlsyLDExXSw1MTpbMiwxMV0sNTU6WzIsMTFdLDYwOlsyLDExXX0sezE1OlsyLDQ5XSwxODpbMiw0OV19LHsyMDo3NSwzMzpbMiw4OF0sNTg6ODksNjM6OTAsNjQ6NzYsNjU6WzEsNDRdLDY5OjkxLDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3ODoyNiw3OToyNyw4MDpbMSwyOF0sODE6WzEsMjldLDgyOlsxLDMwXSw4MzpbMSwzMV0sODQ6WzEsMzJdLDg1OlsxLDM0XSw4NjozM30sezY1OlsyLDk0XSw2Njo5Miw2ODpbMiw5NF0sNzI6WzIsOTRdLDgwOlsyLDk0XSw4MTpbMiw5NF0sODI6WzIsOTRdLDgzOlsyLDk0XSw4NDpbMiw5NF0sODU6WzIsOTRdfSx7NTpbMiwyNV0sMTQ6WzIsMjVdLDE1OlsyLDI1XSwxOTpbMiwyNV0sMjk6WzIsMjVdLDM0OlsyLDI1XSwzOTpbMiwyNV0sNDQ6WzIsMjVdLDQ3OlsyLDI1XSw0ODpbMiwyNV0sNTE6WzIsMjVdLDU1OlsyLDI1XSw2MDpbMiwyNV19LHsyMDo5Myw3MjpbMSwzNV0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwzMTo5NCwzMzpbMiw2MF0sNjM6OTUsNjQ6NzYsNjU6WzEsNDRdLDY5Ojk2LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3NTpbMiw2MF0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwzMzpbMiw2Nl0sMzY6OTcsNjM6OTgsNjQ6NzYsNjU6WzEsNDRdLDY5Ojk5LDcwOjc3LDcxOjc4LDcyOlsxLDc5XSw3NTpbMiw2Nl0sNzg6MjYsNzk6MjcsODA6WzEsMjhdLDgxOlsxLDI5XSw4MjpbMSwzMF0sODM6WzEsMzFdLDg0OlsxLDMyXSw4NTpbMSwzNF0sODY6MzN9LHsyMDo3NSwyMg==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("Jy9nLCInIiksODA7Y2FzZSAzMzpyZXR1cm4gODU7Y2FzZSAzNDpyZXR1cm4gODI7Y2FzZSAzNTpyZXR1cm4gODI7Y2FzZSAzNjpyZXR1cm4gODM7Y2FzZSAzNzpyZXR1cm4gODQ7Y2FzZSAzODpyZXR1cm4gODE7Y2FzZSAzOTpyZXR1cm4gNzU7Y2FzZSA0MDpyZXR1cm4gNzc7Y2FzZSA0MTpyZXR1cm4gNzI7Y2FzZSA0MjpyZXR1cm4gZS55eXRleHQ9ZS55eXRleHQucmVwbGFjZSgvXFwoW1xcXF1dKS9nLCIkMSIpLDcyO2Nhc2UgNDM6cmV0dXJuIklOVkFMSUQiO2Nhc2UgNDQ6cmV0dXJuIDV9fSx0LnJ1bGVzPVsvXig/OlteXHgwMF0qPyg/PShce1x7KSkpLywvXig/OlteXHgwMF0rKS8sL14oPzpbXlx4MDBdezIsfT8oPz0oXHtce3xcXFx7XHt8XFxcXFx7XHt8JCkpKS8sL14oPzpce1x7XHtceyg/PVteXC9dKSkvLC9eKD86XHtce1x7XHtcL1teXHMhIiMlLSxcLlwvOy0+QFxbLVxeYFx7LX5dKyg/PVs9fVxzXC8uXSlcfVx9XH1cfSkvLC9eKD86W15ceDAwXSo/KD89KFx7XHtce1x7KSkpLywvXig/Oltcc1xTXSo/LS0ofik/XH1cfSkvLC9eKD86XCgpLywvXig/OlwpKS8sL14oPzpce1x7XHtceykvLC9eKD86XH1cfVx9XH0pLywvXig/Olx7XHsofik/PikvLC9eKD86XHtceyh+KT8jPikvLC9eKD86XHtceyh+KT8jXCo/KS8sL14oPzpce1x7KH4pP1wvKS8sL14oPzpce1x7KH4pP1xeXHMqKH4pP1x9XH0pLywvXig/Olx7XHsofik/XHMqZWxzZVxzKih+KT9cfVx9KS8sL14oPzpce1x7KH4pP1xeKS8sL14oPzpce1x7KH4pP1xzKmVsc2VcYikvLC9eKD86XHtceyh+KT9ceykvLC9eKD86XHtceyh+KT8mKS8sL14oPzpce1x7KH4pPyEtLSkvLC9eKD86XHtceyh+KT8hW1xzXFNdKj9cfVx9KS8sL14oPzpce1x7KH4pP1wqPykvLC9eKD86PSkvLC9eKD86XC5cLikvLC9eKD86XC4oPz0oWz1+fVxzXC8uKXxdKSkpLywvXig/OltcLy5dKS8sL14oPzpccyspLywvXig/Olx9KH4pP1x9XH0pLywvXig/Oih+KT9cfVx9KS8sL14oPzoiKFxcWyJdfFteIl0pKiIpLywvXig/OicoXFxbJ118W14nXSkqJykvLC9eKD86QCkvLC9eKD86dHJ1ZSg/PShbfn1ccyldKSkpLywvXig/OmZhbHNlKD89KFt+fVxzKV0pKSkvLC9eKD86dW5kZWZpbmVkKD89KFt+fVxzKV0pKSkvLC9eKD86bnVsbCg/PShbfn1ccyldKSkpLywvXig/Oi0/WzAtOV0rKD86XC5bMC05XSspPyg/PShbfn1ccyldKSkpLywvXig/OmFzXHMrXHwpLywvXig/Olx8KS8sL14oPzooW15ccyEiIyUtLFwuXC87LT5AXFstXF5gXHstfl0rKD89KFs9fn1cc1wvLil8XSkpKSkvLC9eKD86XFsoXFxcXXxbXlxdXSkqXF0pLywvXig/Oi4pLywvXig/OiQpL10sdC5jb25kaXRpb25zPXttdTp7cnVsZXM6WzcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0XSxpbmNsdXNpdmU6ITF9LGVtdTp7cnVsZXM6WzJdLGluY2x1c2l2ZTohMX0sY29tOntydWxlczpbNl0saW5jbHVzaXZlOiExfSxyYXc6e3J1bGVzOlszLDQsNV0saW5jbHVzaXZlOiExfSxJTklUSUFMOntydWxlczpbMCwxLDQ0XSxpbmNsdXNpdmU6ITB9fSx0fSgpO3JldHVybiBlLmxleGVyPW4sdC5wcm90b3R5cGU9ZSxlLlBhcnNlcj10LG5ldyB0fSgpO2UuX19lc01vZHVsZT0hMCxlWyJkZWZhdWx0Il09bn0sZnVuY3Rpb24odCxlLG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBpKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aDw9MHx8dm9pZCAwPT09YXJndW1lbnRzWzBdP3t9OmFyZ3VtZW50c1swXTt0aGlzLm9wdGlvbnM9dH1mdW5jdGlvbiByKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT10Lmxlbmd0aCk7dmFyIGk9dFtlLTFdLHI9dFtlLTJdO3JldHVybiBpPyJDb250ZW50U3RhdGVtZW50Ij09PWkudHlwZT8ocnx8IW4/L1xyP1xuXHMqPyQvOi8oXnxccj9cbilccyo/JC8pLnRlc3QoaS5vcmlnaW5hbCk6dm9pZCAwOm59ZnVuY3Rpb24gbyh0LGUsbil7dm9pZCAwPT09ZSYmKGU9LTEpO3ZhciBpPXRbZSsxXSxyPXRbZSsyXTtyZXR1cm4gaT8iQ29udGVudFN0YXRlbWVudCI9PT1pLnR5cGU/KHJ8fCFuPy9eXHMqP1xyP1xuLzovXlxzKj8oXHI/XG58JCkvKS50ZXN0KGkub3JpZ2luYWwpOnZvaWQgMDpufWZ1bmN0aW9uIHModCxlLG4pe3ZhciBpPXRbbnVsbD09ZT8wOmUrMV07aWYoaSYmIkNvbnRlbnRTdGF0ZW1lbnQiPT09aS50eXBlJiYobnx8IWkucmlnaHRTdHJpcHBlZCkpe3ZhciByPWkudmFsdWU7aS52YWx1ZT1pLnZhbHVlLnJlcGxhY2Uobj8vXlxzKy86L15bIFx0XSpccj9cbj8vLCIiKSxpLnJpZ2h0U3RyaXBwZWQ9aS52YWx1ZSE9PXJ9fWZ1bmN0aW9uIGEodCxlLG4pe3ZhciBpPXRbbnVsbD09ZT90Lmxlbmd0aC0xOmUtMV07aWYoaSYmIkNvbnRlbnRTdGF0ZW1lbnQiPT09aS50eXBlJiYobnx8IWkubGVmdFN0cmlwcGVkKSl7dmFyIHI9aS52YWx1ZTtyZXR1cm4gaS52YWx1ZT1pLnZhbHVlLnJlcGxhY2Uobj8vXHMrJC86L1sgXHRdKyQvLCIiKSxpLmxlZnRTdHJpcHBlZD1pLnZhbHVlIT09cixpLmxlZnRTdHJpcHBlZH19dmFyIGw9bigxKVsiZGVmYXVsdCJdO2UuX19lc01vZHVsZT0hMDt2YXIgYz1uKDI1KSx1PWwoYyk7aS5wcm90b3R5cGU9bmV3IHVbImRlZmF1bHQiXSxpLnByb3RvdHlwZS5Qcm9ncmFtPWZ1bmN0aW9uKHQpe3ZhciBlPSF0aGlzLm9wdGlvbnMuaWdub3JlU3RhbmRhbG9uZSxuPSF0aGlzLmlzUm9vdFNlZW47dGhpcy5pc1Jvb3RTZWVuPSEwO2Zvcih2YXIgaT10LmJvZHksbD0wLGM9aS5sZW5ndGg7bDxjO2wrKyl7dmFyIHU9aVtsXSxkPXRoaXMuYWNjZXB0KHUpO2lmKGQpe3ZhciBoPXIoaSxsLG4pLHA9byhpLGwsbiksZj1kLm9wZW5TdGFuZGFsb25lJiZoLG09ZC5jbG9zZVN0YW5kYWxvbmUmJnAsXz1kLmlubGluZVN0YW5kYWxvbmUmJmgmJg==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("UG9zc2libGVMYW1iZGEiKX0saGVscGVyU2V4cHI6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMuc2V0dXBGdWxsTXVzdGFjaGVQYXJhbXModCxlLG4pLHI9dC5wYXRoLG89ci5wYXJ0c1swXTtpZih0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzW29dKXRoaXMub3Bjb2RlKCJpbnZva2VLbm93bkhlbHBlciIsaS5sZW5ndGgsbyk7ZWxzZXtpZih0aGlzLm9wdGlvbnMua25vd25IZWxwZXJzT25seSl0aHJvdyBuZXcgdVsiZGVmYXVsdCJdKCJZb3Ugc3BlY2lmaWVkIGtub3duSGVscGVyc09ubHksIGJ1dCB1c2VkIHRoZSB1bmtub3duIGhlbHBlciAiK28sdCk7ci5zdHJpY3Q9ITAsci5mYWxzeT0hMCx0aGlzLmFjY2VwdChyKSx0aGlzLm9wY29kZSgiaW52b2tlSGVscGVyIixpLmxlbmd0aCxyLm9yaWdpbmFsLHBbImRlZmF1bHQiXS5oZWxwZXJzLnNpbXBsZUlkKHIpKX19LFBhdGhFeHByZXNzaW9uOmZ1bmN0aW9uKHQpe3RoaXMuYWRkRGVwdGgodC5kZXB0aCksdGhpcy5vcGNvZGUoImdldENvbnRleHQiLHQuZGVwdGgpO3ZhciBlPXQucGFydHNbMF0sbj1wWyJkZWZhdWx0Il0uaGVscGVycy5zY29wZWRJZCh0KSxpPSF0LmRlcHRoJiYhbiYmdGhpcy5ibG9ja1BhcmFtSW5kZXgoZSk7aT90aGlzLm9wY29kZSgibG9va3VwQmxvY2tQYXJhbSIsaSx0LnBhcnRzKTplP3QuZGF0YT8odGhpcy5vcHRpb25zLmRhdGE9ITAsdGhpcy5vcGNvZGUoImxvb2t1cERhdGEiLHQuZGVwdGgsdC5wYXJ0cyx0LnN0cmljdCkpOnRoaXMub3Bjb2RlKCJsb29rdXBPbkNvbnRleHQiLHQucGFydHMsdC5mYWxzeSx0LnN0cmljdCxuKTp0aGlzLm9wY29kZSgicHVzaENvbnRleHQiKX0sU3RyaW5nTGl0ZXJhbDpmdW5jdGlvbih0KXt0aGlzLm9wY29kZSgicHVzaFN0cmluZyIsdC52YWx1ZSl9LE51bWJlckxpdGVyYWw6ZnVuY3Rpb24odCl7dGhpcy5vcGNvZGUoInB1c2hMaXRlcmFsIix0LnZhbHVlKX0sQm9vbGVhbkxpdGVyYWw6ZnVuY3Rpb24odCl7dGhpcy5vcGNvZGUoInB1c2hMaXRlcmFsIix0LnZhbHVlKX0sVW5kZWZpbmVkTGl0ZXJhbDpmdW5jdGlvbigpe3RoaXMub3Bjb2RlKCJwdXNoTGl0ZXJhbCIsInVuZGVmaW5lZCIpfSxOdWxsTGl0ZXJhbDpmdW5jdGlvbigpe3RoaXMub3Bjb2RlKCJwdXNoTGl0ZXJhbCIsIm51bGwiKX0sSGFzaDpmdW5jdGlvbih0KXt2YXIgZT10LnBhaXJzLG49MCxpPWUubGVuZ3RoO2Zvcih0aGlzLm9wY29kZSgicHVzaEhhc2giKTtuPGk7bisrKXRoaXMucHVzaFBhcmFtKGVbbl0udmFsdWUpO2Zvcig7bi0tOyl0aGlzLm9wY29kZSgiYXNzaWduVG9IYXNoIixlW25dLmtleSk7dGhpcy5vcGNvZGUoInBvcEhhc2giKX0sb3Bjb2RlOmZ1bmN0aW9uKHQpe3RoaXMub3Bjb2Rlcy5wdXNoKHtvcGNvZGU6dCxhcmdzOmYuY2FsbChhcmd1bWVudHMsMSksbG9jOnRoaXMuc291cmNlTm9kZVswXS5sb2N9KX0sYWRkRGVwdGg6ZnVuY3Rpb24odCl7dCYmKHRoaXMudXNlRGVwdGhzPSEwKX0sY2xhc3NpZnlTZXhwcjpmdW5jdGlvbih0KXt2YXIgZT1wWyJkZWZhdWx0Il0uaGVscGVycy5zaW1wbGVJZCh0LnBhdGgpLG49ZSYmISF0aGlzLmJsb2NrUGFyYW1JbmRleCh0LnBhdGgucGFydHNbMF0pLGk9IW4mJnBbImRlZmF1bHQiXS5oZWxwZXJzLmhlbHBlckV4cHJlc3Npb24odCkscj0hbiYmKGl8fGUpO2lmKHImJiFpKXt2YXIgbz10LnBhdGgucGFydHNbMF0scz10aGlzLm9wdGlvbnM7cy5rbm93bkhlbHBlcnNbb10/aT0hMDpzLmtub3duSGVscGVyc09ubHkmJihyPSExKX1yZXR1cm4gaT8iaGVscGVyIjpyPyJhbWJpZ3VvdXMiOiJzaW1wbGUifSxwdXNoUGFyYW1zOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dC5sZW5ndGg7", "base64"));
  res.write(new Buffer("ZTxuO2UrKyl0aGlzLnB1c2hQYXJhbSh0W2VdKX0scHVzaFBhcmFtOmZ1bmN0aW9uKHQpe3ZhciBlPW51bGwhPXQudmFsdWU/dC52YWx1ZTp0Lm9yaWdpbmFsfHwiIjtpZih0aGlzLnN0cmluZ1BhcmFtcyllLnJlcGxhY2UmJihlPWUucmVwbGFjZSgvXihcLj9cLlwvKSovZywiIikucmVwbGFjZSgvXC8vZywiLiIpKSx0LmRlcHRoJiZ0aGlzLmFkZERlcHRoKHQuZGVwdGgpLHRoaXMub3Bjb2RlKCJnZXRDb250ZXh0Iix0LmRlcHRofHwwKSx0aGlzLm9wY29kZSgicHVzaFN0cmluZ1BhcmFtIixlLHQudHlwZSksIlN1YkV4cHJlc3Npb24iPT09dC50eXBlJiZ0aGlzLmFjY2VwdCh0KTtlbHNle2lmKHRoaXMudHJhY2tJZHMpe3ZhciBuPXZvaWQgMDtpZighdC5wYXJ0c3x8cFsiZGVmYXVsdCJdLmhlbHBlcnMuc2NvcGVkSWQodCl8fHQuZGVwdGh8fChuPXRoaXMuYmxvY2tQYXJhbUluZGV4KHQucGFydHNbMF0pKSxuKXt2YXIgaT10LnBhcnRzLnNsaWNlKDEpLmpvaW4oIi4iKTt0aGlzLm9wY29kZSgicHVzaElkIiwiQmxvY2tQYXJhbSIsbixpKX1lbHNlIGU9dC5vcmlnaW5hbHx8ZSxlLnJlcGxhY2UmJihlPWUucmVwbGFjZSgvXnRoaXMoPzpcLnwkKS8sIiIpLnJlcGxhY2UoL15cLlwvLywiIikucmVwbGFjZSgvXlwuJC8sIiIpKSx0aGlzLm9wY29kZSgicHVzaElkIix0LnR5cGUsZSl9dGhpcy5hY2NlcHQodCl9fSxzZXR1cEZ1bGxNdXN0YWNoZVBhcmFtczpmdW5jdGlvbih0LGUsbixpKXt2YXIgcj10LnBhcmFtcztyZXR1cm4gdGhpcy5wdXNoUGFyYW1zKHIpLHRoaXMub3Bjb2RlKCJwdXNoUHJvZ3JhbSIsZSksdGhpcy5vcGNvZGUoInB1c2hQcm9ncmFtIixuKSx0Lmhhc2g/dGhpcy5hY2NlcHQodC5oYXNoKTp0aGlzLm9wY29kZSgiZW1wdHlIYXNoIixpKSxyfSxibG9ja1BhcmFtSW5kZXg6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj10aGlzLm9wdGlvbnMuYmxvY2tQYXJhbXMubGVuZ3RoO2U8bjtlKyspe3ZhciBpPXRoaXMub3B0aW9ucy5ibG9ja1BhcmFtc1tlXSxyPWkmJmQuaW5kZXhPZihpLHQpO2lmKGkmJnI+PTApcmV0dXJuW2Uscl19fX19LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gaSh0KXt0aGlzLnZhbHVlPXR9ZnVuY3Rpb24gcigpe31mdW5jdGlvbiBvKHQsZSxuLGkpe3ZhciByPWUucG9wU3RhY2soKSxvPTAscz1uLmxlbmd0aDtmb3IodCYmcy0tO288cztvKyspcj1lLm5hbWVMb29rdXAocixuW29dLGkpO3JldHVybiB0P1tlLmFsaWFzYWJsZSgiY29udGFpbmVyLnN0cmljdCIpLCIoIixyLCIsICIsZS5xdW90ZWRTdHJpbmcobltvXSksIikiXTpyfXZhciBzPW4oMSlbImRlZmF1bHQiXTtlLl9fZXNNb2R1bGU9ITA7dmFyIGE9big0KSxsPW4oNiksYz1zKGwpLHU9big1KSxkPW4oMjkpLGg9cyhkKTtyLnByb3RvdHlwZT17bmFtZUxvb2t1cDpmdW5jdGlvbih0LGUpe3JldHVybiByLmlzVmFsaWRKYXZhU2NyaXB0VmFyaWFibGVOYW1lKGUpP1t0LCIuIixlXTpbdCwiWyIsSlNPTi5zdHJpbmdpZnkoZSksIl0iXX0sZGVwdGhlZExvb2t1cDpmdW5jdGlvbih0KXtyZXR1cm5bdGhpcy5hbGlhc2FibGUoImNvbnRhaW5lci5sb29rdXAiKSwnKGRlcHRocywgIicsdCwnIiknXX0sY29tcGlsZXJJbmZvOmZ1bmN0aW9uKCl7dmFyIHQ9YS5DT01QSUxFUl9SRVZJU0lPTixlPWEuUkVWSVNJT05fQ0hBTkdFU1t0XTtyZXR1cm5bdCxlXX0sYXBwZW5kVG9CdWZmZXI6ZnVuY3Rpb24odCxlLG4pe3JldHVybiB1LmlzQXJyYXkodCl8fCh0PVt0XSksdD10aGlzLnNvdXJjZS53cmFwKHQsZSksdGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZT9bInJldHVybiAiLHQsIjsiXTpuP1siYnVmZmVyICs9ICIsdCwiOyJdOih0LmFwcGVuZFRvQnVmZmVyPSEwLHQpfSxpbml0aWFsaXplQnVmZmVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucXVvdGVkU3RyaW5nKCIiKX0sY29tcGlsZTpmdW5jdGlvbih0LGUsbixpKXt0aGlzLmVudmlyb25tZW50PXQsdGhpcy5vcHRpb25zPWUsdGhpcy5zdHJpbmdQYXJhbXM9dGhpcy5vcHRpb25zLnN0cmluZ1BhcmFtcyx0aGlzLnRyYWNrSWRzPXRoaXMub3B0aW9ucy50cmFja0lkcyx0aGlzLnByZWNvbXBpbGU9IWksdGhpcy5uYW1lPXRoaXMuZW52aXJvbm1lbnQubmFtZSx0aGlzLmlzQ2hpbGQ9ISFuLHRoaXMuY29udGV4dD1ufHx7ZGVjb3JhdG9yczpbXSxwcm9ncmFtczpbXSxlbnZpcm9ubWVudHM6W119LHRoaXMucHJlYW1ibGUoKSx0aGlzLnN0YWNrU2xvdD0wLHRoaXMuc3RhY2tWYXJzPVtdLHRoaXMuYWxpYXNlcz17fSx0aGlzLnJlZ2lzdGVycz17bGlzdDpbXX0sdGhpcy5oYXNoZXM9W10sdGhpcy5jb21waWxlU3RhY2s9W10sdGhpcy5pbmxpbmVTdGFjaz1bXSx0aGlzLmJsb2NrUGFyYW1zPVtdLHRoaXMuY29tcGlsZUNoaWxkcmVuKHQsZSksdGhpcy51c2VEZXB0aHM9dGhpcy51c2VEZXB0aHN8fHQudXNlRGVwdGhzfHx0LnVzZURlY29yYXRvcnN8fHRoaXMub3B0aW9ucy5jb21wYXQsdGhpcy51c2VCbG9ja1BhcmFtcz10aGlzLnVzZUJsb2NrUGFyYW1zfHx0LnVzZUJsb2NrUGFyYW1zO3ZhciByPXQub3Bjb2RlcyxvPXZvaWQgMCxzPXZvaWQgMCxhPXZvaWQgMCxsPXZvaWQgMDtmb3IoYT0wLGw9ci5sZW5ndGg7YTxsO2ErKylvPXJbYV0sdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uPW8ubG9jLHM9c3x8by5sb2MsdGhpc1tvLm9wY29kZV0uYXBwbHkodGhpcyxvLmFyZ3MpO2lmKHRoaXMuc291cmNlLmN1cnJlbnRMb2NhdGlvbj1zLHRoaXMucHVzaFNvdXJjZSgiIiksdGhpcy5zdGFja1Nsb3R8fHRoaXMuaW5saW5lU3RhY2subGVuZ3RofHx0aGlzLmNvbXBpbGVTdGFjay5sZW5ndGgpdGhyb3cgbmV3IGNbImRlZmF1bHQiXSgiQ29tcGlsZSBjb21wbGV0ZWQgd2l0aCBjb250ZW50IGxlZnQgb24gc3RhY2siKTt0aGlzLmRlY29yYXRvcnMuaXNFbXB0eSgpP3RoaXMuZGVjb3JhdG9ycz12b2lkIDA6KHRoaXMudXNlRGVjb3JhdG9ycz0hMCx0aGlzLmRlY29yYXRvcnMucHJlcGVuZCgidmFyIGRlY29yYXRvcnMgPSBjb250YWluZXIuZGVjb3JhdG9ycztcbiIpLHRoaXMuZGVjb3JhdG9ycy5wdXNoKCJyZXR1cm4gZm47IiksaT90aGlzLmRlY29yYXRvcnM9RnVuY3Rpb24uYXBwbHkodGhpcyxbImZuIiwicHJvcHMiLCJjb250YWluZXIiLCJkZXB0aDAiLCJkYXRhIiwiYmxvY2tQYXJhbXMiLCJkZXB0aHMiLHRoaXMuZGVjb3JhdG9ycy5tZXJnZSgpXSk6KHRoaXMuZGVjb3JhdG9ycy5wcmVwZW5kKCJmdW5jdGlvbihmbiwgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGgwLCBkYXRhLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4iKSx0aGlzLmRlY29yYXRvcnMucHVzaCgifVxuIiksdGhpcy5kZWNvcmF0b3JzPXRoaXMuZGVjb3JhdG9ycy5tZXJnZSgpKSk7dmFyIHU9dGhpcy5jcmVhdGVGdW5jdGlvbkNvbnRleHQoaSk7aWYodGhpcy5pc0NoaWxkKXJldHVybiB1O3ZhciBkPXtjb21waWxlcjp0aGlzLmNvbXBpbGVySW5mbygpLG1haW46dX07dGhpcy5kZWNvcmF0b3JzJiYoZC5tYWluX2Q9dGhpcy5kZWNvcmF0b3JzLGQudXNlRGVjb3JhdG9ycz0hMCk7dmFyIGg9dGhpcy5jb250ZXh0LHA9aC5wcm9ncmFtcyxmPWguZGVjb3JhdG9ycztmb3IoYT0wLGw9cC5sZW5ndGg7YTxsO2ErKylwW2FdJiYoZFthXT1wW2FdLGZbYV0mJihkW2ErIl9kIl09ZlthXSxkLnVzZURlY29yYXRvcnM9ITApKTtyZXR1cm4gdGhpcy5lbnZpcm9ubWVudC51c2VQYXJ0aWFsJiYoZC51c2VQYXJ0aWFsPSEwKSx0aGlzLm9wdGlvbnMuZGF0YSYmKGQudXNlRGF0YT0hMCksdGhpcy51c2VEZXB0aHMmJihkLnVzZURlcHRocz0hMCksdGhpcy51c2VCbG9ja1BhcmFtcyYmKGQudXNlQmxvY2tQYXJhbXM9ITApLHRoaXMub3B0aW9ucy5jb21wYXQmJihkLmNvbXBhdD0hMCksaT9kLmNvbXBpbGVyT3B0aW9ucz10aGlzLm9wdGlvbnM6KGQuY29tcGlsZXI9SlNPTi5zdHJpbmdpZnkoZC5jb21waWxlciksdGhpcy5zb3VyY2UuY3VycmVudExvY2F0aW9uPXtzdGFydDp7bGluZToxLGNvbHVtbjowfX0sZD10aGlzLm9iamVjdExpdGVyYWwoZCksZS5zcmNOYW1lPyhkPWQudG9TdHJpbmdXaXRoU291cmNlTWFwKHtmaWxlOmUuZGVzdE5hbWV9KSxkLm1hcD1kLm1hcCYmZC5tYXAudG9TdHJpbmcoKSk6ZD1kLnRvU3RyaW5nKCkpLGR9LHByZWFtYmxlOmZ1bmN0aW9uKCl7dGhpcy5sYXN0Q29udGV4dD0wLHRoaXMuc291cmNlPW5ldyBoWyJkZWZhdWx0Il0odGhpcy5vcHRpb25zLnNyY05hbWUpLHRoaXMuZGVjb3JhdG9ycz1uZXcgaFsiZGVmYXVsdCJdKHRoaXMub3B0aW9ucy5zcmNOYW1lKX0sY3JlYXRlRnVuY3Rpb25Db250ZXh0OmZ1bmN0aW9uKHQpe3ZhciBlPSIiLG49dGhpcy5zdGFja1ZhcnMuY29uY2F0KHRoaXMucmVnaXN0ZXJzLmxpc3QpO24ubGVuZ3RoPjAmJihlKz0iLCAiK24uam9pbigiLCAiKSk7dmFyIGk9MDtmb3IodmFyIHIgaW4gdGhpcy5hbGlhc2VzKXt2YXIgbz10aGlzLmFsaWFzZXNbcl07dGhpcy5hbGlhc2VzLmhhc093blByb3BlcnR5KHIpJiZvLmNoaWxkcmVuJiZvLnJlZmVyZW5jZUNvdW50PjEmJihlKz0iLCBhbGlhcyIrICsraSsiPSIrcixvLmNoaWxkcmVuWzBdPSJhbGlhcyIraSl9dmFyIHM9WyJjb250YWluZXIiLCJkZXB0aDAiLCJoZWxwZXJzIiwicGFydGlhbHMiLCJkYXRhIl07KHRoaXMudXNlQmxvY2tQYXJhbXN8fHRoaXMudXNlRGVwdGhzKSYmcy5wdXNoKCJibG9ja1BhcmFtcyIpLHRoaXMudXNlRGVwdGhzJiZzLnB1c2goImRlcHRocyIpO3ZhciBhPXRoaXMubWVyZ2VTb3VyY2UoZSk7cmV0dXJuIHQ/KHMucHVzaChhKSxGdW5jdGlvbi5hcHBseSh0aGlzLHMpKTp0aGlzLnNvdXJjZS53cmFwKFsiZnVuY3Rpb24oIixzLmpvaW4oIiwiKSwiKSB7XG4gICIsYSwifSJdKX0sbWVyZ2VTb3VyY2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5lbnZpcm9ubWVudC5pc1NpbXBsZSxuPSF0aGlzLmZvcmNlQnVmZmVyLGk9dm9pZCAwLHI9dm9pZCAwLG89dm9pZCAwLHM9dm9pZCAwO3JldHVybiB0aGlzLnNvdXJjZS5lYWNoKGZ1bmN0aW9uKHQpe3QuYXBwZW5kVG9CdWZmZXI/KG8/dC5wcmVwZW5kKCIgICsgIik6bz10LHM9dCk6KG8mJihyP28ucHJlcGVuZCgiYnVmZmVyICs9ICIpOmk9ITAscy5hZGQoIjsiKSxvPXM9dm9pZCAwKSxyPSEwLGV8fChuPSExKSl9KSxuP28/KG8ucHJlcGVuZCgicmV0dXJuICIpLHMuYWRkKCI7IikpOnJ8fHRoaXMuc291cmNlLnB1c2goJ3JldHVybiAiIjsnKToodCs9IiwgYnVmZmVyID0gIisoaT8iIjp0aGlzLmluaXRpYWxpemVCdWZmZXIoKSksbz8oby5wcmVwZW5kKCJyZXR1cm4gYnVmZmVyICsgIikscy5hZGQoIjsiKSk6dGhpcy5zb3VyY2UucHVzaCgicmV0dXJuIGJ1ZmZlcjsiKSksdCYmdGhpcy5zb3VyY2UucHJlcGVuZCgidmFyICIrdC5zdWJzdHJpbmcoMikrKGk/IiI6IjtcbiIpKSx0aGlzLnNvdXJjZS5tZXJnZSgpfSxibG9ja1ZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYWxpYXNhYmxlKCJoZWxwZXJzLmJsb2NrSGVscGVyTWlzc2luZyIpLG49W3RoaXMuY29udGV4dE5hbWUoMCldO3RoaXMuc2V0dXBIZWxwZXJBcmdzKHQsMCxuKTt2YXIgaT10aGlzLnBvcFN0YWNrKCk7bi5zcGxpY2UoMSwwLGkpLHRoaXMucHVzaCh0aGlzLnNvdXJjZS5mdW5jdGlvbkNhbGwoZSwiY2FsbCIsbikpfSxhbWJpZ3VvdXNCbG9ja1ZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5hbGlhc2FibGUoImhlbHBlcnMuYmxvY2tIZWxwZXJNaXNzaW5nIiksZT1bdGhpcy5jb250ZXh0TmFtZSgwKV07dGhpcy5zZXR1cEhlbHBlckFyZ3MoIiIsMCxlLCEwKSx0aGlzLmZsdXNoSW5saW5lKCk7dmFyIG49dGhpcy50b3BTdGFjaygpO2Uuc3BsaWNlKDEsMCxuKSx0aGlzLnB1c2g=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("LGkpO2EmJihyW29dPWEpfX1yZXR1cm4gcn1mdW5jdGlvbiBoKHQsZSxuLGkpe2lmKG49bnx8ZSxuPW0uY2xvbmUobiksQXJyYXkuaXNBcnJheShuKSl7Zm9yKHZhciByPVtdLG89MCxzPW4ubGVuZ3RoO288cztvKyspci5wdXNoKGgodCxlLG5bb10saSkpO3JldHVybiByfXZhciBhPW4uX2VtYmVkZGVkfHx7fTtmb3IodmFyIGwgaW4gYSlhLmhhc093blByb3BlcnR5KGwpJiYobS5pc09iamVjdChhW2xdKXx8QXJyYXkuaXNBcnJheShhW2xdKSkmJihhW2xdPWgodCxlLGFbbF0saSkpO3ZhciBjPWQodCxlLG4saSk7cmV0dXJuIG0uZXh0ZW5kKGEsYyksbj1tLm9taXQobiwiX2VtYmVkZGVkIiwiX2xpbmtzIiksbS5leHRlbmQobixhKSxufWZ1bmN0aW9uIHAodCxlKXtlJiYodGhpcy5kYXRhPWUsbS5leHRlbmQodGhpcyxoKHQsZSxlLHt9KSksZGVsZXRlIHRoaXMuc3RhdGVUb2tlbiwiUkVDT1ZFUllfQ0hBTExFTkdFIiE9PWUuc3RhdHVzfHxlLl9saW5rc3x8KHRoaXMuY2FuY2VsPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBfKG5ldyBwKHQpKX0pKX12YXIgZj1uKDM0MCksbT1uKDMzOCksXz1uKDM0NiksZz1uKDM0NCksdj1uKDM0OCkseT1uKDM0NSk7dC5leHBvcnRzPXt0cmFuc2FjdGlvblN0YXR1czpvLHJlc3VtZVRyYW5zYWN0aW9uOnMsdHJhbnNhY3Rpb25FeGlzdHM6YSxwb3N0VG9UcmFuc2FjdGlvbjpsfX0sZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCxlKXtlPWV8fHt9O3ZhciBuPWUudXJsLGk9ZS5tZXRob2Qscj1lLmFyZ3Msbz1lLnNhdmVBdXRoblN0YXRlLGg9ZS5hY2Nlc3NUb2tlbixwPWwuZ2V0SHR0cENhY2hlKCk7aWYoZS5jYWNoZVJlc3BvbnNlKXt2YXIgZj1wLmdldFN0b3JhZ2UoKSxtPWZbbl07aWYobSYmRGF0ZS5ub3coKS8xZTM8bS5leHBpcmVzQXQpcmV0dXJuIGMucmVzb2x2ZShtLnJlc3BvbnNlKX12YXIgXz17QWNjZXB0OiJhcHBsaWNhdGlvbi9qc29uIiwiQ29udGVudC1UeXBlIjoiYXBwbGljYXRpb24vanNvbiIsIlgtT2t0YS1Vc2VyLUFnZW50LUV4dGVuZGVkIjoib2t0YS1hdXRoLWpzLSIrZC5TREtfVkVSU0lPTn07cy5leHRlbmQoXyx0Lm9wdGlvbnMuaGVhZGVyc3x8e30pLGgmJnMuaXNTdHJpbmcoaCkmJihfLkF1dGhvcml6YXRpb249IkJlYXJlciAiK2gpO3ZhciBnLHYseT17aGVhZGVyczpfLGRhdGE6cnx8dm9pZCAwfTtyZXR1cm4gbmV3IGModC5vcHRpb25zLmFqYXhSZXF1ZXN0KGksbix5KSkudGhlbihmdW5jdGlvbih0KXtyZXR1cm4gdj10LnJlc3BvbnNlVGV4dCx2JiZzLmlzU3RyaW5nKHYpJiYodj1KU09OLnBhcnNlKHYpKSxvJiYodi5zdGF0ZVRva2VufHxhLmRlbGV0ZUNvb2tpZShkLlNUQVRFX1RPS0VOX0NPT0tJRV9OQU1FKSksdiYmdi5zdGF0ZVRva2VuJiZ2LmV4cGlyZXNBdCYmYS5zZXRDb29raWUoZC5TVEFURV9UT0tFTl9DT09LSUVfTkFNRSx2LnN0YXRlVG9rZW4sdi5leHBpcmVzQXQpLHYmJmUuY2FjaGVSZXNwb25zZSYmcC51cGRhdGVTdG9yYWdlKG4se2V4cGlyZXNBdDpNYXRoLmZsb29yKERhdGUubm93KCkvMWUzKStkLkRFRkFVTFRfQ0FDSEVfRFVSQVRJT04scmVzcG9uc2U6dn0pLHZ9KS5mYWlsKGZ1bmN0aW9uKGUpe3ZhciBuPWUucmVzcG9uc2VUZXh0fHx7fTtpZihzLmlzU3RyaW5nKG4pKXRyeXtuPUpTT04ucGFyc2Uobil9Y2F0Y2goaSl7bj17ZXJyb3JTdW1tYXJ5OiJVbmtub3duIGVycm9yIn19dGhyb3cgZS5zdGF0dXM+PTUwMCYmKG4uZXJyb3JTdW1tYXJ5PSJVbmtub3duIGVycm9yIiksdC5vcHRpb25zLnRyYW5zZm9ybUVycm9yWEhSJiYoZT10Lm9wdGlvbnMudHJhbnNmb3JtRXJyb3JYSFIocy5jbG9uZShlKSkpLGc9bmV3IHUobixlKSwiRTAwMDAwMTEiPT09Zy5lcnJvckNvZGUmJmEuZGVsZXRlQ29va2llKGQuU1RBVEVfVE9LRU5fQ09PS0lFX05BTUUpLGd9KX1mdW5jdGlvbiByKHQsZSxuKXtlPXMuaXNBYnNvbHV0ZVVybChlKT9lOnQub3B0aW9ucy51cmwrZTt2YXIgcj17dXJsOmUsbWV0aG9kOiJHRVQifTtyZXR1cm4gcy5leHRlbmQocixuKSxpKHQscil9ZnVuY3Rpb24gbyh0LGUsbixyKXtlPXMuaXNBYnNvbHV0ZVVybChlKT9lOnQub3B0aW9ucy51cmwrZTt2YXIgbz17dXJsOmUsbWV0aG9kOiJQT1NUIixhcmdzOm4sc2F2ZUF1dGhuU3RhdGU6ITB9O3JldHVybiBzLmV4dGVuZChvLHIpLGkodCxvKX12YXIgcz1uKDMzOCksYT1uKDM0MSksbD1uKDM0MiksYz1uKDM0NiksdT1uKDM0NyksZD1uKDM0NSk7dC5leHBvcnRzPXtnZXQ6cixwb3N0Om8saHR0cFJlcXVlc3Q6aX19LGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQsZSxuKXt2YXIgcj0iIjtuJiYocj0iIGV4cGlyZXM9IitzLmlzb1RvVVRDU3RyaW5nKG4pKyI7Iik7dmFyIG89dCsiPSIrZSsiOyBwYXRoPS87IityO3JldHVybiBpLl9zZXREb2N1bWVudENvb2tpZShvKSxvfWZ1bmN0aW9uIHIodCl7dmFyIGU9bmV3IFJlZ0V4cCh0KyI9KFteO10qKSIpLG49ci5fZ2V0RG9jdW1lbnRDb29raWUoKS5tYXRjaChlKTtpZihuKXt2YXIgaT1uWzFdO3JldHVybiBpfX1mdW5jdGlvbiBvKHQpe2kodCwiIiwiMTk3MC0wMS0wMVQwMDowMDowMFoiKX12YXIgcz1uKDMzOCk7aS5fc2V0RG9jdW1lbnRDb29raWU9ZnVuY3Rpb24odCl7ZG9jdW1lbnQuY29va2llPXR9LHIuX2dldERvY3VtZW50Q29va2llPWZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmNvb2tpZX0sdC5leHBvcnRzPXtzZXRDb29raWU6aSxnZXRDb29raWU6cixkZWxldGVDb29raWU6b319LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDM0MSkscj1uKDM0Myksbz1uKDM0NSkscz17fTtzLmJyb3dzZXJIYXNMb2NhbFN0b3JhZ2U9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuISFzLmdldExvY2FsU3RvcmFnZSgpfWNhdGNoKHQpe3JldHVybiExfX0scy5icm93c2VySGFzU2Vzc2lvblN0b3JhZ2U9ZnVuY3Rpb24oKXt0cg==", "base64"));
  res.write(new Buffer("eXtyZXR1cm4hIXMuZ2V0U2Vzc2lvblN0b3JhZ2UoKX1jYXRjaCh0KXtyZXR1cm4hMX19LHMuZ2V0SHR0cENhY2hlPWZ1bmN0aW9uKCl7cmV0dXJuIHMuYnJvd3Nlckhhc0xvY2FsU3RvcmFnZSgpP3Iocy5nZXRMb2NhbFN0b3JhZ2UoKSxvLkNBQ0hFX1NUT1JBR0VfTkFNRSk6cy5icm93c2VySGFzU2Vzc2lvblN0b3JhZ2UoKT9yKHMuZ2V0U2Vzc2lvblN0b3JhZ2UoKSxvLkNBQ0hFX1NUT1JBR0VfTkFNRSk6cihzLmdldENvb2tpZVN0b3JhZ2UoKSxvLkNBQ0hFX1NUT1JBR0VfTkFNRSl9LHMuZ2V0TG9jYWxTdG9yYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIGxvY2FsU3RvcmFnZX0scy5nZXRTZXNzaW9uU3RvcmFnZT1mdW5jdGlvbigpe3JldHVybiBzZXNzaW9uU3RvcmFnZX0scy5nZXRDb29raWVTdG9yYWdlPWZ1bmN0aW9uKCl7cmV0dXJue2dldEl0ZW06aS5nZXRDb29raWUsc2V0SXRlbTpmdW5jdGlvbih0LGUpe2kuc2V0Q29va2llKHQsZSwiMjAzOC0wMS0xOVQwMzoxNDowNy4wMDBaIil9fX0sdC5leHBvcnRzPXN9LGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQsZSl7ZnVuY3Rpb24gbigpe3ZhciBuPXQuZ2V0SXRlbShlKTtuPW58fCJ7fSI7dHJ5e3JldHVybiBKU09OLnBhcnNlKG4pfWNhdGNoKGkpe3Rocm93IG5ldyByKCJVbmFibGUgdG8gcGFyc2Ugc3RvcmFnZSBzdHJpbmc6ICIrZSl9fWZ1bmN0aW9uIGkobil7dHJ5e3ZhciBpPUpTT04uc3RyaW5naWZ5KG4pO3Quc2V0SXRlbShlLGkpfWNhdGNoKG8pe3Rocm93IG5ldyByKCJVbmFibGUgdG8gc2V0IHN0b3JhZ2U6ICIrZSl9fWZ1bmN0aW9uIG8odCl7dHx8aSh7fSk7dmFyIGU9bigpO2RlbGV0ZSBlW3RdLGkoZSl9ZnVuY3Rpb24gcyh0LGUpe3ZhciByPW4oKTtyW3RdPWUsaShyKX1yZXR1cm57Z2V0U3RvcmFnZTpuLHNldFN0b3JhZ2U6aSxjbGVhclN0b3JhZ2U6byx1cGRhdGVTdG9yYWdlOnN9fXZhciByPW4oMzQ0KTt0LmV4cG9ydHM9aX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7dGhpcy5uYW1lPSJBdXRoU2RrRXJyb3IiLHRoaXMubWVzc2FnZT10LHRoaXMuZXJyb3JDb2RlPSJJTlRFUk5BTCIsdGhpcy5lcnJvclN1bW1hcnk9dCx0aGlzLmVycm9yTGluaz0iSU5URVJOQUwiLHRoaXMuZXJyb3JJZD0iSU5URVJOQUwiLHRoaXMuZXJyb3JDYXVzZXM9W10sZSYmKHRoaXMueGhyPWUpfW4ucHJvdG90eXBlPW5ldyBFcnJvcix0LmV4cG9ydHM9bn0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e1NUQVRFX1RPS0VOX0NPT0tJRV9OQU1FOiJva3RhU3RhdGVUb2tlbiIsREVGQVVMVF9QT0xMSU5HX0RFTEFZOjUwMCxERUZBVUxUX01BWF9DTE9DS19TS0VXOjMwMCxERUZBVUxUX0NBQ0hFX0RVUkFUSU9OOjg2NDAwLEZSQU1FX0lEOiJva3RhLW9hdXRoLWhlbHBlci1mcmFtZSIsUkVESVJFQ1RfT0FVVEhfUEFSQU1TX0NPT0tJRV9OQU1FOiJva3RhLW9hdXRoLXJlZGlyZWN0LXBhcmFtcyI=", "base64"));
  res.write(new Buffer("LFJFRElSRUNUX1NUQVRFX0NPT0tJRV9OQU1FOiJva3RhLW9hdXRoLXN0YXRlIixSRURJUkVDVF9OT05DRV9DT09LSUVfTkFNRToib2t0YS1vYXV0aC1ub25jZSIsVE9LRU5fU1RPUkFHRV9OQU1FOiJva3RhLXRva2VuLXN0b3JhZ2UiLENBQ0hFX1NUT1JBR0VfTkFNRToib2t0YS1jYWNoZS1zdG9yYWdlIixTREtfVkVSU0lPTjoiMS44LjAifX0sZnVuY3Rpb24odCxlLG4pey8qIQoJCSAqCgkJICogQ29weXJpZ2h0IDIwMDktMjAxMiBLcmlzIEtvd2FsIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUCgkJICogbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS9yYXcvbWFzdGVyL0xJQ0VOU0UKCQkgKgoJCSAqIFdpdGggcGFydHMgYnkgVHlsZXIgQ2xvc2UKCQkgKiBDb3B5cmlnaHQgMjAwNy0yMDA5IFR5bGVyIENsb3NlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIFggbGljZW5zZSBmb3VuZAoJCSAqIGF0IGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UuaHRtbAoJCSAqIEZvcmtlZCBhdCByZWZfc2VuZC5qcyB2ZXJzaW9uOiAyMDA5LTA1LTExCgkJICoKCQkgKiBXaXRoIHBhcnRzIGJ5IE1hcmsgTWlsbGVyCgkJICogQ29weXJpZ2h0IChDKSAyMDExIEdvb2dsZSBJbmMuCgkJICoKCQkgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKCQkgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCgkJICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CgkJICoKCQkgKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCQkgKgoJCSAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKCQkgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoJCSAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoJCSAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKCQkgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCQkgKgoJCSAqLwoJIWZ1bmN0aW9uKGUpeyJ1c2Ugc3RyaWN0IjtpZigiZnVuY3Rpb24iPT10eXBlb2YgYm9vdHN0cmFwKWJvb3RzdHJhcCgicHJvbWlzZSIsZSk7ZWxzZXt0LmV4cG9ydHM9ZSgpfX0oZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gRy5hcHBseSh0LGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGUodCl7cmV0dXJuIHQ9PT1PYmplY3QodCl9ZnVuY3Rpb24gbih0KXtyZXR1cm4iW29iamVjdCBTdG9wSXRlcmF0aW9uXSI9PT1udCh0KXx8dCBpbnN0YW5jZW9mIEJ9ZnVuY3Rpb24gaSh0LGUpe2lmKHomJmUuc3RhY2smJiJvYmplY3QiPT10eXBlb2YgdCYmbnVsbCE9PXQmJnQuc3RhY2smJnQuc3RhY2suaW5kZXhPZihpdCk9PT0tMSl7Zm9yKHZhciBuPVtdLGk9ZTtpO2k9aS5zb3VyY2UpaS5zdGFjayYmbi51bnNoaWZ0KGkuc3RhY2spO24udW5zaGlmdCh0LnN0YWNrKTt2YXIgbz1uLmpvaW4oIlxuIitpdCsiXG4iKTt0LnN0YWNrPXIobyl9fWZ1bmN0aW9uIHIodCl7Zm9yKHZhciBlPXQuc3BsaXQoIlxuIiksbj1bXSxpPTA7aTxlLmxlbmd0aDsrK2kpe3ZhciByPWVbaV07YShyKXx8byhyKXx8IXJ8fG4ucHVzaChyKX1yZXR1cm4gbi5qb2luKCJcbiIpfWZ1bmN0aW9uIG8odCl7cmV0dXJuIHQuaW5kZXhPZigiKG1vZHVsZS5qczoiKSE9PS0xfHx0LmluZGV4T2YoIihub2RlLmpzOiIpIT09LTF9ZnVuY3Rpb24gcyh0KXt2YXIgZT0vYXQgLisgXCgoLispOihcZCspOig/OlxkKylcKSQvLmV4ZWModCk7aWYoZSlyZXR1cm5bZVsxXSxOdW1iZXIoZVsyXSldO3ZhciBuPS9hdCAoW14gXSspOihcZCspOig/OlxkKykkLy5leGVjKHQpO2lmKG4pcmV0dXJuW25bMV0sTnVtYmVyKG5bMl0pXTt2YXIgaT0vLipAKC4rKTooXGQrKSQvLmV4ZWModCk7cmV0dXJuIGk/W2lbMV0sTnVtYmVyKGlbMl0pXTp2b2lkIDB9ZnVuY3Rpb24gYSh0KXt2YXIgZT1zKHQpO2lmKCFlKXJldHVybiExO3ZhciBuPWVbMF0saT1lWzFdO3JldHVybiBuPT09VyYmaT49ViYmaTw9bHR9ZnVuY3Rpb24gbCgpe2lmKHopdHJ5e3Rocm93IG5ldyBFcnJvcn1jYXRjaCh0KXt2YXIgZT10LnN0YWNrLnNwbGl0KCJcbiIpLG49ZVswXS5pbmRleE9mKCJAIik+MD9lWzFdOmVbMl0saT1zKG4pO2lmKCFpKXJldHVybjtyZXR1cm4gVz1pWzBdLGlbMV19fWZ1bmN0aW9uIGModCxlLG4pe3JldHVybiBmdW5jdGlvbigpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgY29uc29sZSYmImZ1bmN0aW9uIj09dHlwZW9mIGNvbnNvbGUud2FybiYmY29uc29sZS53YXJuKGUrIiBpcyBkZXByZWNhdGVkLCB1c2UgIituKyIgaW5zdGVhZC4iLG5ldyBFcnJvcigiIikuc3RhY2spLHQuYXBwbHkodCxhcmd1bWVudHMpfX1mdW5jdGlvbiB1KHQpe3JldHVybiB0IGluc3RhbmNlb2YgZj90OnYodCk/eCh0KTpMKHQpfWZ1bmN0aW9uIGQoKXtmdW5jdGlvbiB0KHQpe2U9dCxvLnNvdXJjZT10LEoobixmdW5jdGlvbihlLG4pe3UubmV4dFRpY2soZnVuY3Rpb24oKXt0LnByb21pc2VEaXNwYXRjaC5hcHBseSh0LG4pfSl9LHZvaWQgMCksbj12b2lkIDAsaT12b2lkIDB9dmFyIGUsbj1bXSxpPVtdLHI9WihkLnByb3RvdHlwZSksbz1aKGYucHJvdG90eXBlKTtpZihvLnByb21pc2VEaXNwYXRjaD1mdW5jdGlvbih0LHIsbyl7dmFyIHM9Syhhcmd1bQ==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("KSxuKDQ2Niksbig0NjcpLG4oNTE1KSxuKDQ2NildLHI9ZnVuY3Rpb24odCxlLG4saSxyLG8scyxhLGwsYyx1LGQsaCxwKXt2YXIgZj11LG09ZCxfPWgsZz1wO3JldHVybntCYWNrYm9uZTp0LCQ6ZSxfOm4sbW9tZW50OnIsbW9tZW50VHo6byxIYW5kbGViYXJzOmksbG9jOl8uU3RyaW5nVXRpbC5sb2NhbGl6ZSxjcmVhdGVCdXR0b246Xy5CdXR0b25GYWN0b3J5LmNyZWF0ZSxjcmVhdGVDYWxsb3V0OmcuY29tcG9uZW50cy5DYWxsb3V0LmNyZWF0ZSx0cGw6Xy5UZW1wbGF0ZVV0aWwudHBsLE1vZGVsOnMsQmFzZU1vZGVsOmEsQ29sbGVjdGlvbjpsLFZpZXc6Zy5CYXNlVmlldyxMaXN0VmlldzpnLkxpc3RWaWV3LFRhYmxlVmlldzpnLlRhYmxlVmlldyxSb3V0ZXI6Xy5CYXNlUm91dGVyLFRhYmJlZFJvdXRlcjpfLlRhYmJlZFJvdXRlcixDb250cm9sbGVyOl8uQmFzZUNvbnRyb2xsZXIsRGF0YUxpc3RDb250cm9sbGVyOl8uRGF0YUxpc3RDb250cm9sbGVyLERhdGFMaXN0OmcuZGF0YWxpc3QuRGVhZFNpbXBsZURhdGFMaXN0LE1vZGFsRGlhbG9nOmcuY29tcG9uZW50cy5CYXNlTW9kYWxEaWFsb2csTXVsdGlWaWV3TW9kYWxEaWFsb2c6Zy5jb21wb25lbnRzLk11bHRpVmlld01vZGFsRGlhbG9nLEZvcm06Zy5mb3Jtcy5CYXNlRm9ybSxGb3JtRGlhbG9nOmcuY29tcG9uZW50cy5CYXNlRm9ybURpYWxvZyxEcm9wRG93bjpnLmNvbXBvbmVudHMuRHJvcERvd24sV2l6YXJkOmMsTG9nZ2VyOl8uTG9nZ2VyLE1ldHJpY3M6Xy5NZXRyaWNzLGludGVybmFsOntmcmFtZXdvcms6Zix1dGlsOl8sdmlld3M6Zyxtb2RlbHM6bX19fS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzI4KSxuKDM1OSldLHI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5leHRlbmQoe3NlY3VyZUpTT046ITEsY29uc3RydWN0b3I6ZnVuY3Rpb24oKXt0LnJlc3VsdCh0aGlzLCJzZWN1cmVKU09OIikmJih0aGlzLnN5bmM9dC53cmFwKHRoaXMuc3luYyxmdW5jdGlvbihlLG4saSxyKXtyZXR1cm4gZS5jYWxsKHRoaXMsbixpLHQuZXh0ZW5kKHtkYXRhVHlwZToic2VjdXJlSlNPTiJ9LHIpKX0pKSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KX0uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbih0LGUsbil7dmFyIGkscixvOyJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fTshZnVuY3Rpb24ocyxhKXtyPVtuKDMyOCksbigzNjApXSxpPWEsbz0iZnVuY3Rpb24iPT10eXBlb2YgaT9pLmFwcGx5KGUscik6aSwhKHZvaWQgMCE9PW8mJih0LmV4cG9ydHM9bykpfSh2b2lkIDAsZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSl7dHJ5e3ZhciBuPW8oZS5nZXRSZXNwb25zZUhlYWRlcigibGluayIpKTt0W3NdLnNldCh1LCEwKSx0LnNldFBhZ2luYXRpb24obi5uZXh0LmhyZWYpfWNhdGNoKGkpe3Rbc10uZ2V0KHUpJiZ0LnNldFBhZ2luYXRpb24obnVsbCl9fWZ1bmN0aW9uIGkodCl7Zm9yKHZhciBlPXt9LG49dCYmdC5zcGxpdCgiPyIpWzFdLGk9biYmZGVjb2RlVVJJQ29tcG9uZW50KG4uc3BsaXQoIiMiKVswXSkucmVwbGFjZSgvXCsvZywiICIpLHI9aT9pLnNwbGl0KCImIik6W10sbz0wO288ci5sZW5ndGg7bysrKXt2YXIgcz1yW29dLnNwbGl0KCI9Iik7ZVtzLnNoaWZ0KCldPXMuam9pbigiPSIpfXJldHVybiBlfWZ1bmN0aW9uIHIodCl7cmV0dXJuJyInPT10LmNoYXJBdCgwKSYmJyInPT10LmNoYXJBdCh0Lmxlbmd0aC0xKT90LnN1YnN0cmluZygxLHQubGVuZ3RoLTEpOnR9ZnVuY3Rpb24gbyh0KXtmb3IodmFyIGU9LzxbXj5dKj5ccyooXHMqO1xzKlteXChcKTw+QCw7OiJcL1xbXF1cPz17fSBcdF0rPSgoW15cKFwpPD5ALDs6IlwvXFtcXVw/PXt9IFx0XSspfCgiW14iXSoiKSkpKigsfCQpL2csbj0vW15cKFwpPD5ALDs6IlwvXFtcXVw/PXt9IFx0XSs9KChbXlwoXCk8PkAsOzoiXC9cW1xdXD89e30gXHRdKyl8KCJbXiJdKiIpKS9nLGk9dC5tYXRjaChlKSxvPXt9LHM9MDtzPGkubGVuZ3RoO3MrKyl7dmFyIGE9aVtzXS5zcGxpdCgiPiIpLGw9YVswXS5zdWJzdHJpbmcoMSksYz17fTtjLmhyZWY9bDtmb3IodmFyIHU9YVsxXS5tYXRjaChuKSxkPTA7ZDx1Lmxlbmd0aDtkKyspe3ZhciBoPXVbZF0uc3BsaXQoIj0iKSxwPWhbMF07Y1twXT1yKGhbMV0pfXZvaWQgMCE9PWMucmVsJiYob1tjLnJlbF09Yyl9cmV0dXJuIG99dmFyIHM9Il9fU1RBVEVfXyIsYT0iRkVUQ0hfREFUQSIsbD0iUEFHSU5BVElPTl9EQVRBIixjPSJERUZBVUxUX1BBUkFNUyIsdT0iTElOS19CWV9IRUFERVIiLGQ9IlhIUiI7cmV0dXJuIGUuQ29sbGVjdGlvbi5leHRlbmQoe3BhcmFtczp7fSxjb25zdHJ1Y3RvcjpmdW5jdGlvbihuLGkpe3ZhciByPXRoaXNbc109bmV3IGUuTW9kZWw7ci5zZXQoYyx0LmRlZmF1bHRzKGkmJmkucGFyYW1zfHx7fSx0aGlzLnBhcmFtc3x8e30pKSxlLkNvbGxlY3Rpb24uYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzeW5jOmZ1bmN0aW9uKHQsaSxyKXt2YXIgbz10aGlzLHM9ci5zdWNjZXNzO3JldHVybiByLnN1Y2Nlc3M9ZnVuY3Rpb24odCxlLGkpe24obyxpKSxzLmFwcGx5KG51bGwsYXJndW1lbnRzKX0sZS5Db2xsZWN0aW9uLnByb3RvdHlwZS5zeW5jLmNhbGwodGhpcyx0LGkscil9LGZldGNoOmZ1bmN0aW9uKG4pe258fChuPXt9KTt2YXIgaT10aGlzW3NdLHI9aS5nZXQoZCk7cmV0dXJuIG4uZGF0YT10LmV4dGVuZCh7fSxpLmdldChjKSxuLmRhdGF8fHt9KSxuLmZyb21GZXRjaD0hMCxpLnNldChhLG4uZGF0YSksciYmci5hYm9ydCYmbi5hYm9ydCE9PSExJiZyLmFib3J0KCkscj1lLkNvbGxlY3Rpb24ucHJvdG90eXBlLmZldGNoLmNhbGwodGhpcyxuKSxpLnNldChkLHIpLHJ9LHNldFBhZ2luYXRpb246ZnVuY3Rpb24oZSxuKXt0LmlzU3RyaW5nKGUpJiZlJiYoZT1pKGUpKSx0LmlzT2JqZWN0KGUpJiYhdC5pc0FycmF5KGUpJiZ0LnNpemUoZSk/biYmbi5mcm9tRmV0Y2gmJihlPXQuZXh0ZW5kKHt9LHRoaXMuZ2V0RmV0Y2hEYXRhKCksZSkpOmU9bnVsbCx0aGlzW3NdLnNldChsLGUpfSxnZXRGZXRjaERhdGE6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tzXS5nZXQoYSl8fHt9fSxnZXRQYWdpbmF0aW9uRGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzW3NdLmdldChsKXx8e319LGhhc01vcmU6ZnVuY3Rpb24oKXtyZXR1cm4gdC5zaXplKHRoaXMuZ2V0UGFnaW5hdGlvbkRhdGEoKSk+MH0sZmV0Y2hNb3JlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuaGFzTW9yZSgpKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCBSZXF1ZXN0Iik7cmV0dXJuIHRoaXMuZmV0Y2goe2RhdGE6dGhpcy5nZXRQYWdpbmF0aW9uRGF0YSgpLGFkZDohMCxyZW1vdmU6ITEsdXBkYXRlOiEwfSl9LHJlc2V0OmZ1bmN0aW9uKHQsbil7cmV0dXJuIG58fChuPXt9KSxuLmZyb21GZXRjaHx8dGhpcy5zZXRQYWdpbmF0aW9uKG51bGwpLGUuQ29sbGVjdGlvbi5wcm90b3R5cGUucmVzZXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSx3aGVyZTpmdW5jdGlvbihlLG4pe3JldHVybiB0LmlzRW1wdHkoZSk/bj92b2lkIDA6W106dGhpc1tuPyJmaW5kIjoiZmlsdGVyIl0oZnVuY3Rpb24odCl7Zm9yKHZhciBuIGluIGUpaWYoZVtuXSE9PXQuZ2V0KG4pKXJldHVybiExO3JldHVybiEwfSl9LGNyZWF0ZTpmdW5jdGlvbihuLGkpe3JldHVybiBpfHwoaT17fSksdC5yZXN1bHQobiwidXJsUm9vdCIpfHwoaS51cmw9dC5yZXN1bHQodGhpcywidXJsIikpLGUuQ29sbGVjdGlvbi5wcm90b3R5cGUuY3JlYXRlLmNhbGwodGhpcyxuLGkpfX0pfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyOyhmdW5jdGlvbihvKXsKCS8vICAgICAoYykgMjAxMC0yMDE1IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzCgkvLyAgICAgQmFja2JvbmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgkhZnVuY3Rpb24ocyl7dmFyIGE9Im9iamVjdCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PXNlbGYmJnNlbGZ8fCJvYmplY3QiPT10eXBlb2YgbyYmby5nbG9iYWw9PW8mJm87aT1bbigzMjkpLG4oMzMyKSxlXSxyPWZ1bmN0aW9uKHQsZSxuKXthLkJhY2tib25lPXMoYSxuLHQsZSl9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0oZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC5CYWNrYm9uZSxvPVtdLnNsaWNlO2UuVkVSU0lPTj0iMS4yLjEiLGUuJD1pLGUubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiB0LkJhY2tib25lPXIsdGhpc30sZS5lbXVsYXRlSFRUUD0hMSxlLmVtdWxhdGVKU09OPSExO3ZhciBzPWZ1bmN0aW9uKHQsZSxpKXtzd2l0Y2godCl7Y2FzZSAxOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuW2VdKHRoaXNbaV0pfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBuW2VdKHRoaXNbaV0sdCl9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24odCxyKXtyZXR1cm4gbltlXSh0aGlzW2ldLHQscil9O2Nhc2UgNDpyZXR1cm4gZnVuY3Rpb24odCxyLG8pe3JldHVybiBuW2VdKHRoaXNbaV0sdCxyLG8pfTtkZWZhdWx0OnJldHVybiBmdW5jdGlvbigpe3ZhciB0PW8uY2FsbChhcmd1bWVudHMpO3JldHVybiB0LnVuc2hpZnQodGhpc1tpXSksbltlXS5hcHBseShuLHQpfX19LGE9ZnVuY3Rpb24odCxlLGkpe24uZWFjaChlLGZ1bmN0aW9uKGUscil7bltyXSYmKHQucHJvdG90eXBlW3JdPXMoZSxyLGkpKX0pfSxsPWUuRXZlbnRzPXt9LGM9L1xzKy8sdT1mdW5jdGlvbih0LGUsaSxyLG8pe3ZhciBzLGE9MDtpZihpJiYib2JqZWN0Ij09dHlwZW9mIGkpe3ZvaWQgMCE9PXImJiJjb250ZXh0ImluIG8mJnZvaWQgMD09PW8uY29udGV4dCYmKG8uY29udGV4dD1yKTtmb3Iocz1uLmtleXMoaSk7YTxzLmxlbmd0aDthKyspZT10KGUsc1thXSxpW3NbYV1dLG8pfWVsc2UgaWYoaSYmYy50ZXN0KGkpKWZvcihzPWkuc3BsaXQoYyk7YTxzLmxlbmd0aDthKyspZT10KGUsc1thXSxyLG8pO2Vsc2UgZT10KGUsaSxyLG8pO3JldHVybiBlfTtsLm9uPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZCh0aGlzLHQsZSxuKX07dmFyIGQ9ZnVuY3Rpb24odCxlLG4saSxyKXtpZih0Ll9ldmVudHM9dShoLHQuX2V2ZW50c3x8e30sZSxuLHtjb250ZXh0OmksY3R4OnQsbGlzdGVuaW5nOnJ9KSxyKXt2YXIgbz10Ll9saXN0ZW5lcnN8fCh0Ll9saXN0ZW5lcnM9e30pO29bci5pZF09cn1yZXR1cm4gdH07bC5saXN0ZW5Ubz1mdW5jdGlvbih0LGUsaSl7aWYoIXQpcmV0dXJuIHRoaXM7dmFyIHI9dC5fbGlzdGVuSWR8fCh0Ll9saXN0ZW5JZD1uLnVuaXF1ZUlkKCJsIikpLG89dGhpcy5fbGlzdGVuaW5nVG98fCh0aGlzLl9saXN0ZW5pbmdUbz17fSkscz1vW3JdO2lmKCFzKXt2YXIgYT10aGlzLl9saXN0ZW5JZHx8KHRoaXMuX2xpc3RlbklkPW4udW5pcXVlSWQoImwiKSk7cz1vW3JdPXtvYmo6dCxvYmpJZDpyLGlkOmEsbGlzdGVuaW5nVG86byxjb3VudDowfX1yZXR1cm4gZCh0LGUsaSx0aGlzLHMpLHRoaXN9O3ZhciBoPWZ1bmN0aW9uKHQsZSxuLGkpe2lmKG4pe3ZhciByPXRbZV18fCh0W2VdPVtdKSxvPWkuY29udGV4dCxzPWkuY3R4LGE9aS5saXN0ZW5pbmc7YSYmYS5jb3VudCsrLHIucHVzaCg=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("aV09ZS5wYXJzZVR3b0RpZ2l0WWVhcih0KX0pLHR0KCJZIixmdW5jdGlvbih0LGUpe2VbRGldPXBhcnNlSW50KHQsMTApfSksZS5wYXJzZVR3b0RpZ2l0WWVhcj1mdW5jdGlvbih0KXtyZXR1cm4geSh0KSsoeSh0KT42OD8xOTAwOjJlMyl9O3ZhciBKaT1GKCJGdWxsWWVhciIsITEpO2UuSVNPXzg2MDE9ZnVuY3Rpb24oKXt9O3ZhciBYaT1NKCJtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE1NDgiLGZ1bmN0aW9uKCl7dmFyIHQ9UnQuYXBwbHkobnVsbCxhcmd1bWVudHMpO3JldHVybiB0aGlzLmlzVmFsaWQoKSYmdC5pc1ZhbGlkKCk/dDx0aGlzP3RoaXM6dDpwKCl9KSxRaT1NKCJtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE1NDgiLGZ1bmN0aW9uKCl7dmFyIHQ9UnQuYXBwbHkobnVsbCxhcmd1bWVudHMpO3JldHVybiB0aGlzLmlzVmFsaWQoKSYmdC5pc1ZhbGlkKCk/dD50aGlzP3RoaXM6dDpwKCl9KSxaaT1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdz9EYXRlLm5vdygpOituZXcgRGF0ZX07V3QoIloiLCI6IiksV3QoIlpaIiwiIiksSigiWiIsa2kpLEooIlpaIixraSksdHQoWyJaIiwiWloiXSxmdW5jdGlvbih0LGUsbil7bi5fdXNlVVRDPSEwLG4uX3R6bT1CdChraSx0KX0pO3ZhciB0cj0vKFtcK1wtXXxcZFxkKS9naTtlLnVwZGF0ZU9mZnNldD1mdW5jdGlvbigpe307dmFyIGVyPS9eKFwtKT8oPzooXGQqKVsuIF0pPyhcZCspXDooXGQrKSg/Olw6KFxkKylcLj8oXGR7M30pP1xkKik/JC8sbnI9L14oLSk/UCg/OihbMC05LC5dKilZKT8oPzooWzAtOSwuXSopTSk/KD86KFswLTksLl0qKVcpPyg/OihbMC05LC5dKilEKT8oPzpUKD86KFswLTksLl0qKUgpPyg/OihbMC05LC5dKilNKT8oPzooWzAtOSwuXSopUyk/KT8kLztyZS5mbj16dC5wcm90b3R5cGU7dmFyIGlyPWNlKDEsImFkZCIpLHJyPWNlKC0xLCJzdWJ0cmFjdCIpO2UuZGVmYXVsdEZvcm1hdD0iWVlZWS1NTS1ERFRISDptbTpzc1oiO3ZhciBvcj1NKCJtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLiIsZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQ/dGhpcy5sb2NhbGVEYXRhKCk6dGhpcy5sb2NhbGUodCl9KTtWKDAsWyJnZyIsMl0sMCxmdW5jdGlvbigpe3JldHVybiB0aGlzLndlZWtZZWFyKCklMTAwfSksVigwLFsiR0ciLDJdLDAsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpJTEwMH0pLFVlKCJnZ2dnIiwid2Vla1k=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("aG9ydD16aSxrci5tb250aHNQYXJzZT1zdCxrci5fbW9udGhzUmVnZXg9V2ksa3IubW9udGhzUmVnZXg9ZHQsa3IuX21vbnRoc1Nob3J0UmVnZXg9VWksa3IubW9udGhzU2hvcnRSZWdleD11dCxrci53ZWVrPUplLGtyLl93ZWVrPXNyLGtyLmZpcnN0RGF5T2ZZZWFyPVFlLGtyLmZpcnN0RGF5T2ZXZWVrPVhlLGtyLndlZWtkYXlzPW5uLGtyLl93ZWVrZGF5cz1scixrci53ZWVrZGF5c01pbj1vbixrci5fd2Vla2RheXNNaW49dXIsa3Iud2Vla2RheXNTaG9ydD1ybixrci5fd2Vla2RheXNTaG9ydD1jcixrci53ZWVrZGF5c1BhcnNlPXNuLGtyLmlzUE09Zm4sa3IuX21lcmlkaWVtUGFyc2U9ZHIsa3IubWVyaWRpZW09bW4sWSgiZW4iLHtvcmRpbmFsUGFyc2U6L1xkezEsMn0odGh8c3R8bmR8cmQpLyxvcmRpbmFsOmZ1bmN0aW9uKHQpe3ZhciBlPXQlMTAsbj0xPT09eSh0JTEwMC8xMCk/InRoIjoxPT09ZT8ic3QiOjI9PT1lPyJuZCI6Mz09PWU/InJkIjoidGgiO3JldHVybiB0K259fSksZS5sYW5nPU0oIm1vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuIixZKSxlLmxhbmdEYXRhPU0oIm1vbWVudC5sYW5nRGF0YSBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZURhdGEgaW5zdGVhZC4iLE4pO3ZhciBMcj1NYXRoLmFicyx4cj1WbigibXMiKSxBcj1WbigicyIpLEVyPVZuKCJtIiksRHI9Vm4oImgiKSxDcj1WbigiZCIpLFlyPVZuKCJ3IiksT3I9Vm4oIk0iKSxQcj1WbigieSIpLE5yPSRuKCJtaWxsaXNlY29uZHMiKSxJcj0kbigic2Vjb25kcyIpLFJyPSRuKCJtaW51dGVzIiksanI9JG4oImhvdXJzIiksSHI9JG4oImRheXMiKSxGcj0kbigibW9udGhzIiksenI9JG4oInllYXJzIiksVXI9TWF0aC5yb3VuZCxXcj17czo0NSxtOjQ1LGg6MjIsZDoyNixNOjExfSxCcj1NYXRoLmFicyxWcj16dC5wcm90b3R5cGU7VnIuYWJzPU5uLFZyLmFkZD1SbixWci5zdWJ0cmFjdD1qbixWci5hcz1XbixWci5hc01pbGxpc2Vjb25kcz14cixWci5hc1NlY29uZHM9QXIsVnIuYXNNaW51dGVzPUVyLFZyLmFzSG91cnM9RHIsVnIuYXNEYXlzPUNyLFZyLmFzV2Vla3M9WXIsVnIuYXNNb250aHM9T3IsVnIuYXNZZWFycz1QcixWci52YWx1ZU9mPUJuLFZyLl9idWJibGU9Rm4sVnIuZ2V0PXFuLFZyLm1pbGxpc2Vjb25kcz1OcixWci5zZWNvbmRzPUlyLFZyLm1pbnV0ZXM9UnIsVnIuaG91cnM9anIsVnIuZGF5cz1IcixWci53ZWVrcz1HbixWci5tb250aHM9RnIsVnIueWVhcnM9enIsVnIuaHVtYW5pemU9UW4sVnIudG9JU09TdHJpbmc9Wm4sVnIudG9TdHJpbmc9Wm4sVnIudG9KU09OPVpuLFZyLmxvY2FsZT1BZSxWci5sb2NhbGVEYXRhPUVlLFZyLnRvSXNvU3RyaW5nPU0oInRvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpIixabiksVnIubGFuZz1vcixWKCJYIiwwLDAsInVuaXgiKSxWKCJ4IiwwLDAsInZhbHVlT2YiKSxKKCJ4IixTaSksSigiWCIsTGkpLHR0KCJYIixmdW5jdGlvbih0LGUsbil7bi5fZD1uZXcgRGF0ZSgxZTMqcGFyc2VGbG9hdCh0LDEwKSl9KSx0dCgieCIsZnVuY3Rpb24odCxlLG4pe24uX2Q9bmV3IERhdGUoeSh0KSl9KSxlLnZlcnNpb249IjIuMTIuMCIsaShSdCksZS5mbj12cixlLm1pbj1IdCxlLm1heD1GdCxlLm5vdz1aaSxlLnV0Yz1jLGUudW5peD15bixlLm1vbnRocz1EbixlLmlzRGF0ZT1vLGUubG9jYWxlPVksZS5pbnZhbGlkPXAsZS5kdXJhdGlvbj1yZSxlLmlzTW9tZW50PWcsZS53ZWVrZGF5cz1ZbixlLnBhcnNlWm9uZT1ibixlLmxvY2FsZURhdGE9TixlLmlzRHVyYXRpb249VXQsZS5tb250aHNTaG9ydD1DbixlLndlZWtkYXlzTWluPVBuLGUuZGVmaW5lTG9jYWxlPU8sZS51cGRhdGVMb2NhbGU9UCxlLmxvY2FsZXM9SSxlLndlZWtkYXlzU2hvcnQ9T24sZS5ub3JtYWxpemVVbml0cz1qLGUucmVsYXRpdmVUaW1lVGhyZXNob2xkPVhuLGUucHJvdG90eXBlPXZyO3ZhciBxcj1lO3JldHVybiBxcn0pfSkuY2FsbChlLG4oMzYyKSh0KSl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0LndlYnBhY2tQb2x5ZmlsbHx8KHQuZGVwcmVjYXRlPWZ1bmN0aW9uKCl7fSx0LnBhdGhzPVtdLHQuY2hpbGRyZW49W10sdC53ZWJwYWNrUG9seWZpbGw9MSksdH19LGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe3JldHVybiBuKHIodCkpfWZ1bmN0aW9uIHIodCl7cmV0dXJuIG9bdF18fGZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrdCsiJy4iKX0oKX12YXIgbz17Ii4vYWYiOjM2NCwiLi9hZi5qcyI6MzY0LCIuL2FyIjozNjUsIi4vYXItbWEiOjM2NiwiLi9hci1tYS5qcyI6MzY2LCIuL2FyLXNhIjozNjcsIi4vYXItc2EuanMiOjM2NywiLi9hci10biI6MzY4LCIuL2FyLXRuLmpzIjozNjgsIi4vYXIuanMiOjM2NSwiLi9heiI6MzY5LCIuL2F6LmpzIjozNjksIi4vYmUiOjM3MCwiLi9iZS5qcyI6MzcwLCIuL2JnIjozNzEsIi4vYmcuanMiOjM3MSwiLi9ibiI6MzcyLCIuL2JuLmpzIjozNzIsIi4vYm8iOjM3MywiLi9iby5qcyI6MzczLCIuL2JyIjozNzQsIi4vYnIuanMiOjM3NCwiLi9icyI6Mzc1LAoJIi4vYnMuanMiOjM3NSwiLi9jYSI6Mzc2LCIuL2NhLmpzIjozNzYsIi4vY3MiOjM3NywiLi9jcy5qcyI6Mzc3LCIuL2N2IjozNzgsIi4vY3YuanMiOjM3OCwiLi9jeSI6Mzc5LCIuL2N5LmpzIjozNzksIi4vZGEiOjM4MCwiLi9kYS5qcyI6MzgwLCIuL2RlIjozODEsIi4vZGUtYXQiOjM4MiwiLi9kZS1hdC5qcyI6MzgyLCIuL2RlLmpzIjozODEsIi4vZHYiOjM4MywiLi9kdi5qcyI6MzgzLCIuL2VsIjozODQsIi4vZWwuanMiOjM4NCwiLi9lbi1hdSI6Mzg1LCIuL2VuLWF1LmpzIjozODUsIi4vZW4tY2EiOjM4NiwiLi9lbi1jYS5qcyI6Mzg2LCIuL2VuLWdiIjozODcsIi4vZW4tZ2IuanMiOjM4NywiLi9lbi1pZSI6Mzg4LCIuL2VuLWllLmpzIjozODgsIi4vZW4tbnoiOjM4OSwiLi9lbi1uei5qcyI6Mzg5LCIuL2VvIjozOTAsIi4vZW8uanMiOjM5MCwiLi9lcyI6MzkxLCIuL2VzLmpzIjozOTEsIi4vZXQiOjM5MiwiLi9ldC5qcyI6MzkyLCIuL2V1IjozOTMsIi4vZXUuanMiOjM5MywiLi9mYSI6Mzk0LCIuL2ZhLmpzIjozOTQsIi4vZmkiOjM5NSwiLi9maS5qcyI6Mzk1LCIuL2ZvIjozOTYsIi4vZm8uanMiOjM5NiwiLi9mciI6Mzk3LCIuL2ZyLWNhIjozOTgsIi4vZnItY2EuanMiOjM5OCwiLi9mci1jaCI6Mzk5LCIuL2ZyLWNoLmpzIjozOTksIi4vZnIuanMiOjM5NywiLi9meSI6NDAwLCIuL2Z5LmpzIjo0MDAsIi4vZ2QiOjQwMSwiLi9nZC5qcyI6NDAxLCIuL2dsIjo0MDIsIi4vZ2wuanMiOjQwMiwiLi9oZSI6NDAzLCIuL2hlLmpzIjo0MDMsIi4vaGkiOjQwNCwiLi9oaS5qcyI6NDA0LCIuL2hyIjo0MDUsIi4vaHIuanMiOjQwNSwiLi9odSI6NDA2LCIuL2h1LmpzIjo0MDYsIi4vaHktYW0iOjQwNywiLi9oeS1hbS5qcyI6NDA3LCIuL2lkIjo0MDgsIi4vaWQuanMiOjQwOCwiLi9pcyI6NDA5LCIuL2lzLmpzIjo0MDksIi4vaXQiOjQxMCwiLi9pdC5qcyI6NDEwLCIuL2phIjo0MTEsIi4vamEuanMiOjQxMSwiLi9qdiI6NDEyLCIuL2p2LmpzIjo0MTIsIi4va2EiOjQxMywiLi9rYS5qcyI6NDEzLCIuL2trIjo0MTQsIi4va2suanMiOjQxNCwiLi9rbSI6NDE1LCIuL2ttLmpzIjo0MTUsIi4va28iOjQxNiwiLi9rby5qcyI6NDE2LCIuL2xiIjo0MTcsIi4vbGIuanMiOjQxNywiLi9sbyI6NDE4LCIuL2xvLmpzIjo0MTgsIi4vbHQiOjQxOSwiLi9sdC5qcyI6NDE5LCIuL2x2Ijo0MjAsIi4vbHYuanMiOjQyMCwiLi9tZSI6NDIxLCIuL21lLmpzIjo0MjEsIi4vbWsiOjQyMiwiLi9tay5qcyI6NDIyLCIuL21sIjo0MjMsIi4vbWwuanMiOjQyMywiLi9tciI6NDI0LCIuL21yLmpzIjo0MjQsIi4vbXMiOjQyNSwiLi9tcy1teSI6NDI2LCIuL21zLW15LmpzIjo0MjYsIi4vbXMuanMiOjQyNSwiLi9teSI6NDI3LCIuL215LmpzIjo0MjcsIi4vbmIiOjQyOCwiLi9uYi5qcyI6NDI4LCIuL25lIjo0MjksIi4vbmUuanMiOjQyOSwiLi9ubCI6NDMwLCIuL25sLmpzIjo0MzAsIi4vbm4iOjQzMSwiLi9ubi5qcyI6NDMxLCIuL3BhLWluIjo0MzIsIi4vcGEtaW4uanMiOjQzMiwiLi9wbCI6NDMzLCIuL3BsLmpzIjo0MzMsIi4vcHQiOjQzNCwiLi9wdC1iciI6NDM1LCIuL3B0LWJyLmpzIjo0MzUsIi4vcHQuanMiOjQzNCwiLi9ybyI6NDM2LCIuL3JvLmpzIjo0MzYsIi4vcnUiOjQzNywiLi9ydS5qcyI6NDM3LCIuL3NlIjo0MzgsIi4vc2UuanMiOjQzOCwiLi9zaSI6NDM5LCIuL3NpLmpzIjo0MzksIi4vc2siOjQ0MCwiLi9zay5qcyI6NDQwLCIuL3NsIjo0", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("IE1NTU0gWVlZWSIsTExMOiJELiBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQgW2QuXSBELiBNTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW0kgZGFnIGtsLl0gTFQiLG5leHREYXk6IltJIG1vcmdlbiBrbC5dIExUIixuZXh0V2VlazoiZGRkZCBba2wuXSBMVCIsbGFzdERheToiW0kgZ8OlciBrbC5dIExUIixsYXN0V2VlazoiW3NpZHN0ZV0gZGRkZCBba2xdIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiJvbSAlcyIscGFzdDoiJXMgc2lkZW4iLHM6ImbDpSBzZWt1bmRlciIsbToiZXQgbWludXQiLG1tOiIlZCBtaW51dHRlciIsaDoiZW4gdGltZSIsaGg6IiVkIHRpbWVyIixkOiJlbiBkYWciLGRkOiIlZCBkYWdlIixNOiJlbiBtw6VuZWQiLE1NOiIlZCBtw6VuZWRlciIseToiZXQgw6VyIix5eToiJWQgw6VyIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9XC4vLG9yZGluYWw6IiVkLiIsd2Vlazp7ZG93OjEsZG95OjR9fSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLG4peyFmdW5jdGlvbih0LGUpe2UobigzNjEpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gZSh0LGUsbixpKXt2YXIgcj17bTpbImVpbmUgTWludXRlIiwiZWluZXIgTWludXRlIl0saDpbImVpbmUgU3R1bmRlIiwiZWluZXIgU3R1bmRlIl0sZDpbImVpbiBUYWciLCJlaW5lbSBUYWciXSxkZDpbdCsiIFRhZ2UiLHQrIiBUYWdlbiJdLE06WyJlaW4gTW9uYXQiLCJlaW5lbSBNb25hdCJdLE1NOlt0KyIgTW9uYXRlIix0KyIgTW9uYXRlbiJdLHk6WyJlaW4gSmFociIsImVpbmVtIEphaHIiXSx5eTpbdCsiIEphaHJlIix0KyIgSmFocmVuIl19O3JldHVybiBlP3Jbbl1bMF06cltuXVsxXX12YXIgbj10LmRlZmluZUxvY2FsZSgiZGUiLHttb250aHM6IkphbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiJKYW4uX0ZlYnIuX01yei5fQXByLl9NYWlfSnVuLl9KdWwuX0F1Zy5fU2VwdC5fT2t0Ll9Ob3YuX0Rlei4iLnNwbGl0KCJfIiksd2Vla2RheXM6IlNvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IlNvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLiIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoiU29fTW9fRGlfTWlfRG9fRnJfU2EiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJISDptbSIsTFRTOiJISDptbTpzcyIsTDoiREQuTU0uWVlZWSIsTEw6IkQuIE1NTU0gWVlZWSIsTExMOiJELiBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQsIEQuIE1NTU0gWVlZWSBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJbaGV1dGUgdW1dIExUIFtVaHJdIixzYW1lRWxzZToiTCI=", "base64"));
  res.write(new Buffer("LG5leHREYXk6Ilttb3JnZW4gdW1dIExUIFtVaHJdIixuZXh0V2VlazoiZGRkZCBbdW1dIExUIFtVaHJdIixsYXN0RGF5OiJbZ2VzdGVybiB1bV0gTFQgW1Vocl0iLGxhc3RXZWVrOiJbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6ImluICVzIixwYXN0OiJ2b3IgJXMiLHM6ImVpbiBwYWFyIFNla3VuZGVuIixtOmUsbW06IiVkIE1pbnV0ZW4iLGg6ZSxoaDoiJWQgU3R1bmRlbiIsZDplLGRkOmUsTTplLE1NOmUseTplLHl5OmV9LG9yZGluYWxQYXJzZTovXGR7MSwyfVwuLyxvcmRpbmFsOiIlZC4iLHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBufSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24odCxlKXtlKG4oMzYxKSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGUodCxlLG4saSl7dmFyIHI9e206WyJlaW5lIE1pbnV0ZSIsImVpbmVyIE1pbnV0ZSJdLGg6WyJlaW5lIFN0dW5kZSIsImVpbmVyIFN0dW5kZSJdLGQ6WyJlaW4gVGFnIiwiZWluZW0gVGFnIl0sZGQ6W3QrIiBUYWdlIix0KyIgVGFnZW4iXSxNOlsiZWluIE1vbmF0IiwiZWluZW0gTW9uYXQiXSxNTTpbdCsiIE1vbmF0ZSIsdCsiIE1vbmF0ZW4iXSx5OlsiZWluIEphaHIiLCJlaW5lbSBKYWhyIl0seXk6W3QrIiBKYWhyZSIsdCsiIEphaHJlbiJdfTtyZXR1cm4gZT9yW25dWzBdOnJbbl1bMV19dmFyIG49dC5kZWZpbmVMb2NhbGUoImRlLWF0Iix7bW9udGhzOiJKw6RubmVyX0ZlYnJ1YXJfTcOkcnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXIiLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6IkrDpG4uX0ZlYnIuX01yei5fQXByLl9NYWlfSnVuLl9KdWwuX0F1Zy5fU2VwdC5fT2t0Ll9Ob3YuX0Rlei4iLnNwbGl0KCJfIiksd2Vla2RheXM6IlNvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IlNvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLiIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoiU29fTW9fRGlfTWlfRG9fRnJfU2EiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJISDptbSIsTFRTOiJISDptbTpzcyIsTDoiREQuTU0uWVlZWSIsTEw6IkQuIE1NTU0gWVlZWSIsTExMOiJELiBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQsIEQuIE1NTU0gWVlZWSBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJbaGV1dGUgdW1dIExUIFtVaHJdIixzYW1lRWxzZToiTCIsbmV4dERheToiW21vcmdlbiB1bV0gTFQgW1Vocl0iLG5leHRXZWVrOiJkZGRkIFt1bV0gTFQgW1Vocl0iLGxhc3REYXk6IltnZXN0ZXJuIHVtXSBMVCBbVWhyXSIsbGFzdFdlZWs6IltsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0ifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToiaW4gJXMiLHBhc3Q6InZvciAlcyIsczoiZWluIHBhYXIgU2VrdW5kZW4iLG06ZSxtbToiJWQgTWludXRlbiIsaDplLGhoOiIlZCBTdHVuZGVuIixkOmUsZGQ6ZSxNOmUsTU06ZSx5OmUseXk6ZX0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9XC4vLG9yZGluYWw6IiVkLiIsd2Vlazp7ZG93OjEsZG95OjR9fSk7cmV0dXJuIG59KX0sZnVuY3Rpb24odCxlLG4peyFmdW5jdGlvbih0LGUpe2UobigzNjEpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9WyLelt6s3oLeqt6H3qbeg96pIiwi3orerN6E3rDeg96q3ofept6D3qkiLCLeid6n3oPeqN6X3qoiLCLeh96t3pXesN6D3qnejd6qIiwi3onerSIsIt6W3qvegt6wIiwi3pbeqt6N3qbeh96oIiwi3ofer96O3qbekN6w3pPeqiIsIt6Q3qzeld6w3pPerN6J3rDehN6m3oPeqiIsIt6H3q7eht6w3pPer96E3qbeg96qIiwi3oLert6I3qzeid6w3oTept6D3qoiLCLekd6o3pDerN6J3rDehN6m3oPeqiJdLG49WyLeh96n3oveqN6H3rDejN6mIiwi3oDer96J3qYiLCLeh96m3oLesN6O3qfeg96mIiwi3oTeqt6L3qYiLCLehN6q3oPep96Q3rDeit6m3ozeqCIsIt6A3qreht6q3oPeqiIsIt6A3q7egt6o3oDeqN6D3qoiXSxpPXQuZGVmaW5lTG9jYWxlKCJkdiIse21vbnRoczplLG1vbnRoc1Nob3J0OmUsd2Vla2RheXM6bix3ZWVrZGF5c1Nob3J0Om4sd2Vla2RheXNNaW46It6H3qfei96oX96A3q/eid6mX96H3qbegt6wX96E3qrei96mX96E3qreg96nX96A3qreht6qX96A3q7egt6oIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkQvTS9ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQgRCBNTU1NIFlZWVkgSEg6bW0ifSxtZXJpZGllbVBhcnNlOi/eid6GfN6J3oovLGlzUE06ZnVuY3Rpb24odCl7cmV0dXJuIt6J3ooiPT09dH0sbWVyaWRpZW06ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PDEyPyLeid6GIjoi3oneiiJ9LGNhbGVuZGFyOntzYW1lRGF5OiJb3oneqN6H3qbei96qXSBMVCIsbmV4dERheToiW96J3qfei96m3onep10gTFQiLG5leHRXZWVrOiJkZGRkIExUIixsYXN0RGF5OiJb3ofeqN6H3rDelN6sXSBMVCIsbGFzdFdlZWs6Ilveit6n3ofeqN6M3qreiN6oXSBkZGRkIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiLejN6s3oPerd6O3qbeh96oICVzIixwYXN0OiLeht6q3oPeqN6C3rAgJXMiLHM6It6Q3qjeht6q3oLesN6M3qreht6u3oXerN6H3rAiLG06It6J3qjegt6o3pPerN6H3rAiLG1tOiLeid6o3oLeqN6T3qogJWQiLGg6It6O3qbekd6o3ofeqN6D3qzeh96wIixoaDoi3o7ept6R3qjeh96o3oPeqiAlZCIsZDoi3oveqt6I3qbegN6s3ofesCIsZGQ6It6L3qreiN6m3pDesCAlZCIsTToi3onept6A3qzeh96wIixNTToi3onept6Q3rAgJWQiLHk6It6H3qbegN6m3oPerN6H3rAiLHl5OiLeh96m3oDept6D3qogJWQifSxwcmVwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC/YjC9nLCIsIil9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvLC9nLCLYjCIpfSx3ZWVrOntkb3c6Nyxkb3k6MTJ9fSk7cmV0dXJuIGl9KX0sZnVuY3Rpb24odCxlLG4peyFmdW5jdGlvbih0LGUpe2UobigzNjEpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gZSh0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIEZ1bmN0aW9ufHwiW29iamVjdCBGdW5jdGlvbl0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfXZhciBuPXQuZGVmaW5lTG9jYWxlKCJlbCIse21vbnRoc05vbWluYXRpdmVFbDoizpnOsc69zr/Phc6sz4HOuc6/z4JfzqbOtc6yz4HOv8+FzqzPgc65zr/Pgl/OnM6sz4HPhM65zr/Pgl/Okc+Az4HOr867zrnOv8+CX86czqzOuc6/z4JfzpnOv8+Nzr3Ouc6/z4JfzpnOv8+NzrvOuc6/z4JfzpHPjc6zzr/Phc+Dz4TOv8+CX86jzrXPgM+Ezq3OvM6yz4HOuc6/z4Jfzp/Ous+Ez47Oss+BzrnOv8+CX86dzr/Orc68zrLPgc65zr/Pgl/OlM61zrrOrc68zrLPgc65zr/PgiIuc3BsaXQoIl8iKSxtb250aHNHZW5pdGl2ZUVsOiLOmc6xzr3Ov8+FzrHPgc6vzr/PhV/Ops61zrLPgc6/z4XOsc+Bzq/Ov8+FX86czrHPgc+Ezq/Ov8+FX86Rz4DPgc65zrvOr86/z4VfzpzOsc6Qzr/PhV/Omc6/z4XOvc6vzr/PhV/Omc6/z4XOu86vzr/PhV/Okc+FzrPOv8+Nz4PPhM6/z4VfzqPOtc+Az4TOtc68zrLPgc6vzr/PhV/On866z4TPic6yz4HOr86/z4Vfzp3Ov861zrzOss+Bzq/Ov8+FX86UzrXOus61zrzOss+Bzq/Ov8+FIi5zcGxpdCgiXyIpLG1vbnRoczpmdW5jdGlvbih0LGUpe3JldHVybi9ELy50ZXN0KGUuc3Vic3RyaW5nKDAsZS5pbmRleE9mKCJNTU1NIikpKT90aGlzLl9tb250aHNHZW5pdGl2ZUVsW3QubW9udGgoKV06dGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsW3QubW9udGgoKV19LG1vbnRoc1Nob3J0OiLOmc6xzr1fzqbOtc6yX86czrHPgV/Okc+Az4FfzpzOsc+KX86Zzr/Phc69X86Zzr/Phc67X86Rz4XOs1/Oo861z4Bfzp/Ous+EX86dzr/OtV/OlM61zroiLnNwbGl0KCJfIiksd2Vla2RheXM6Is6az4XPgc65zrHOus6uX86UzrXPhc+Ezq3Pgc6xX86kz4HOr8+EzrdfzqTOtc+EzqzPgc+EzrdfzqDOrc68z4DPhM63X86gzrHPgc6xz4POus61z4XOrl/Oo86szrLOss6xz4TOvyIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiLOms+Fz4FfzpTOtc+FX86kz4HOuV/OpM61z4RfzqDOtc68X86gzrHPgV/Oo86xzrIiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46Is6az4VfzpTOtV/OpM+BX86kzrVfzqDOtV/OoM6xX86jzrEiLnNwbGl0KCJfIiksCgltZXJpZGllbTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHQ+MTE/bj8izrzOvCI6Is6czpwiOm4/Is+AzrwiOiLOoM6cIn0saXNQTTpmdW5jdGlvbih0KXtyZXR1cm4izrwiPT09KHQrIiIpLnRvTG93ZXJDYXNlKClbMF19LG1lcmlkaWVtUGFyc2U6L1vOoM6cXVwuP86cP1wuPy9pLGxvbmdEYXRlRm9ybWF0OntMVDoiaDptbSBBIixMVFM6Img6bW06c3MgQSIsTDoiREQvTU0vWVlZWSIsTEw6IkQgTU1NTSBZWVlZIixMTEw6IkQgTU1NTSBZWVlZIGg6bW0gQSIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBIn0sY2FsZW5kYXJFbDp7c2FtZURheToiW86jzq7OvM61z4HOsSB7fV0gTFQiLG5leHREYXk6IlvOkc+Nz4HOuc6/IHt9XSBMVCIsbmV4dFdlZWs6ImRkZGQgW3t9XSBMVCIsbGFzdERheToiW86nzrjOtc+CIHt9XSBMVCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSA2OnJldHVybiJbz4TOvyDPgM+Bzr/Ot86zzr/Pjc68zrXOvc6/XSBkZGRkIFt7fV0gTFQiO2RlZmF1bHQ6cmV0dXJuIlvPhM63zr0gz4DPgc6/zrfOs86/z43OvM61zr3Ot10gZGRkZCBbe31dIExUIn19LHNhbWVFbHNlOiJMIn0sY2FsZW5kYXI6ZnVuY3Rpb24odCxuKXt2YXIgaT10aGlzLl9jYWxlbmRhckVsW3RdLHI9biYmbi5ob3VycygpO3JldHVybiBlKGkpJiYoaT1pLmFwcGx5KG4pKSxpLnJlcGxhY2UoInt9IixyJTEyPT09MT8iz4PPhM63Ijoiz4PPhM65z4IiKX0scmVsYXRpdmVUaW1lOntmdXR1cmU6Is+DzrUgJXMiLHBhc3Q6IiVzIM+Az4HOuc69IixzOiLOu86vzrPOsSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEiLG06Is6tzr3OsSDOu861z4DPhM+MIixtbToiJWQgzrvOtc+Az4TOrCIsaDoizrzOr86xIM+Oz4HOsSIsaGg6IiVkIM+Oz4HOtc+CIixkOiLOvM6vzrEgzrzOrc+BzrEiLGRkOiIlZCDOvM6tz4HOtc+CIixNOiLOrc69zrHPgiDOvM6uzr3Osc+CIixNTToiJWQgzrzOrs69zrXPgiIseToizq3Ovc6xz4Igz4fPgc+Mzr3Ov8+CIix5eToiJWQgz4fPgc+Mzr3Ouc6xIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9zrcvLG9yZGluYWw6IiVkzrciLHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBufSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24odCxlKXtlKG4oMzYxKSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXQuZGVmaW5lTG9jYWxlKCJlbi1hdSIse21vbnRoczoiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlciIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMiLnNwbGl0KCJfIiksd2Vla2RheXM6IlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Ii5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IlN1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCIuc3BsaXQoIl8iKSx3ZWU=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("b25kZXMiLG06InVuZSBtaW51dGUiLG1tOiIlZCBtaW51dGVzIixoOiJ1bmUgaGV1cmUiLGhoOiIlZCBoZXVyZXMiLGQ6InVuIGpvdXIiLGRkOiIlZCBqb3VycyIsTToidW4gbW9pcyIsTU06IiVkIG1vaXMiLHk6InVuIGFuIix5eToiJWQgYW5zIn0sb3JkaW5hbFBhcnNlOi9cZHsxLDJ9KGVyfCkvLG9yZGluYWw6ZnVuY3Rpb24odCl7cmV0dXJuIHQrKDE9PT10PyJlciI6IiIpfSx3ZWVrOntkb3c6MSxkb3k6NH19KTtyZXR1cm4gZX0pfSxmdW5jdGlvbih0LGUsbil7IWZ1bmN0aW9uKHQsZSl7ZShuKDM2MSkpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgZT10LmRlZmluZUxvY2FsZSgiZnItY2EiLHttb250aHM6ImphbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZSIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4iLnNwbGl0KCJfIiksd2Vla2RheXM6ImRpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaSIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJEaV9MdV9NYV9NZV9KZV9WZV9TYSIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJZWVlZLU1NLUREIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQgRCBNTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW0F1am91cmQnaHVpIMOgXSBMVCIsbmV4dERheToiW0RlbWFpbiDDoF0gTFQiLG5leHRXZWVrOiJkZGRkIFvDoF0gTFQiLGxhc3REYXk6IltIaWVyIMOgXSBMVCIsbGFzdFdlZWs6ImRkZGQgW2Rlcm5pZXIgw6BdIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiJkYW5zICVzIixwYXN0OiJpbCB5IGEgJXMiLHM6InF1ZWxxdWVzIHNlY29uZGVzIixtOiJ1bmUgbWludXRlIixtbToiJWQgbWludXRlcyIsaDoidW5lIGhldXJlIixoaDoiJWQgaGV1cmVzIixkOiJ1biBqb3VyIixkZDoiJWQgam91cnMiLE06InVuIG1vaXMiLE1NOiIlZCBtb2lzIix5OiJ1biBhbiIseXk6IiVkIGFucyJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfShlcnxlKS8sb3JkaW5hbDpmdW5jdGlvbih0KXtyZXR1cm4gdCsoMT09PXQ/ImVyIjoiZSIpfX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24odCxlKXtlKG4oMzYxKSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXQuZGVmaW5lTG9jYWxlKCJmci1jaCIse21vbnRoczoiamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmk=", "base64"));
  res.write(new Buffer("bF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZSIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoiamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4iLnNwbGl0KCJfIiksd2Vla2RheXM6ImRpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaSIuc3BsaXQoIl8iKSx3ZWVrZGF5c1Nob3J0OiJkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJEaV9MdV9NYV9NZV9KZV9WZV9TYSIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJERC5NTS5ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQgRCBNTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW0F1am91cmQnaHVpIMOgXSBMVCIsbmV4dERheToiW0RlbWFpbiDDoF0gTFQiLG5leHRXZWVrOiJkZGRkIFvDoF0gTFQiLGxhc3REYXk6IltIaWVyIMOgXSBMVCIsbGFzdFdlZWs6ImRkZGQgW2Rlcm5pZXIgw6BdIExUIixzYW1lRWxzZToiTCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOiJkYW5zICVzIixwYXN0OiJpbCB5IGEgJXMiLHM6InF1ZWxxdWVzIHNlY29uZGVzIixtOiJ1bmUgbWludXRlIixtbToiJWQgbWludXRlcyIsaDoidW5lIGhldXJlIixoaDoiJWQgaGV1cmVzIixkOiJ1biBqb3VyIixkZDoiJWQgam91cnMiLE06InVuIG1vaXMiLE1NOiIlZCBtb2lzIix5OiJ1biBhbiIseXk6IiVkIGFucyJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfShlcnxlKS8sb3JkaW5hbDpmdW5jdGlvbih0KXtyZXR1cm4gdCsoMT09PXQ/ImVyIjoiZSIpfSx3ZWVrOntkb3c6MSxkb3k6NH19KTtyZXR1cm4gZX0pfSxmdW5jdGlvbih0LGUsbil7IWZ1bmN0aW9uKHQsZSl7ZShuKDM2MSkpfSh0aGlzLGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgZT0iamFuLl9mZWIuX21ydC5fYXByLl9tYWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLiIuc3BsaXQoIl8iKSxuPSJqYW5fZmViX21ydF9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlcyIuc3BsaXQoIl8iKSxpPXQuZGVmaW5lTG9jYWxlKCJmeSIse21vbnRoczoiamFubmV3YXJpc19mZWJyZXdhcmlzX21hYXJ0X2FwcmlsX21hYWllX2p1bnlfanVseV9hdWd1c3R1c19zZXB0aW1iZXJfb2t0b2Jlcl9ub3ZpbWJlcl9kZXNpbWJlciIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDpmdW5jdGlvbih0LGkpe3JldHVybi8tTU1NLS8udGVzdChpKT9uW3QubW9udGgoKV06ZVt0Lm1vbnRoKCldfSx3ZWVrZGF5czoic25laW5fbW9hbmRlaV90aWlzZGVpX3dvYW5zZGVpX3RvbmdlcnNkZWlfZnJlZWRfc25lb24iLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoic2kuX21vLl90aS5fd28uX3RvLl9mci5fc28uIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJTaV9Nb19UaV9Xb19Ub19Gcl9TbyIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhIOm1tIixMVFM6IkhIOm1tOnNzIixMOiJERC1NTS1ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgSEg6bW0iLExMTEw6ImRkZGQgRCBNTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW2hqb2VkIG9tXSBMVCIsbmV4dERheToiW21vYXJuIG9tXSBMVCIsbmV4dFdlZWs6ImRkZGQgW29tXSBMVCIsbGFzdERheToiW2p1c3RlciBvbV0gTFQiLGxhc3RXZWVrOiJbw7RmcsO7bmVdIGRkZGQgW29tXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToib2VyICVzIixwYXN0OiIlcyBseW4iLHM6ImluIHBlYXIgc2Vrb25kZW4iLG06ImllbiBtaW7DunQiLG1tOiIlZCBtaW51dGVuIixoOiJpZW4gb2VyZSIsaGg6IiVkIG9lcmVuIixkOiJpZW4gZGVpIixkZDoiJWQgZGFnZW4iLE06ImllbiBtb2FubmUiLE1NOiIlZCBtb2FubmVuIix5OiJpZW4gamllciIseXk6IiVkIGppZXJyZW4ifSxvcmRpbmFsUGFyc2U6L1xkezEsMn0oc3RlfGRlKS8sb3JkaW5hbDpmdW5jdGlvbih0KXtyZXR1cm4gdCsoMT09PXR8fDg9PT10fHx0Pj0yMD8ic3RlIjoiZGUiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSk7cmV0dXJuIGl9KX0sZnVuY3Rpb24odCxlLG4peyFmdW5jdGlvbih0LGUpe2UobigzNjEpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9WyJBbSBGYW9pbGxlYWNoIiwiQW4gR2VhcnJhbiIsIkFtIE3DoHJ0IiwiQW4gR2libGVhbiIsIkFuIEPDqGl0ZWFuIiwiQW4gdC3DkmdtaGlvcyIsIkFuIHQtSXVjaGFyIiwiQW4gTMO5bmFzdGFsIiwiQW4gdC1TdWx0YWluIiwiQW4gRMOgbWhhaXIiLCJBbiB0LVNhbWhhaW4iLCJBbiBEw7liaGxhY2hkIl0sbj1bIkZhb2kiLCJHZWFyIiwiTcOgcnQiLCJHaWJsIiwiQ8OoaXQiLCLDkmdtaCIsIkl1Y2giLCJMw7luIiwiU3VsdCIsIkTDoG1oIiwiU2FtaCIsIkTDuWJoIl0saT1bIkRpZMOybWhuYWljaCIsIkRpbHVhaW4iLCJEaW3DoGlydCIsIkRpY2lhZGFpbiIsIkRpYXJkYW9pbiIsIkRpaGFvaW5lIiwiRGlzYXRoYWlybmUiXSxyPVsiRGlkIiwiRGlsIiwiRGltIiwiRGljIiwiRGlhIiwiRGloIiwiRGlzIl0sbz1bIkTDsiIsIkx1IiwiTcOgIiwiQ2kiLCJBciIsIkhhIiwiU2EiXSxzPXQuZGVmaW5lTG9jYWxlKCJnZCIse21vbnRoczplLG1vbnRoc1Nob3J0Om4sbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czppLHdlZWtkYXlzU2hvcnQ6cix3ZWVrZGF5c01pbjpvLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkREL01NL1lZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSBISDptbQ==", "base64"));
  res.write(new Buffer("IixMTExMOiJkZGRkLCBEIE1NTU0gWVlZWSBISDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OiJbQW4tZGl1Z2ggYWlnXSBMVCIsbmV4dERheToiW0EtbcOgaXJlYWNoIGFpZ10gTFQiLG5leHRXZWVrOiJkZGRkIFthaWddIExUIixsYXN0RGF5OiJbQW4tZMOoIGFpZ10gTFQiLGxhc3RXZWVrOiJkZGRkIFtzZW8gY2hhaWRoXSBbYWlnXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToiYW5uIGFuICVzIixwYXN0OiJiaG8gY2hpb25uICVzIixzOiJiZWFnYW4gZGlvZ2FuIixtOiJtaW9uYWlkIixtbToiJWQgbWlvbmFpZGVhbiIsaDoidWFpciIsaGg6IiVkIHVhaXJlYW4iLGQ6ImxhdGhhIixkZDoiJWQgbGF0aGEiLE06Im3DrG9zIixNTToiJWQgbcOsb3NhbiIseToiYmxpYWRobmEiLHl5OiIlZCBibGlhZGhuYSJ9LG9yZGluYWxQYXJzZTovXGR7MSwyfShkfG5hfG1oKS8sb3JkaW5hbDpmdW5jdGlvbih0KXt2YXIgZT0xPT09dD8iZCI6dCUxMD09PTI/Im5hIjoibWgiO3JldHVybiB0K2V9LHdlZWs6e2RvdzoxLGRveTo0fX0pO3JldHVybiBzfSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24odCxlKXtlKG4oMzYxKSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO3ZhciBlPXQuZGVmaW5lTG9jYWxlKCJnbCIse21vbnRoczoiWGFuZWlyb19GZWJyZWlyb19NYXJ6b19BYnJpbF9NYWlvX1h1w7FvX1h1bGxvX0Fnb3N0b19TZXRlbWJyb19PdXR1YnJvX05vdmVtYnJvX0RlY2VtYnJvIi5zcGxpdCgiXyIpLG1vbnRoc1Nob3J0OiJYYW4uX0ZlYi5fTWFyLl9BYnIuX01haS5fWHXDsS5fWHVsLl9BZ28uX1NldC5fT3V0Ll9Ob3YuX0RlYy4iLnNwbGl0KCJfIiksd2Vla2RheXM6IkRvbWluZ29fTHVuc19NYXJ0ZXNfTcOpcmNvcmVzX1hvdmVzX1ZlbnJlc19Tw6FiYWRvIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IkRvbS5fTHVuLl9NYXIuX03DqXIuX1hvdi5fVmVuLl9Tw6FiLiIuc3BsaXQoIl8iKSx3ZWVrZGF5c01pbjoiRG9fTHVfTWFfTcOpX1hvX1ZlX1PDoSIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6Ikg6bW0iLExUUzoiSDptbTpzcyIsTDoiREQvTU0vWVlZWSIsTEw6IkQgTU1NTSBZWVlZIixMTEw6IkQgTU1NTSBZWVlZIEg6bW0iLExMTEw6ImRkZGQgRCBNTU1NIFlZWVkgSDptbSJ9LGNhbGVuZGFyOntzYW1lRGF5OmZ1bmN0aW9uKCl7cmV0dXJuIltob3hlICIrKDEhPT10aGlzLmhvdXJzKCk/IsOhcyI6IsOhIikrIl0gTFQifSxuZXh0RGF5OmZ1bmN0aW9uKCl7cmV0dXJuIlttYcOxw6EgIisoMSE9PXRoaXMuaG91cnMoKT8iw6FzIjoiw6EiKSsiXSBMVCJ9LG5leHRXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuImRkZGQgWyIrKDEhPT10aGlzLmhvdXJzKCk/IsOhcyI6ImEiKSsiXSBMVCJ9LGxhc3REYXk6ZnVuY3Rpb24oKXtyZXR1cm4iW29udGUgIisoMSE9PXRoaXMuaG91cnMoKT8iw6EiOiJhIikrIl0gTFQifSxsYXN0V2VlazpmdW5jdGlvbigpe3JldHVybiJbb10gZGRkZCBbcGFzYWRvICIrKDEhPT10aGlzLmhvdXJzKCk/IsOhcyI6ImEiKSsiXSBMVCJ9LHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6ZnVuY3Rpb24odCl7cmV0dXJuInVucyBzZWd1bmRvcyI9PT10PyJudW5zIHNlZ3VuZG9zIjoiZW4gIit0fSxwYXN0OiJoYWkgJXMiLHM6InVucyBzZWd1bmRvcyIsbToidW4gbWludXRvIixtbToiJWQgbWludXRvcyIsaDoidW5oYSBob3JhIixoaDoiJWQgaG9yYXMiLGQ6InVuIGTDrWEiLGRkOiIlZCBkw61hcyIsTToidW4gbWVzIixNTToiJWQgbWVzZXMiLHk6InVuIGFubyIseXk6IiVkIGFub3MifSxvcmRpbmFsUGFyc2U6L1xkezEsMn3Cui8sb3JkaW5hbDoiJWTCuiIsd2Vlazp7ZG93OjEsZG95Ojd9fSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLG4peyFmdW5jdGlvbih0LGUpe2UobigzNjEpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoImhlIix7bW9udGhzOiLXmdeg15XXkNeoX9ek15HXqNeV15DXqF/Xnteo16Vf15DXpNeo15nXnF/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS15XXodeYX9eh16TXmNee15HXqF/XkNeV16fXmNeV15HXqF/XoNeV15HXnteR16hf15PXptee15HXqCIuc3BsaXQoIl8iKSxtb250aHNTaG9ydDoi15nXoNeV17Nf16TXkdeo17Nf157XqNelX9eQ16TXqNezX9ee15DXmV/XmdeV16DXmV/XmdeV15zXmV/XkNeV15LXs1/Xodek15jXs1/XkNeV16fXs1/XoNeV15HXs1/Xk9em157XsyIuc3BsaXQoIl8iKSx3ZWVrZGF5czoi16jXkNep15XXn1/Xqdeg15lf16nXnNeZ16nXmV/XqNeR15nXoteZX9eX157Xmdep15lf16nXmdep15lf16nXkdeqIi5zcGxpdCgiXyIpLHdlZWtkYXlzU2hvcnQ6IteQ17Nf15HXs1/XktezX9eT17Nf15TXs1/XldezX9ep17MiLnNwbGl0KCJfIiksd2Vla2RheXNNaW46IteQX9eRX9eSX9eTX9eUX9eVX9epIi5zcGxpdCgiXyIpLGxvbmdEYXRlRm9ybWF0OntMVDoiSEg6bW0iLExUUzoiSEg6bW06c3MiLEw6IkREL01NL1lZWVkiLExMOiJEIFvXkV1NTU1NIFlZWVkiLExMTDoiRCBb15FdTU1NTSBZWVlZIEhIOm1tIixMTExMOiJkZGRkLCBEIFvXkV1NTU1NIFlZWVkgSEg6bW0iLGw6IkQvTS9ZWVlZIixsbDoiRCBNTU0gWVlZWSIsbGxsOiJEIE1NTSBZWVlZIEhIOm1tIixsbGxsOiJkZGQsIEQgTU1NIFlZWVkgSEg6bW0ifSxjYWxlbmRhcjp7c2FtZURheToiW9eU15nXldedINeR1r5dTFQiLG5leHREYXk6IlvXnteX16gg15HWvl1MVCIsbmV4dFdlZWs6ImRkZGQgW9eR16nXoteUXSBMVCIsbGFzdERheToiW9eQ16rXnteV15wg15HWvl1MVCIsbGFzdFdlZWs6IlvXkdeZ15XXnV0gZGRkZCBb15TXkNeX16jXldefINeR16nXoteUXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToi15HXoteV15MgJXMiLHBhc3Q6Itec16TXoNeZICVzIixzOiLXnteh16TXqCDXqdeg15nXldeqIixtOiLXk9en15QiLG1tOiIlZCDXk9en15XXqiIsaDoi16nXoteUIixoaDpmdW5jdGlvbih0KXtyZXR1cm4gMj09PXQ/Itep16LXqteZ15nXnSI6dCsiINep16LXldeqIn0sZDoi15nXldedIixkZDpmdW5jdGlvbih0KXtyZXR1cm4gMj09PXQ/IteZ15XXnteZ15nXnSI6dCsiINeZ157XmdedIn0sTToi15fXldeT16kiLE1NOmZ1bmN0aW9uKHQpe3JldHVybiAyPT09dD8i15fXldeT16nXmdeZ150iOnQrIiDXl9eV15PXqdeZ150ifSx5OiLXqdeg15QiLHl5OmZ1bmN0aW9uKHQpe3JldHVybiAyPT09dD8i16nXoNeq15nXmdedIjp0JTEwPT09MCYmMTAhPT10P3QrIiDXqdeg15QiOnQrIiDXqdeg15k=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("cmlkaWVtSG91cjpmdW5jdGlvbih0LGUpe3JldHVybiAxMj09PXQmJih0PTApLCLgtLDgtL7gtKTgtY3gtLDgtL8iPT09ZSYmdD49NHx8IuC0ieC0muC1jeC0miDgtJXgtLTgtL/gtJ7gtY3gtJ7gtY0iPT09ZXx8IuC0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0giI9PT1lP3QrMTI6dH0sbWVyaWRpZW06ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PDQ/IuC0sOC0vuC0pOC1jeC0sOC0vyI6dDwxMj8i4LSw4LS+4LS14LS/4LSy4LWGIjp0PDE3PyLgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNIjp0PDIwPyLgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIIiOiLgtLDgtL7gtKTgtY3gtLDgtL8ifX0pO3JldHVybiBlfSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24odCxlKXtlKG4oMzYxKSl9KHRoaXMsZnVuY3Rpb24odCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGUodCxlLG4saSl7dmFyIHI9IiI7aWYoZSlzd2l0Y2gobil7Y2FzZSJzIjpyPSLgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSmIjticmVhaztjYXNlIm0iOnI9IuCkj+CklSDgpK7gpL/gpKjgpL/gpJ8iO2JyZWFrO2Nhc2UibW0iOnI9IiVkIOCkruCkv+CkqOCkv+Ckn+ClhyI7YnJlYWs7Y2FzZSJoIjpyPSLgpI/gpJUg4KSk4KS+4KS4IjticmVhaztjYXNlImhoIjpyPSIlZCDgpKTgpL7gpLgiO2JyZWFrO2Nhc2UiZCI6cj0i4KSP4KSVIOCkpuCkv+CkteCkuCI7YnJlYWs7Y2FzZSJkZCI6cj0iJWQg4KSm4KS/4KS14KS4IjticmVhaztjYXNlIk0iOnI9IuCkj+CklSDgpK7gpLngpL/gpKjgpL4iO2JyZWFrO2Nhc2UiTU0iOnI9IiVkIOCkruCkueCkv+CkqOClhyI7YnJlYWs7Y2FzZSJ5IjpyPSLgpI/gpJUg4KS14KSw4KWN4KS3IjticmVhaztjYXNlInl5IjpyPSIlZCDgpLXgpLDgpY3gpLfgpYcifWVsc2Ugc3dpdGNoKG4pe2Nhc2UicyI6cj0i4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpuCkvuCkgiI7YnJlYWs7Y2FzZSJtIjpyPSLgpI/gpJXgpL4g4KSu4KS/4KSo4KS/4KSf4KS+IjticmVhaztjYXNlIm1tIjpyPSIlZCDgpK7gpL/gpKjgpL/gpJ/gpL7gpIIiO2JyZWFrO2Nhc2UiaCI6cj0i4KSP4KSV4KS+IOCkpOCkvuCkuOCkviI7YnJlYWs7Y2FzZSJoaCI6cj0iJWQg4KSk4KS+4KS44KS+4KSCIjticmVhaztjYXNlImQiOnI9IuCkj+CkleCkviDgpKbgpL/gpLXgpLjgpL4iO2JyZWFrO2Nhc2UiZGQiOnI9IiVkIOCkpuCkv+CkteCkuOCkvuCkgiI7YnJlYWs7Y2FzZSJNIjpyPSLgpI/gpJXgpL4g4KSu4KS54KS/4KSo4KWN4KSv4KS+IjticmVhaztjYXNlIk1NIjpyPSIlZCDgpK7gpLngpL/gpKjgpY3gpK/gpL7gpIIiO2JyZWFrO2Nhc2UieSI6cj0i4KSP4KSV4KS+IOCkteCksOCljeCkt+CkviI7YnJlYWs7Y2FzZSJ5eSI6cj0iJWQg4KS14KSw4KWN4KS34KS+4KSCIn1yZXR1cm4gci5yZXBsYWNlKC8lZC9pLHQpfXZhciBuPXsxOiLgpaciLDI6IuClqCIsMzo=", "base64"));
  res.write(new Buffer("IuClqSIsNDoi4KWqIiw1OiLgpasiLDY6IuClrCIsNzoi4KWtIiw4OiLgpa4iLDk6IuClryIsMDoi4KWmIn0saT17IuClpyI6IjEiLCLgpagiOiIyIiwi4KWpIjoiMyIsIuClqiI6IjQiLCLgpasiOiI1Iiwi4KWsIjoiNiIsIuClrSI6IjciLCLgpa4iOiI4Iiwi4KWvIjoiOSIsIuClpiI6IjAifSxyPXQuZGVmaW5lTG9jYWxlKCJtciIse21vbnRoczoi4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSP4KSq4KWN4KSw4KS/4KSyX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSy4KWIX+CkkeCkl+CkuOCljeCkn1/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLBf4KSR4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkteCljeCkueClh+CkguCkrOCksF/gpKHgpL/gpLjgpYfgpILgpKzgpLAiLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6IuCknOCkvuCkqOClhy5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJouX+Ckj+CkquCljeCksOCkvy5f4KSu4KWHLl/gpJzgpYLgpKguX+CknOClgeCksuCliC5f4KSR4KSXLl/gpLjgpKrgpY3gpJ/gpYfgpIIuX+CkkeCkleCljeCkn+Cliy5f4KSo4KWL4KS14KWN4KS54KWH4KSCLl/gpKHgpL/gpLjgpYfgpIIuIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiLgpLDgpLXgpL/gpLXgpL7gpLBf4KS44KWL4KSu4KS14KS+4KSwX+CkruCkguCkl+Cks+CkteCkvuCksF/gpKzgpYHgpKfgpLXgpL7gpLBf4KSX4KWB4KSw4KWC4KS14KS+4KSwX+CktuClgeCkleCljeCksOCkteCkvuCksF/gpLbgpKjgpL/gpLXgpL7gpLAiLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoi4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLNf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/Ii5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiLgpLBf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSX4KWBX+CktuClgV/gpLYiLnNwbGl0KCJfIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOiJBIGg6bW0g4KS14KS+4KSc4KSk4KS+IixMVFM6IkEgaDptbTpzcyDgpLXgpL7gpJzgpKTgpL4iLEw6IkREL01NL1lZWVkiLExMOiJEIE1NTU0gWVlZWSIsTExMOiJEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkviIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4ifSxjYWxlbmRhcjp7c2FtZURheToiW+CkhuCknF0gTFQiLG5leHREYXk6IlvgpIngpKbgpY3gpK/gpL5dIExUIixuZXh0V2VlazoiZGRkZCwgTFQiLGxhc3REYXk6IlvgpJXgpL7gpLJdIExUIixsYXN0V2VlazoiW+CkruCkvuCkl+ClgOCksl0gZGRkZCwgTFQiLHNhbWVFbHNlOiJMIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6IiVz4KSu4KSn4KWN4KSv4KWHIixwYXN0OiIlc+CkquClguCksOCljeCkteClgCIsczplLG06ZSxtbTplLGg6ZSxoaDplLGQ6ZSxkZDplLE06ZSxNTTplLHk6ZSx5eTplfSxwcmVwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLGZ1bmN0aW9uKHQpe3JldHVybiBpW3RdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvXGQvZyxmdW5jdGlvbih0KXtyZXR1cm4gblt0XX0pfSxtZXJpZGllbVBhcnNlOi/gpLDgpL7gpKTgpY3gpLDgpYB84KS44KSV4KS+4KSz4KWAfOCkpuClgeCkquCkvuCksOClgHzgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAvLG1lcmlkaWVtSG91cjpmdW5jdGlvbih0LGUpe3JldHVybiAxMj09PXQmJih0PTApLCLgpLDgpL7gpKTgpY3gpLDgpYAiPT09ZT90PDQ/dDp0KzEyOiLgpLjgpJXgpL7gpLPgpYAiPT09ZT90OiLgpKbgpYHgpKrgpL7gpLDgpYAiPT09ZT90Pj0xMD90OnQrMTI6IuCkuOCkvuCkr+CkguCkleCkvuCks+ClgCI9PT1lP3QrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHQ8ND8i4KSw4KS+4KSk4KWN4KSw4KWAIjp0PDEwPyLgpLjgpJXgpL7gpLPgpYAiOnQ8MTc/IuCkpuClgeCkquCkvuCksOClgCI6dDwyMD8i4KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAIjoi4KSw4KS+4KSk4KWN4KSw4KWAIn0sd2Vlazp7ZG93OjAsZG95OjZ9fSk7cmV0dXJuIHJ9KX0sZnVuY3Rpb24odCxlLG4peyFmdW5jdGlvbih0LGUpe2UobigzNjEpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoIm1zIix7bW9udGhzOiJKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXIiLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6Ikphbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiJBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUiLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoiQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJBaF9Jc19TbF9SYl9LbV9KbV9TYiIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhILm1tIixMVFM6IkhILm1tLnNzIixMOiJERC9NTS9ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSJ9LG1lcmlkaWVtUGFyc2U6L3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDEyPT09dCYmKHQ9MCksInBhZ2kiPT09ZT90OiJ0ZW5nYWhhcmkiPT09ZT90Pj0xMT90OnQrMTI6InBldGFuZyI9PT1lfHwibWFsYW0iPT09ZT90KzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PDExPyJwYWdpIjp0PDE1PyJ0ZW5nYWhhcmkiOnQ8MTk/InBldGFuZyI6Im1hbGFtIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltIYXJpIGluaSBwdWt1bF0gTFQiLG5leHREYXk6IltFc29rIHB1a3VsXSBMVCIsbmV4dFdlZWs6ImRkZGQgW3B1a3VsXSBMVCIsbGFzdERheToiW0tlbG1hcmluIHB1a3VsXSBMVCIsbGFzdFdlZWs6ImRkZGQgW2xlcGFzIHB1a3VsXSBMVCIsc2FtZUVsc2U6IkwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZToiZGFsYW0gJXMiLHBhc3Q6IiVzIHlhbmcgbGVwYXMiLHM6ImJlYmVyYXBhIHNhYXQiLG06InNlbWluaXQiLG1tOiIlZCBtaW5pdCIsaDoic2VqYW0iLGhoOiIlZCBqYW0iLGQ6InNlaGFyaSIsZGQ6IiVkIGhhcmkiLE06InNlYnVsYW4iLE1NOiIlZCBidWxhbiIseToic2V0YWh1biIseXk6IiVkIHRhaHVuIn0sd2Vlazp7ZG93OjEsZG95Ojd9fSk7cmV0dXJuIGV9KX0sZnVuY3Rpb24odCxlLG4peyFmdW5jdGlvbih0LGUpe2UobigzNjEpKX0odGhpcyxmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7dmFyIGU9dC5kZWZpbmVMb2NhbGUoIm1zLW15Iix7bW9udGhzOiJKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXIiLnNwbGl0KCJfIiksbW9udGhzU2hvcnQ6Ikphbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzIi5zcGxpdCgiXyIpLHdlZWtkYXlzOiJBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUiLnNwbGl0KCJfIiksd2Vla2RheXNTaG9ydDoiQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiIi5zcGxpdCgiXyIpLHdlZWtkYXlzTWluOiJBaF9Jc19TbF9SYl9LbV9KbV9TYiIuc3BsaXQoIl8iKSxsb25nRGF0ZUZvcm1hdDp7TFQ6IkhILm1tIixMVFM6IkhILm1tLnNzIixMOiJERC9NTS9ZWVlZIixMTDoiRCBNTU1NIFlZWVkiLExMTDoiRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSIsTExMTDoiZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSJ9LG1lcmlkaWVtUGFyc2U6L3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDEyPT09dCYmKHQ9MCksInBhZ2kiPT09ZT90OiJ0ZW5nYWhhcmkiPT09ZT90Pj0xMT90OnQrMTI6InBldGFuZyI9PT1lfHwibWFsYW0iPT09ZT90KzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PDExPyJwYWdpIjp0PDE1PyJ0ZW5nYWhhcmkiOnQ8MTk/InBldGFuZyI6Im1hbGFtIn0sY2FsZW5kYXI6e3NhbWVEYXk6IltIYXJpIGluaSBwdWt1bF0gTFQiLG5leHREYXk6IltFc29rIHB1a3VsXSBMVCIsbmV4dFdlZWs6ImRkZGQgW3B1a3VsXSBMVCIsbGFzdERheToiW0tlbG1hcmluIHB1a3VsXSBMVCIsbGFz", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("MjAgMW55MHwxOGU1IiwiQXNpYS9IZWJyb258RUVUIEVFU1R8LTIwIC0zMHwwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFCVnkwIFRiMCAxeGQxIE1LWCBiQjAgY24wIDFjTjAgMWEwMCAxZkEwIDFjTDAgMWNOMCAxblgwIDEyMTAgMW56MCAxMjIwIDFueTAgMTIyMCAxcW0wIDEyMjAgMW55MCAxMjIwIDFueTAgMTIyMCAxbnkwfDI1ZTQiLCJBc2lhL0hvbmdfS29uZ3xIS1R8LTgwfDB8fDczZTUiLCJBc2lhL0hvdmR8SE9WVCBIT1ZTVHwtNzAgLTgwfDAxMDEwMTAxMDEwMTB8MU84SDAgMWNKMCAxY1AwIDFjSjAgMWNQMCAxZngwIDFjUDAgMWNKMCAxY1AwIDFjSjAgMWNQMCAxY0owfDgxZTMiLCJBc2lhL0lya3V0c2t8SVJLVCBJUktTVCBJUktUfC04MCAtOTAgLTkwfDAxMDIwfDFCV2kwIDFxTTAgV00wIDhIejB8NjBlNCIsIkV1cm9wZS9Jc3RhbmJ1bHxFRVQgRUVTVHwtMjAgLTMwfDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFCV3AwIDFxTTAgWGMwIDFxbzAgV00wIDFxTTAgMTFBMCAxbzAwIDEyMDAgMW5BMCAxMUEwIDF0QTAgVTAwIDFxTTAgV00wIDFxTTAgV00wIDFxTTAgMTFBMCAxbzAwIDExQTAgMW8wMHwxM2U2IiwiQXNpYS9KYWthcnRhfFdJQnwtNzB8MHx8MzFlNiIsIkFzaWEvSmF5YXB1cmF8V0lUfC05MHwwfHwyNmU0IiwiQXNpYS9KZXJ1c2FsZW18SVNUIElEVHwtMjAgLTMwfDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFCVkEwIDE3WDAgMWtwMCAxZHowIDFjMTAgMWFMMCAxZU4wIDFvTDAgMTBOMCAxb0wwIDEwTjAgMW9MMCAxME4wIDFyejAgVzEwIDFyejAgVzEwIDFyejAgMTBOMCAxb0wwIDEwTjAgMW9MMHw4MWU0IiwiQXNpYS9LYWJ1bHxBRlR8LTR1fDB8fDQ2ZTUiLCJBc2lhL0thbWNoYXRrYXxQRVRUIFBFVFNUIFBFVFR8LWMwIC1jMCAtYjB8MDEyMHwxQldlMCAxcU4wIFdNMHwxOGU0IiwiQXNpYS9LYXJhY2hpfFBLVHwtNTB8MHx8MjRlNiIsIkFzaWEvVXJ1bXFpfFhKVHwtNjB8MHx8MzJlNSIsIkFzaWEvS2F0aG1hbmR1fE5QVHwtNUp8MHx8MTJlNSIsIkFzaWEvS2hhbmR5Z2F8VkxBVCBWTEFTVCBWTEFUIFlBS1QgWUFLVHwtYTAgLWIwIC1iMCAtYTAgLTkwfDAxMDIzNHwxQldnMCAxcU0wIFdNMCAxN1YwIDd6RDB8NjZlMiIsIkFzaWEvS3Jhc25veWFyc2t8S1JBVCBLUkFTVCBLUkFUfC03MCAtODAgLTgwfDAxMDIwfDFCV2owIDFxTTAgV00wIDhIejB8MTBlNSIsIkFzaWEvS3VhbGFfTHVtcHVyfE1ZVHwtODB8MHx8NzFlNSIsIkFzaWEvTWFnYWRhbnxNQUdUIE1BR1NUIE1BR1QgTUFHVHwtYjAgLWMwIC1jMCAtYTB8MDEwMjN8MUJXZjAgMXFNMCBXTTAgOEh6MHw5NWUzIiwiQXNpYS9NYWthc3NhcnxXSVRBfC04MHwwfHwxNWU1IiwiQXNpYS9NYW5pbGF8UEhUfC04MHwwfHwyNGU2IiwiRXVyb3BlL0F0aGVuc3xFRVQgRUVTVHwtMjAgLTMwfDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFCV3AwIDFxTTAgV00wIDFxTTAgV00wIDFxTTAgMTFBMCAxbzAwIDExQTAgMW8wMCAxMUEwIDFvMDAgMTFBMCAxcU0wIFdNMCAxcU0wIFdNMCAxcU0wIDExQTAgMW8wMCAxMUEwIDFvMDB8MzVlNSIsIkFzaWEvTm92b2t1em5ldHNrfEtSQVQgTk9WU1QgTk9WVCBOT1ZUfC03MCAtNzAgLTYwIC03MHwwMTIzMHwxQldqMCAxcU4wIFdNMCA4SHowfDU1ZTQiLCJBc2lhL05vdm9zaWJpcnNrfE5PVlQgTk9WU1QgTk9WVHwtNjAgLTcwIC03MHwwMTAyMHwxQldrMCAxcU0wIFdNMCA4SHowfDE1ZTUiLCJBc2lhL09tc2t8T01TVCBPTVNTVCBPTVNUfC02MCAtNzAgLTcwfDAxMDIwfDFCV2swIDFxTTAgV00wIDhIejB8MTJlNSIsIkFzaWEvT3JhbHxPUkFUfC01MHwwfHwyN2U0IiwiQXNpYS9QeW9uZ3lhbmd8S1NUIEtTVHwtOTAgLTh1fDAxfDFQNEQwfDI5ZTUiLCJBc2lhL1F5enlsb3JkYXxRWVpUfC02MHwwfHw3M2U0IiwiQXNpYS9SYW5nb29ufE1NVHwtNnV8MHx8NDhlNSIsIkFzaWEvU2FraGFsaW58U0FLVCBTQUtTVCBTQUtUfC1hMCAtYjAgLWIwfDAxMDIwMnwxQldnMCAxcU0wIFdNMCA4SHowIDNyZDB8NThlNCIsIkFzaWEvVGFzaGtlbnR8VVpUfC01MHwwfHwyM2U1IiwiQXNpYS9TZW91bHxLU1R8LTkwfDB8fDIzZTYiLCJBc2lhL1NpbmdhcG9yZXxTR1R8LTgwfDB8fDU2ZTUiLCJBc2lhL1NyZWRuZWtvbHltc2t8TUFHVCBNQUdTVCBNQUdUIFNSRVR8LWIwIC1jMCAtYzAgLWIwfDAxMDIzfDFCV2YwIDFxTTAgV00wIDhIejB8MzVlMiIsIkFzaWEvVGJpbGlzaXxHRVR8LTQwfDB8fDExZTUiLCJBc2lhL1RlaHJhbnxJUlNUIElSRFR8LTN1IC00dXwwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMHwxQlRVdSAxZHowIDFjcDAgMWR6MCAxY3AwIDFkejAgMWNOMCAxZHowIDFjcDAgMWR6MCAxY3AwIDFkejAgMWNwMCAxZHowIDFjTjAgMWR6MCAxY3AwIDFkejAgMWNwMCAxZHowIDFjcDAgMWR6MHwxNGU2IiwiQXNpYS9UaGltcGh1fEJUVHwtNjB8MHx8NzllMyIsIkFzaWEvVG9reW98SlNUfC05MHwwfHwzOGU2IiwiQXNpYS9VbGFhbmJhYXRhcnxVTEFUIFVMQVNUfC04MCAtOTB8MDEwMTAxMDEwMTAxMHwxTzhHMCAxY0owIDFjUDAgMWNKMCAxY1AwIDFmeDAgMWNQMCAxY0owIDFjUDAgMWNKMCAxY1AwIDFjSjB8MTJlNSIsIkFzaWEvVXN0LU5lcmF8TUFHVCBNQUdTVCBNQUdUIFZMQVQgVkxBVHwtYjAgLWMwIC1jMCAtYjAgLWEwfDAxMDIzNHwxQldmMCAxcU0wIFdNMCAxN1YwIDd6RDB8NjVlMiIsIkFzaWEvVmxhZGl2b3N0b2t8VkxBVCBWTEFTVCBWTEFUfC1hMCAtYjAgLWIwfDAxMDIwfDFCV2cwIDFxTTAgV00wIDhIejB8NjBlNCIsIkFzaWEvWWFrdXRza3xZQUtUIFlBS1NUIFlBS1R8LTkwIC1hMCAtYTB8MDEwMjB8MUJXaDAgMXFNMCBXTTAgOEh6MHwyOGU0IiwiQXNpYS9ZZWthdGVyaW5idXJnfFlFS1QgWUVLU1QgWUVLVHwtNTAgLTYwIC02MHwwMTAyMHwxQldsMCAxcU0wIFdNMCA4SHowfDE0ZTUiLCJBc2lhL1llcmV2YW58QU1UIEFNU1R8LTQwIC01MHwwMTAxMHwxQldtMCAxcU0wIFdNMCAxcU0wfDEzZTUiLCJBdGxhbnRpYy9Bem9yZXN8QVpPVCBBWk9TVHwxMCAwfDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFCV3AwIDFxTTAgV00wIDFxTTAgV00wIDFxTTAgMTFBMCAxbzAwIDExQTAgMW8wMCAxMUEwIDFvMDAgMTFBMCAxcU0wIFdNMCAxcU0wIFdNMCAxcU0wIDExQTAgMW8wMCAxMUEwIDFvMDB8MjVlNCIsIkV1cm9wZS9MaXNib258V0VUIFdFU1R8MCAtMTB8MDEwMTAxMDEwMTAxMDEwMTAxMDEwMTB8MUJXcDAgMXFNMCBXTTAgMXFNMCBXTTAgMXFNMCAxMUEwIDFvMDAgMTFBMCAxbzAwIDExQTAgMW8wMCAxMUEwIDFxTTAgV00wIDFxTTAgV00wIDFxTTAgMTFBMCAxbzAwIDExQTAgMW8wMHwyN2U1IiwiQXRsYW50aWMvQ2FwZV9WZXJkZXxDVlR8MTB8MHx8NTBlNCIsIkF0bGFudGljL1NvdXRoX0dlb3JnaWF8R1NUfDIwfDB8fDMwIiwiQXRsYW50aWMvU3RhbmxleXxGS1NUIEZLVHwzMCA0MHwwMTB8MUM2UjAgVTEwfDIxZTIiLCJBdXN0cmFsaWEvU3lkbmV5fEFFRFQgQUVTVHwtYjAgLWEwfDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFDMTQwIDFjTTAgMWNNMCAxY00wIDFjTTAgMWZBMCAxY00wIDFjTTAgMWNNMCAxY00wIDFjTTAgMWNNMCAxY00wIDFjTTAgMWNNMCAxY00wIDFjTTAgMWZBMCAxY00wIDFjTTAgMWNNMCAxY00wfDQwZTUiLCJBdXN0cmFsaWEvQWRlbGFpZGV8QUNEVCBBQ1NUfC1hdSAtOXV8MDEwMTAxMDEwMTAxMDEwMTAxMDEwMTB8MUMxNHUgMWNNMCAxY00wIDFjTTAgMWNNMCAxZkEwIDFjTTAgMWNNMCAxY00wIDFjTTAgMWNNMCAxY00wIDFjTTAgMWNNMCAxY00wIDFjTTAgMWNNMCAxZkEwIDFjTTAgMWNNMCAxY00wIDFjTTB8MTFlNSIsIkF1c3RyYWxpYS9CcmlzYmFuZXxBRVNUfC1hMHwwfHwyMGU1IiwiQXVzdHJhbGlhL0RhcndpbnxBQ1NUfC05dXwwfHwxMmU0IiwiQXVzdHJhbGlhL0V1Y2xhfEFDV1NUfC04SnwwfHwzNjgiLCJBdXN0cmFsaWEvTG9yZF9Ib3dlfExIRFQgTEhTVHwtYjAgLWF1fDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFDMTMwIDFjTXUgMWNMdSAxY011IDFjTHUgMWZBdSAxY0x1IDFjTXUgMWNMdSAxY011IDFjTHUgMWNNdSAxY0x1IDFjTXUgMWNMdSAxY011IDFjTHUgMWZBdSAxY0x1IDFjTXUgMWNMdSAxY011fDM0NyIsIkF1c3RyYWxpYS9QZXJ0aHxBV1NUfC04MHwwfHwxOGU1IiwiUGFjaWZpYy9FYXN0ZXJ8RUFTU1QgRUFTVHw1MCA2MHwwMTAxMDEwMTAxMDEwMTAxMDEwMTB8MUMxZjAgMWZCMCAxblgwIEcxMCAxRUwwIE9wMCAxemIwIFJkMCAxd24wIFJkMCA0Nm4wIEFwMCAxTmIwIEFwMCAxTmIwIEFwMCAxTmIwIEFwMCAxTmIwIEFwMHwzMGUyIiwiRXVyb3BlL0R1YmxpbnxHTVQgSVNUfDAgLTEwfDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFCV3AwIDFxTTAgV00wIDFxTTAgV00wIDFxTTAgMTFBMCAxbzAwIDExQTAgMW8wMCAxMUEwIDFvMDAgMTFBMCAxcU0wIFdNMCAxcU0wIFdNMCAxcU0wIDExQTAgMW8wMCAxMUEwIDFvMDB8MTJlNSIsIkV0Yy9HTVQrMXxHTVQrMXwxMHwwfCIsIkV0Yy9HTVQrMTB8R01UKzEwfGEwfDB8IiwiRXRjL0dNVCsxMXxHTVQrMTF8YjB8MHwiLCJFdGMvR01UKzEyfEdNVCsxMnxjMHwwfCIsIkV0Yy9HTVQrMnxHTVQrMnwyMHwwfCIsIkV0Yy9HTVQrM3xHTVQrM3wzMHwwfCIsIkV0Yy9HTVQrNHxHTVQrNHw0MHwwfCIsIkV0Yy9HTVQrNXxHTVQrNXw1MHwwfCIsIkV0Yy9HTVQrNnxHTVQrNnw2MHwwfCIsIkV0Yy9HTVQrN3xHTVQrN3w3MHwwfCIsIkV0Yy9HTVQrOHxHTVQrOHw4MHwwfCIsIkV0Yy9HTVQrOXxHTVQrOXw5MHwwfCIsIkV0Yy9HTVQtMXxHTVQtMXwtMTB8MHwiLCJFdGMvR01ULTEwfEdNVC0xMHwtYTB8MHwiLCJFdGMvR01ULTExfEdNVC0xMXwtYjB8MHwiLCJFdGMvR01ULTEyfEdNVC0xMnwtYzB8MHwiLCJFdGMvR01ULTEzfEdNVC0xM3wtZDB8MHwiLCJFdGMvR01ULTE0fEdNVC0xNHwtZTB8MHwiLCJFdGMvR01ULTJ8R01ULTJ8LTIwfDB8IiwiRXRjL0dNVC0zfEdNVC0zfC0zMHwwfCIsIkV0Yy9HTVQtNHxHTVQtNHwtNDB8MHwiLCJFdGMvR01ULTV8R01ULTV8LTUwfDB8IiwiRXRjL0dNVC02fEdNVC02fC02MHwwfCIsIkV0Yy9HTVQtN3xHTVQtN3wtNzB8MHwiLCJFdGMvR01ULTh8R01ULTh8LTgwfDB8IiwiRXRjL0dNVC05fEdNVC05fC05MHwwfCIsIkV0Yy9VQ1R8VUNUfDB8MHwiLCJFdGMvVVRDfFVUQ3wwfDB8IiwiRXVyb3BlL0FzdHJha2hhbnwrMDMgKzA0fC0zMCAtNDB8MDEwMTAxfDFCV24wIDFxTTAgV00wIDhIejAgM3JkMCIsIkV1cm9wZS9Mb25kb258R01UIEJTVHwwIC0xMHwwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMHwxQldwMCAxcU0wIFdNMCAxcU0wIFdNMCAxcU0wIDExQTAgMW8wMCAxMUEwIDFvMDAgMTFBMCAxbzAwIDExQTAgMXFNMCBXTTAgMXFNMCBXTTAgMXFNMCAxMUEwIDFvMDAgMTFBMCAxbzAwfDEwZTYiLCJFdXJvcGUvQ2hpc2luYXV8RUVUIEVFU1R8LTIwIC0zMHwwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMHwxQldvMCAxcU0wIFdNMCAxcU0wIFdNMCAxcU0wIDExQTAgMW8wMCAxMUEwIDFvMDAgMTFBMCAxbzAwIDExQTAgMXFNMCBXTTAgMXFNMCBXTTAgMXFNMCAxMUEwIDFvMDAgMTFBMCAxbzAwfDY3ZTQiLCJFdXJvcGUvS2FsaW5pbmdyYWR8RUVUIEVFU1QgRkVUfC0yMCAtMzAgLTMwfDAxMDIwfDFCV28wIDFxTTAgV00wIDhIejB8NDRlNCIsIkV1cm9wZS9NaW5za3xFRVQgRUVTVCBGRVQgTVNLfC0yMCAtMzAgLTMwIC0zMHwwMTAyM3wxQldvMCAxcU0wIFdNMCA4SHkwfDE5ZTUiLCJFdXJvcGUvTW9zY293fE1TSyBNU0QgTVNLfC0zMCAtNDAgLTQwfDAxMDIwfDFCV24wIDFxTTAgV00wIDhIejB8MTZlNiIsIkV1cm9wZS9TYW1hcmF8U0FNVCBTQU1TVCBTQU1UfC00MCAtNDAgLTMwfDAxMjB8MUJXbTAgMXFOMCBXTTB8MTJlNSIsIkV1cm9wZS9TaW1mZXJvcG9sfEVFVCBFRVNUIE1TSyBNU0t8LTIwIC0zMCAtNDAgLTMwfDAxMDEwMTAxMDIzfDFCV3AwIDFxTTAgV00wIDFxTTAgV00wIDFxTTAgMTFBMCAxbzAwIDExejAgMW5XMHwzM2U0IiwiUGFjaWZpYy9Ib25vbHVsdXxIU1R8YTB8MHx8MzdlNCIsIkluZGlhbi9DaGFnb3N8SU9UfC02MHwwfHwzMGUyIiwiSW5kaWFuL0NocmlzdG1hc3xDWFR8LTcwfDB8fDIxZTIiLCJJbmRpYW4vQ29jb3N8Q0NUfC02dXwwfHw1OTYiLCJJbmRpYW4vS2VyZ3VlbGVufFRGVHwtNTB8MHx8MTMwIiwiSW5kaWFuL01haGV8U0NUfC00MHwwfHw3OWUzIiwiSW5kaWFuL01hbGRpdmVzfE1WVHwtNTB8MHx8MzVlNCIsIkluZGlhbi9NYXVyaXRpdXN8TVVUfC00MHwwfHwxNWU0IiwiSW5kaWFuL1JldW5pb258UkVUfC00MHwwfHw4NGU0IiwiUGFjaWZpYy9NYWp1cm98TUhUfC1jMHwwfHwyOGUzIiwiTUVUfE1FVCBNRVNUfC0xMCAtMjB8MDEwMTAxMDEwMTAxMDEwMTAxMDEwMTB8MUJXcDAgMXFNMCBXTTAgMXFNMCBXTTAgMXFNMCAxMUEwIDFvMDAgMTFBMCAxbzAwIDExQTAgMW8wMCAxMUEwIDFxTTAgV00wIDFxTTAgV00wIDFxTTAgMTFBMCAxbzAwIDExQTAgMW8wMCIsIlBhY2lmaWMvQ2hhdGhhbXxDSEFEVCBDSEFTVHwtZEogLWNKfDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwfDFDMTIwIDFhMDAgMWZBMCAxYTAwIDFmQTAgMWNNMCAxZkEwIDFhMDAgMWZBMCAxYTAwIDFmQTAgMWEwMCAxZkEwIDFhMDAgMWZBMCAxYTAwIDFmQTAgMWNNMCAxZkEwIDFhMDAgMWZBMCAxYTAwfDYwMCIsIlBhY2lmaWMvQXBpYXxTU1QgU0RUIFdTRFQgV1NTVHxiMCBhMCAtZTAgLWQwfDAxMDEyMzIzMjMyMzIzMjMyMzIzMjMyfDFEYm4wIDFmZjAgMWEwMCBDSTAgQVEwIDFjTTAgMWZBMCAxYTAwIDFmQTAgMWEwMCAxZkEwIDFhMDAgMWZBMCAxYTAwIDFmQTAgMWEwMCAxZkEwIDFjTTAgMWZBMCAxYTAwIDFmQTAgMWEwMHwzN2UzIiwiUGFjaWZpYy9Cb3VnYWludmlsbGV8UEdUIEJTVHwtYTAgLWIwfDAxfDFOd0UwfDE4ZTQiLCJQYWNpZmljL0NodXVrfENIVVR8LWEwfDB8fDQ5ZTMiLCJQYWNpZmljL0VmYXRlfFZVVHwtYjB8MHx8NjZlMyIsIlBhY2lmaWMvRW5kZXJidXJ5fFBIT1R8LWQwfDB8fDEiLCJQYWNpZmljL0Zha2FvZm98VEtUIFRLVHxiMCAtZDB8MDF8MUdmbjB8NDgzIiwiUGFjaWZpYy9GaWppfEZKU1QgRkpUfC1kMCAtYzB8MDEwMTAxMDEwMTAxMDEwMTAxMDEwMTB8MUJXZTAgMW8wMCBSYzAgMXdvMCBBbzAgMU5jMCBBbzAgMVEwMCB4ejAgMVNOMCB1TTAgMVNNMCB1TTAgMVZBMCBzMDAgMVZBMCB1TTAgMVNNMCB1TTAgMVNNMCB1TTAgMVNNMHw4OGU0IiwiUGFjaWZpYy9GdW5hZnV0aXxUVlR8LWMwfDB8fDQ1ZTIiLCJQYWNpZmljL0dhbGFwYWdvc3xHQUxUfDYwfDB8fDI1ZTMiLCJQYWNpZmljL0dhbWJpZXJ8R0FNVHw5MHwwfHwxMjUiLCJQYWNpZmljL0d1YWRhbGNhbmFsfFNCVHwtYjB8MHx8MTFlNCIsIlBhY2lmaWMvR3VhbXxDaFNUfC1hMHwwfHwxN2U0IiwiUGFjaWZpYy9LaXJpdGltYXRpfExJTlR8LWUwfDB8fDUxZTIiLCJQYWNpZmljL0tvc3JhZXxLT1NUfC1iMHwwfHw2NmUyIiwiUGFjaWZpYy9NYXJxdWVzYXN8TUFSVHw5dXwwfHw4NmUyIiwiUGFjaWZpYy9QYWdvX1BhZ298U1NUfGIwfDB8fDM3ZTIiLCJQYWNpZmljL05hdXJ1fE5SVHwtYzB8MHx8MTBlMyIsIlBhY2lmaWMvTml1ZXxOVVR8YjB8MHx8MTJlMiIsIlBhY2lmaWMvTm9yZm9sa3xORlQgTkZUfC1idSAtYjB8MDF8MVBvQ3V8MjVlNCIsIlBhY2lmaWMvTm91bWVhfE5DVHwtYjB8MHx8OThlMyIsIlBhY2lmaWMvUGFsYXV8UFdUfC05MHwwfHwyMWUzIiwiUGFjaWZpYy9QaXRjYWlybnxQU1R8ODB8MHx8NTYiLCJQYWNpZmljL1BvaG5wZWl8UE9OVHwtYjB8MHx8MzRlMyIsIlBhY2lmaWMvUG9ydF9Nb3Jlc2J5fFBHVHwtYTB8MHx8MjVlNCIsIlBhY2lmaWMvUmFyb3RvbmdhfENLVHxhMHwwfHwxM2UzIiwiUGFjaWZpYy9UYWhpdGl8VEFIVHxhMHwwfHwxOGU0IiwiUGFjaWZpYy9UYXJhd2F8R0lMVHwtYzB8MHx8MjllMyIsIlBhY2lmaWMvVG9uZ2F0YXB1fFRPVHwtZDB8MHx8NzVlMyIsIlBhY2lmaWMvV2FrZXxXQUtUfC1jMHwwfHwxNmUzIiwiUGFjaWZpYy9XYWxsaXN8V0ZUfC1jMHwwfHw5NCJdLGxpbmtzOlsiQWZyaWNhL0FiaWRqYW58QWZyaWNhL0FjY3JhIiwiQWZyaWNhL0FiaWRqYW58QWZyaWNhL0JhbWFrbyIsIkFmcmljYS9BYmlkamFufEFmcmljYS9CYW5qdWwiLCJBZnJpY2EvQWJpZGphbnxBZnJpY2EvQmlzc2F1IiwiQWZyaWNhL0FiaWRqYW58QWZyaWNhL0NvbmFrcnkiLCJBZnJpY2EvQWJpZGphbnxBZnJpY2EvRGFrYXIiLCJBZnJpY2EvQWJpZGphbnxBZnJpY2EvRnJlZXRvd24iLCJBZnJpY2EvQWJpZGphbnxBZnJpY2EvTG9tZSIsIkFmcmljYS9BYmlkamFufEFmcmljYS9Nb25yb3ZpYSIsIkFmcmljYS9BYmlkamFufEFmcmljYS9Ob3Vha2Nob3R0IiwiQWZyaWNhL0FiaWRqYW58QWZyaWNhL091YWdhZG91Z291IiwiQWZyaWNhL0FiaWRqYW58QWZyaWNhL1Nhb19Ub21lIiwiQWZyaWNhL0FiaWRqYW58QWZyaWNhL1RpbWJ1a3R1IiwiQWZyaWNhL0FiaWRqYW58QW1lcmljYS9EYW5tYXJrc2hhdm4iLCJBZnJpY2EvQWJpZGphbnxBdGxhbnRpYy9SZXlramF2aWsiLCJBZnJpY2EvQWJpZGphbnxBdGxhbnRpYy9TdF9IZWxlbmEiLCJBZnJpY2EvQWJpZGphbnxFdGMvR01UIiwiQWZyaWNhL0FiaWRqYW58RXRjL0dNVCswIiwiQWZyaWNhL0FiaWRqYW58RXRjL0dNVC0wIiwiQWZyaWNhL0FiaWRqYW58RXRjL0dNVDAiLCJBZnJpY2EvQWJpZGphbnxFdGMvR3JlZW53aWNoIiwiQWZyaWNhL0FiaWRqYW58R01UIiwiQWZyaWNhL0FiaWRqYW58R01UKzAiLCJBZnJpY2EvQWJpZGphbnxHTVQtMCIsIkFmcmljYS9BYmlkamFufEdNVDAiLCJBZnJpY2EvQWJpZGphbnxHcmVlbndpY2giLCJBZnJpY2EvQWJpZGphbnxJY2VsYW5kIiwiQWZyaWNhL0FsZ2llcnN8QWZyaWNhL1R1bmlzIiwiQWZyaWNhL0NhaXJvfEVneXB0IiwiQWZyaWNhL0Nhc2FibGFuY2F8QWZyaWNhL0VsX0FhaXVuIiwiQWZyaWNhL0pvaGFubmVzYnVyZ3xBZnJpY2EvTWFzZXJ1IiwiQWZyaWNhL0pvaGFubmVzYnVyZ3xBZnJpY2EvTWJhYmFuZSIsIkFmcmljYS9LaGFydG91bXxBZnJpY2EvQWRkaXNfQWJhYmEiLCJBZnJpY2EvS2hhcnRvdW18QWZyaWNhL0FzbWFyYSIsIkFmcmljYS9LaGFydG91bXxBZnJpY2EvQXNtZXJhIiwiQWZyaWNhL0toYXJ0b3VtfEFmcmljYS9EYXJfZXNfU2FsYWFtIiwiQWZyaWNhL0toYXJ0b3VtfEFmcmljYS9Eamlib3V0aSIsIkFmcmljYS9LaGFydG91bXxBZnJpY2EvSnViYSIsIkFmcmljYS9LaGFydG91bXxBZnJpY2EvS2FtcGFsYSIsIkFmcmljYS9LaGFydG91bXxBZnJpY2EvTW9nYWRpc2h1IiwiQWZyaWNhL0toYXJ0b3VtfEFmcmljYS9OYWlyb2JpIiwiQWZyaWNhL0toYXJ0b3VtfEluZGlhbi9BbnRhbmFuYXJpdm8iLCJBZnJpY2EvS2hhcnRvdW18SW5kaWFuL0NvbW9ybyIsIkFmcmljYS9LaGFydG91bXxJbmRpYW4vTWF5b3R0ZSIsIkFmcmljYS9MYWdvc3xBZnJpY2EvQmFuZ3VpIiwiQWZyaWNhL0xhZ29zfEFmcmljYS9CcmF6emF2aWxsZSIsIkFmcmljYS9MYWdvc3xBZnJpY2EvRG91YWxhIiwiQWZyaWNhL0xhZ29zfEFmcmljYS9LaW5zaGFzYSIsIkFmcmljYS9MYWdvc3xBZnJpY2EvTGlicmV2aWxsZSIsIkFmcmljYS9MYWdvc3xBZnJpY2EvTHVhbmRhIiwiQWZyaWNhL0xhZ29zfEFmcmljYS9NYWxhYm8iLCJBZnJpY2EvTGFnb3N8QWZyaWNhL05kamFtZW5hIiwiQWZyaWNhL0xhZ29zfEFmcmljYS9OaWFtZXkiLCJBZnJpY2EvTGFnb3N8QWZyaWNhL1BvcnRvLU5vdm8iLCJBZnJpY2EvTWFwdXRvfEFmcmljYS9CbGFudHlyZSIsIkFmcmljYS9NYXB1dG98QWZyaWNhL0J1anVtYnVyYSIsIkFmcmljYS9NYXB1dG98QWZyaWNhL0dhYm9yb25lIiwiQWZyaWNhL01hcHV0b3xBZnJpY2EvSGFyYXJlIiwiQWZyaWNhL01hcHV0b3xBZnJpY2EvS2lnYWxpIiwiQWZyaWNhL01hcHV0b3xBZnJpY2EvTHVidW1iYXNoaSIsIkFmcmljYS9NYXB1dG98QWZyaWNhL0x1c2FrYSIsIkFmcmljYS9Ucmlwb2xpfExpYnlhIiwiQW1lcmljYS9BZGFrfEFtZXJpY2EvQXRrYSIsIkFtZXJpY2EvQWRha3xVUy9BbGV1dGlhbiIsIkFtZXJpY2EvQW5jaG9yYWdlfEFtZXJpY2EvSnVuZWF1IiwiQW1lcmljYS9BbmNob3JhZ2V8QW1lcmljYS9Ob21lIiwiQW1lcmljYS9BbmNob3JhZ2V8QW1lcmljYS9TaXRrYSIsIkFtZXJpY2EvQW5jaG9yYWdlfEFtZXJpY2EvWWFrdXRhdCIsIkFtZXJpY2EvQW5jaG9yYWdlfFVTL0FsYXNrYSIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9DYXRhbWFyY2EiLCJBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXN8QW1lcmljYS9BcmdlbnRpbmEvQ29tb2RSaXZhZGF2aWEiLCJBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXN8QW1lcmljYS9BcmdlbnRpbmEvQ29yZG9iYSIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9KdWp1eSIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9MYV9SaW9qYSIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9NZW5kb3phIiwiQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzfEFtZXJpY2EvQXJnZW50aW5hL1Jpb19HYWxsZWdvcyIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9TYWx0YSIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9TYW5fSnVhbiIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9TYW5fTHVpcyIsIkFtZXJpY2EvQXJnZW50aW5hL0J1ZW5vc19BaXJlc3xBbWVyaWNhL0FyZ2VudGluYS9UdWN1bWFuIiwiQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzfEFtZXJpY2EvQXJnZW50aW5hL1VzaHVhaWEiLCJBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXN8QW1lcmljYS9CdWVub3NfQWlyZXMiLCJBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXN8QW1lcmljYS9DYXRhbWFyY2EiLCJBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXN8QW1lcmljYS9Db3Jkb2JhIiwiQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzfEFtZXJpY2EvSnVqdXkiLCJBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXN8QW1lcmljYS9NZW5kb3phIiwiQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzfEFtZXJpY2EvUm9zYXJpbyIsIkFtZXJpY2EvQ2FtcG9fR3JhbmRlfEFtZXJpY2EvQ3VpYWJhIiwiQW1lcmljYS9DaGljYWdvfEFtZXJpY2EvSW5kaWFuYS9Lbm94IiwiQW1lcmljYS9DaGljYWdvfEFtZXJpY2EvSW5kaWFuYS9UZWxsX0NpdHkiLCJBbWVyaWNhL0NoaWNhZ298QW1lcmljYS9Lbm94X0lOIiwiQW1lcmljYS9DaGljYWdvfEFtZXJpY2EvTWF0YW1vcm9zIiwiQW1lcmljYS9DaGljYWdvfEFtZXJpY2EvTWVub21pbmVlIiwiQW1lcmljYS9DaGljYWdvfEFtZXJpY2EvTm9ydGhfRGFrb3RhL0NlbnRlciIsIkFtZXJpY2EvQ2hpY2Fnb3xBbWVyaWNhL05vcnRoX0Rha290YS9OZXdfU2FsZW0iLCJBbWVyaWNhL0NoaWNhZ298QW1lcmljYS9SYWlueV9SaXZlciIsIkFtZXJpY2EvQ2hpY2Fnb3xBbWVyaWNhL1Jhbmtpbl9JbmxldCIsIkFtZXJpY2EvQ2hpY2Fnb3xBbWVyaWNhL1Jlc29sdXRlIiwiQW1lcmljYS9DaGljYWdvfEFtZXJpY2EvV2lubmlwZWciLCJBbWVyaWNhL0NoaWNhZ298Q1NUNkNEVCIsIkFtZXJpY2EvQ2hpY2Fnb3xDYW5hZGEvQ2VudHJhbCIsIkFtZXJpY2EvQ2hpY2Fnb3xVUy9DZW50cmFsIiwiQW1lcmljYS9DaGljYWdvfFVTL0luZGlhbmEtU3RhcmtlIiwiQW1lcmljYS9DaGlodWFodWF8QW1lcmljYS9NYXphdGxhbiIsIkFtZXJpY2EvQ2hpaHVhaHVhfE1leGljby9CYWphU3VyIiwiQW1lcmljYS9EZW52ZXJ8QW1lcmljYS9Cb2lzZSIsIkFtZXJpY2EvRGVudmVyfEFtZXJpY2EvQ2FtYnJpZGdlX0JheSIsIkFtZXJpY2EvRGVudmVyfEFtZXJpY2EvRWRtb250b24iLCJBbWVyaWNhL0RlbnZlcnxBbWVyaWNhL0ludXZpayIsIkFtZXJpY2EvRGVudmVyfEFtZXJpY2EvT2ppbmFnYSIsIkFtZXJpY2EvRGVudmVyfEFtZXJpY2EvU2hpcHJvY2siLCJBbWVyaWNhL0RlbnZlcnxBbWVyaWNhL1llbGxvd2tuaWZlIiwiQW1lcmljYS9EZW52ZXJ8Q2FuYWRhL01vdW50YWluIiwiQW1lcmljYS9EZW52ZXJ8TVNUN01EVCIsIkFtZXJpY2EvRGVudmVyfE5hdmFqbyIsIkFtZXJpY2EvRGVudmVyfFVTL01vdW50YWluIiwiQW1lcmljYS9Gb3J0YWxlemF8QW1lcmljYS9CZWxlbSIsIkFtZXJpY2EvRm9ydGFsZXphfEFtZXJpY2EvTWFjZWlvIiwiQW1lcmljYS9Gb3J0YWxlemF8QW1lcmljYS9SZWNpZmUiLCJBbWVyaWNhL0ZvcnRhbGV6YXxBbWVyaWNhL1NhbnRhcmVtIiwiQW1lcmljYS9IYWxpZmF4fEFtZXJpY2EvR2xhY2VfQmF5IiwiQW1lcmljYS9IYWxpZmF4fEFtZXJpY2EvTW9uY3RvbiIsIkFtZXJpY2EvSGFsaWZheHxBbWVyaWNhL1RodWxlIiwiQW1lcmljYS9IYWxpZmF4fEF0bGFudGljL0Jlcm11ZGEiLCJBbWVyaWNhL0hhbGlmYXh8Q2FuYWRhL0F0bGFudGljIiwiQW1lcmljYS9IYXZhbmF8Q3ViYSIsIkFtZXJpY2EvTG9zX0FuZ2VsZXN8QW1lcmljYS9EYXdzb24iLCJBbWVyaWNhL0xvc19BbmdlbGVzfEFtZXJpY2EvRW5zZW5hZGEiLCJBbWVyaWNhL0xvc19BbmdlbGVzfEFtZXJpY2EvU2FudGFfSXNhYmVsIiwiQW1lcmljYS9Mb3NfQW5nZWxlc3xBbWVyaWNhL1RpanVhbmEiLCJBbWVyaWNhL0xvc19BbmdlbGVzfEFtZXJpY2EvVmFuY291dmVyIiwiQW1lcmljYS9Mb3NfQW5nZWxlc3xBbWVyaWNhL1doaXRlaG9yc2UiLCJBbWVyaWNhL0xvc19BbmdlbGVzfENhbmFkYS9QYWNpZmljIiwiQW1lcmljYS9Mb3NfQW5nZWxlc3xDYW5hZGEvWXVrb24iLCJBbWVyaWNhL0xvc19BbmdlbGVzfE1leGljby9CYWphTm9ydGUiLCJBbWVyaWNhL0xvc19BbmdlbGVzfFBTVDhQRFQiLCJBbWVyaWNhL0xvc19BbmdlbGVzfFVTL1BhY2lmaWMiLCJBbWVyaWNhL0xvc19BbmdlbGVzfFVTL1BhY2lmaWMtTmV3IiwiQW1lcmljYS9NYW5hZ3VhfEFtZXJpY2EvQmVsaXplIiwiQW1lcmljYS9NYW5hZ3VhfEFtZXJpY2EvQ29zdGFfUmljYSIsIkFtZXJpY2EvTWFuYWd1YXxBbWVyaWNhL0VsX1NhbHZhZG9yIiwiQW1lcmljYS9NYW5hZ3VhfEFtZXJpY2EvR3VhdGVtYWxhIiwiQW1lcmljYS9NYW5hZ3VhfEFtZXJpY2EvUmVnaW5hIiwiQW1lcmljYS9NYW5hZ3VhfEFtZXJpY2EvU3dpZnRfQ3VycmVudCIsIkFtZXJpY2EvTWFuYWd1YXxBbWVyaWNhL1RlZ3VjaWdhbHBhIiwiQW1lcmljYS9NYW5hZ3VhfENhbmFkYS9FYXN0LVNhc2thdGNoZXdhbiIsIkFtZXJpY2EvTWFuYWd1YXxDYW5hZGEvU2Fza2F0Y2hld2FuIiwiQW1lcmljYS9NYW5hdXN8QW1lcmljYS9Cb2FfVmlzdGEiLCJBbWVyaWNhL01hbmF1c3xBbWVyaWNhL1BvcnRvX1ZlbGhvIiwiQW1lcmljYS9NYW5hdXN8QnJhemlsL1dlc3QiLCJBbWVyaWNhL01leGljb19DaXR5fEFtZXJpY2EvTWVyaWRhIiwiQW1lcmljYS9NZXhpY29fQ2l0eXxBbWVyaWNhL01vbnRlcnJleSIsIkFtZXJpY2EvTWV4aWNvX0NpdHl8TWV4aWNvL0dlbmVyYWwiLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvRGV0cm9pdCIsIkFtZXJpY2EvTmV3X1lvcmt8QW1lcmljYS9Gb3J0X1dheW5lIiwiQW1lcmljYS9OZXdfWW9ya3xBbWVyaWNhL0luZGlhbmEvSW5kaWFuYXBvbGlzIiwiQW1lcmljYS9OZXdfWW9ya3xBbWVyaWNhL0luZGlhbmEvTWFyZW5nbyIsIkFtZXJpY2EvTmV3X1lvcmt8QW1lcmljYS9JbmRpYW5hL1BldGVyc2J1cmciLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvSW5kaWFuYS9WZXZheSIsIkFtZXJpY2EvTmV3X1lvcmt8QW1lcmljYS9JbmRpYW5hL1ZpbmNlbm5lcyIsIkFtZXJpY2EvTmV3X1lvcmt8QW1lcmljYS9JbmRpYW5hL1dpbmFtYWMiLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvSW5kaWFuYXBvbGlzIiwiQW1lcmljYS9OZXdfWW9ya3xBbWVyaWNhL0lxYWx1aXQiLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvS2VudHVja3kvTG91aXN2aWxsZSIsIkFtZXJpY2EvTmV3X1lvcmt8QW1lcmljYS9LZW50dWNreS9Nb250aWNlbGxvIiwiQW1lcmljYS9OZXdfWW9ya3xBbWVyaWNhL0xvdWlzdmlsbGUiLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvTW9udHJlYWwiLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvTmFzc2F1IiwiQW1lcmljYS9OZXdfWW9ya3xBbWVyaWNhL05pcGlnb24iLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvUGFuZ25pcnR1bmciLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvVGh1bmRlcl9CYXkiLCJBbWVyaWNhL05ld19Zb3JrfEFtZXJpY2EvVG9yb250byIsIkFtZXJpY2EvTmV3X1lvcmt8Q2FuYWRhL0Vhc3Rlcm4iLCJBbWVyaWNhL05ld19Zb3JrfEVTVDVFRFQiLCJBbWVyaWNhL05ld19Zb3JrfFVTL0Vhc3QtSW5kaWFuYSIsIkFtZXJpY2EvTmV3X1lvcmt8VVMvRWFzdGVybiIsIkFtZXJpY2EvTmV3X1lvcmt8VVMvTWljaGlnYW4iLCJBbWVyaWNhL05vcm9uaGF8QnJhemlsL0RlTm9yb25oYSIsIkFtZXJpY2EvUGFuYW1hfEFtZXJpY2EvQXRpa29rYW4iLCJBbWVyaWNhL1BhbmFtYXxBbWVyaWNhL0NheW1hbiIsIkFtZXJpY2EvUGFuYW1hfEFtZXJpY2EvQ29yYWxfSGFyYm91ciIsIkFtZXJpY2EvUGFuYW1hfEFtZXJpY2EvSmFtYWljYSIsIkFtZXJpY2EvUGFuYW1hfEVTVCIsIkFtZXJpY2EvUGFuYW1hfEphbWFpY2EiLCJBbWVyaWNhL1Bob2VuaXh8QW1lcmljYS9DcmVzdG9uIiwiQW1lcmljYS9QaG9lbml4fEFtZXJpY2EvRGF3c29uX0NyZWVrIiwiQW1lcmljYS9QaG9lbml4fEFtZXJpY2EvSGVybW9zaWxsbyIsIkFtZXJpY2EvUGhvZW5peHxNU1QiLCJBbWVyaWNhL1Bob2VuaXh8VVMvQXJpem9uYSIsIkFtZXJpY2EvUmlvX0JyYW5jb3xBbWVyaWNhL0VpcnVuZXBlIiwiQW1lcmljYS9SaW9fQnJhbmNvfEFtZXJpY2EvUG9ydG9fQWNyZSIsIkFtZXJpY2EvUmlvX0JyYW5jb3xCcmF6aWwvQWNyZSIsIkFtZXJpY2EvU2FudGlhZ298QW50YXJjdGljYS9QYWxtZXIiLCJBbWVyaWNhL1NhbnRpYWdvfENoaWxlL0NvbnRpbmVudGFsIiwiQW1lcmljYS9TYW50b19Eb21pbmdvfEFtZXJpY2EvQW5ndWlsbGEiLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9BbnRpZ3VhIiwiQW1lcmljYS9TYW50b19Eb21pbmdvfEFtZXJpY2EvQXJ1YmEiLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9CYXJiYWRvcyIsIkFtZXJpY2EvU2FudG9fRG9taW5nb3xBbWVyaWNhL0JsYW5jLVNhYmxvbiIsIkFtZXJpY2EvU2FudG9fRG9taW5nb3xBbWVyaWNhL0N1cmFjYW8iLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9Eb21pbmljYSIsIkFtZXJpY2EvU2FudG9fRG9taW5nb3xBbWVyaWNhL0dyZW5hZGEiLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9HdWFkZWxvdXBlIiwiQW1lcmljYS9TYW50b19Eb21pbmdvfEFtZXJpY2EvS3JhbGVuZGlqayIsIkFtZXJpY2EvU2FudG9fRG9taW5nb3xBbWVyaWNhL0xvd2VyX1ByaW5jZXMiLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9NYXJpZ290IiwiQW1lcmljYS9TYW50b19Eb21pbmdvfEFtZXJpY2EvTWFydGluaXF1ZSIsIkFtZXJpY2EvU2FudG9fRG9taW5nb3xBbWVyaWNhL01vbnRzZXJyYXQiLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9Qb3J0X29mX1NwYWluIiwiQW1lcmljYS9TYW50b19Eb21pbmdvfEFtZXJpY2EvUHVlcnRvX1JpY28iLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9TdF9CYXJ0aGVsZW15IiwiQW1lcmljYS9TYW50b19Eb21pbmdvfEFtZXJpY2EvU3RfS2l0dHMiLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9TdF9MdWNpYSIsIkFtZXJpY2EvU2FudG9fRG9taW5nb3xBbWVyaWNhL1N0X1Rob21hcyIsIkFtZXJpY2EvU2FudG9fRG9taW5nb3xBbWVyaWNhL1N0X1ZpbmNlbnQiLCJBbWVyaWNhL1NhbnRvX0RvbWluZ298QW1lcmljYS9Ub3J0b2xhIiwiQW1lcmljYS9TYW50b19Eb21pbmdvfEFtZXJpY2EvVmlyZ2luIiwiQW1lcmljYS9TYW9fUGF1bG98Qg==", "base64"));
  res.write(new Buffer("cmF6aWwvRWFzdCIsIkFtZXJpY2EvU3RfSm9obnN8Q2FuYWRhL05ld2ZvdW5kbGFuZCIsIkFzaWEvQXF0b2JlfEFzaWEvQXF0YXUiLCJBc2lhL0FzaGdhYmF0fEFzaWEvQXNoa2hhYmFkIiwiQXNpYS9CYWdoZGFkfEFzaWEvQWRlbiIsIkFzaWEvQmFnaGRhZHxBc2lhL0JhaHJhaW4iLCJBc2lhL0JhZ2hkYWR8QXNpYS9LdXdhaXQiLCJBc2lhL0JhZ2hkYWR8QXNpYS9RYXRhciIsIkFzaWEvQmFnaGRhZHxBc2lhL1JpeWFkaCIsIkFzaWEvQmFuZ2tva3xBc2lhL0hvX0NoaV9NaW5oIiwiQXNpYS9CYW5na29rfEFzaWEvUGhub21fUGVuaCIsIkFzaWEvQmFuZ2tva3xBc2lhL1NhaWdvbiIsIkFzaWEvQmFuZ2tva3xBc2lhL1ZpZW50aWFuZSIsIkFzaWEvRGhha2F8QXNpYS9EYWNjYSIsIkFzaWEvRHViYWl8QXNpYS9NdXNjYXQiLCJBc2lhL0hvbmdfS29uZ3xIb25na29uZyIsIkFzaWEvSmFrYXJ0YXxBc2lhL1BvbnRpYW5hayIsIkFzaWEvSmVydXNhbGVtfEFzaWEvVGVsX0F2aXYiLCJBc2lhL0plcnVzYWxlbXxJc3JhZWwiLCJBc2lhL0thdGhtYW5kdXxBc2lhL0thdG1hbmR1IiwiQXNpYS9Lb2xrYXRhfEFzaWEvQ2FsY3V0dGEiLCJBc2lhL0tvbGthdGF8QXNpYS9Db2xvbWJvIiwiQXNpYS9LdWFsYV9MdW1wdXJ8QXNpYS9LdWNoaW5nIiwiQXNpYS9NYWthc3NhcnxBc2lhL1VqdW5nX1BhbmRhbmciLCJBc2lhL1Nlb3VsfFJPSyIsIkFzaWEvU2hhbmdoYWl8QXNpYS9DaG9uZ3FpbmciLCJBc2lhL1NoYW5naGFpfEFzaWEvQ2h1bmdraW5nIiwiQXNpYS9TaGFuZ2hhaXxBc2lhL0hhcmJpbiIsIkFzaWEvU2hhbmdoYWl8QXNpYS9NYWNhbyIsIkFzaWEvU2hhbmdoYWl8QXNpYS9NYWNhdSIsIkFzaWEvU2hhbmdoYWl8QXNpYS9UYWlwZWkiLCJBc2lhL1NoYW5naGFpfFBSQyIsIkFzaWEvU2hhbmdoYWl8Uk9DIiwiQXNpYS9TaW5nYXBvcmV8U2luZ2Fwb3JlIiwiQXNpYS9UYXNoa2VudHxBc2lhL1NhbWFya2FuZCIsIkFzaWEvVGVocmFufElyYW4iLCJBc2lhL1RoaW1waHV8QXNpYS9UaGltYnUiLCJBc2lhL1Rva3lvfEphcGFuIiwiQXNpYS9VbGFhbmJhYXRhcnxBc2lhL1VsYW5fQmF0b3IiLCJBc2lhL1VydW1xaXxBc2lhL0thc2hnYXIiLCJBdXN0cmFsaWEvQWRlbGFpZGV8QXVzdHJhbGlhL0Jyb2tlbl9IaWxsIiwiQXVzdHJhbGlhL0FkZWxhaWRlfEF1c3RyYWxpYS9Tb3V0aCIsIkF1c3RyYWxpYS9BZGVsYWlkZXxBdXN0cmFsaWEvWWFuY293aW5uYSIsIkF1c3RyYWxpYS9CcmlzYmFuZXxBdXN0cmFsaWEvTGluZGVtYW4iLCJBdXN0cmFsaWEvQnJpc2JhbmV8QXVzdHJhbGlhL1F1ZWVuc2xhbmQiLCJBdXN0cmFsaWEvRGFyd2lufEF1c3RyYWxpYS9Ob3J0aCIsIkF1c3RyYWxpYS9Mb3JkX0hvd2V8QXVzdHJhbGlhL0xISSIsIkF1c3RyYWxpYS9QZXJ0aHxBdXN0cmFsaWEvV2VzdCIsIkF1c3RyYWxpYS9TeWRuZXl8QXVzdHJhbGlhL0FDVCIsIkF1c3RyYWxpYS9TeWRuZXl8QXVzdHJhbGlhL0NhbmJlcnJhIiwiQXVzdHJhbGlhL1N5ZG5leXxBdXN0cmFsaWEvQ3VycmllIiwiQXVzdHJhbGlhL1N5ZG5leXxBdXN0cmFsaWEvSG9iYXJ0IiwiQXVzdHJhbGlhL1N5ZG5leXxBdXN0cmFsaWEvTWVsYm91cm5lIiwiQXVzdHJhbGlhL1N5ZG5leXxBdXN0cmFsaWEvTlNXIiwiQXVzdHJhbGlhL1N5ZG5leXxBdXN0cmFsaWEvVGFzbWFuaWEiLCJBdXN0cmFsaWEvU3lkbmV5fEF1c3RyYWxpYS9WaWN0b3JpYSIsIkV0Yy9VQ1R8VUNUIiwiRXRjL1VUQ3xFdGMvVW5pdmVyc2FsIiwiRXRjL1VUQ3xFdGMvWnVsdSIsIkV0Yy9VVEN8VVRDIiwiRXRjL1VUQ3xVbml2ZXJzYWwiLCJFdGMvVVRDfFp1bHUiLCJFdXJvcGUvQXN0cmFraGFufEV1cm9wZS9VbHlh", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("bmcgdG8gezB9IGZyb20gdGhpcyBicm93c2VyIiwicHJpbWFyeWF1dGgubmV3VXNlci50b29sdGlwLmNsb3NlIjoiQ2xvc2UiLCJwYXNzd29yZC5mb3Jnb3QuZW1haWwub3IudXNlcm5hbWUucGxhY2Vob2xkZXIiOiJFbWFpbCBvciBVc2VybmFtZSIsInBhc3N3b3JkLmZvcmdvdC5lbWFpbC5vci51c2VybmFtZS50b29sdGlwIjoiRW1haWwgb3IgVXNlcm5hbWUiLCJwYXNzd29yZC5mb3Jnb3Quc2VuZFRleHQiOiJSZXNldCB2aWEgU01TIiwicGFzc3dvcmQuZm9yZ290LnNlbmRFbWFpbCI6IlJlc2V0IHZpYSBFbWFpbCIsInBhc3N3b3JkLmZvcmdvdC5jYWxsIjoiUmVzZXQgdmlhIFZvaWNlIENhbGwiLCJwYXNzd29yZC5mb3Jnb3QuZW1haWxTZW50LnRpdGxlIjoiRW1haWwgc2VudCEiLCJwYXNzd29yZC5mb3Jnb3QuZW1haWxTZW50LmRlc2MiOiJFbWFpbCBoYXMgYmVlbiBzZW50IHRvIHswfSB3aXRoIGluc3RydWN0aW9ucyBvbiByZXNldHRpbmcgeW91ciBwYXNzd29yZC4iLCJwYXNzd29yZC5mb3Jnb3QucXVlc3Rpb24udGl0bGUiOiJBbnN3ZXIgRm9yZ290dGVuIFBhc3N3b3JkIENoYWxsZW5nZSIsInBhc3N3b3JkLmZvcmdvdC5xdWVzdGlvbi5zdWJtaXQiOiJSZXNldCBQYXNzd29yZCIsInBhc3N3b3JkLmZvcmdvdC5zbXMubm90UmVjZWl2ZWQiOiJEaWRuJ3QgcmVjZWl2ZSBhbiBTTVM/IFJlc2V0IHZpYSBlbWFpbCIsInBhc3N3b3JkLmZvcmdvdC5jb2RlLm5vdFJlY2VpdmVkIjoiRGlkbid0IHJlY2VpdmUgYSBjb2RlPyBSZXNldCB2aWEgZW1haWwiLCJwYXNzd29yZC5mb3Jnb3Qubm9GYWN0b3JzRW5hYmxlZCI6Ik5vIHBhc3N3b3JkIHJlc2V0IG9wdGlvbnMgYXZhaWxhYmxlLiBQbGVhc2UgY29udGFjdCB5b3VyIGFkbWluaXN0cmF0b3IuIiwicGFzc3dvcmQucmVzZXQudGl0bGUiOiJSZXNldCB5b3VyIE9rdGEgcGFzc3dvcmQiLCJwYXNzd29yZC5jb21wbGV4aXR5LnJlcXVpcmVtZW50cyI6IlBhc3N3b3JkIHJlcXVpcmVtZW50czogezB9LiIsInBhc3N3b3JkLmNvbXBsZXhpdHkuaGlzdG9yeSI6IllvdXIgcGFzc3dvcmQgY2Fubm90IGJlIGFueSBvZiB5b3VyIGxhc3QgezB9IHBhc3N3b3Jkcy4iLCJwYXNzd29yZC5jb21wbGV4aXR5Lm1pbkFnZU1pbnV0ZXMiOiJBdCBsZWFzdCB7MH0gbWludXRlKHMpIG11c3QgaGF2ZSBlbGFwc2VkIHNpbmNlIHlvdSBsYXN0IGNoYW5nZWQgeW91ciBwYXNzd29yZC4iLCJwYXNzd29yZC5jb21wbGV4aXR5Lm1pbkFnZUhvdXJzIjoiQXQgbGVhc3QgezB9IGhvdXIocykgbXVzdCBoYXZlIGVsYXBzZWQgc2luY2UgeW91IGxhc3QgY2hhbmdlZCB5b3VyIHBhc3N3b3JkLiIsInBhc3N3b3JkLmNvbXBsZXhpdHkubWluQWdlRGF5cyI6IkF0IGxlYXN0IHswfSBkYXkocykgbXVzdCBoYXZlIGVsYXBzZWQgc2luY2UgeW91IGxhc3QgY2hhbmdlZCB5b3VyIHBhc3N3b3JkLiIsInBhc3N3b3JkLmNvbXBsZXhpdHkubGVuZ3RoIjoiYXQgbGVhc3QgezB9IGNoYXJhY3RlcnMiLCJwYXNzd29yZC5jb21wbGV4aXR5Lmxpc3QuZWxlbWVudCI6IiwgezB9IiwicGFzc3dvcmQuY29tcGxleGl0eS5sb3dlcmNhc2UiOiJhIGxvd2VyY2FzZSBsZXR0ZXIiLCJwYXNzd29yZC5jb21wbGV4aXR5LnVwcGVyY2FzZSI6ImFuIHVwcGVyY2FzZSBsZXR0ZXIiLCJwYXNzd29yZC5jb21wbGV4aXR5Lm51bWJlciI6ImEgbnVtYmVyIiwicGFzc3dvcmQuY29tcGxleGl0eS5zeW1ib2wiOiJhIHN5bWJvbCIsInBhc3N3b3JkLmNvbXBsZXhpdHkubm9fdXNlcm5hbWUiOiJubyBwYXJ0cyBvZiB5b3VyIHVzZXJuYW1lIiwicGFzc3dvcmQuY29tcGxleGl0eS5ub19maXJzdF9uYW1lIjoiZG9lcyBub3QgaW5jbHVkZSB5b3VyIGZpcnN0IG5hbWUiLCJwYXNzd29yZC5jb21wbGV4aXR5Lm5vX2xhc3RfbmFtZSI6ImRvZXMgbm90IGluY2x1ZGUgeW91ciBsYXN0IG5hbWUiLCJwYXNzd29yZC5leHBpcmVkLnN1Ym1pdCI6IkNoYW5nZSBQYXNzd29yZCIsInBhc3N3b3JkLmV4cGlyZWQudGl0bGUiOiJZb3VyIE9rdGEgcGFzc3dvcmQgaGFzIGV4cGlyZWQiLCJwYXNzd29yZC5leHBpcmluZy5sYXRlciI6IlJlbWluZCBtZSBsYXRlciIsInBhc3N3b3JkLmV4cGlyaW5nLnRpdGxlIjoiWW91ciBwYXNzd29yZCB3aWxsIGV4cGlyZSBpbiB7MH0gZGF5cyIsInBhc3N3b3JkLmV4cGlyaW5nLnRvZGF5IjoiWW91ciBwYXNzd29yZCB3aWxsIGV4cGlyZSBsYXRlciB0b2RheSIsInBhc3N3b3JkLmV4cGlyaW5nLnNvb24iOiJZb3VyIHBhc3N3b3JkIGlzIGV4cGlyaW5nIHNvb24iLCJwYXNzd29yZC5leHBpcmluZy5zdWJ0aXRsZSI6IldoZW4gcGFzc3dvcmQgZXhwaXJlcyB5b3UgbWF5IGJlIGxvY2tlZCBvdXQgb2YgT2t0YSBNb2JpbGUsIG1vYmlsZSBlbWFpbCwgYW5kIG90aGVyIHNlcnZpY2VzLiIsInBhc3N3b3JkLmV4cGlyZWQuY3VzdG9tLnN1Ym1pdCI6IkdvIHRvIHswfSIsInBhc3N3b3JkLmV4cGlyZWQuY3VzdG9tLnN1YnRpdGxlIjoiVGhpcyBwYXNzd29yZCBpcyBzZXQgb24gYW5vdGhlciB3ZWJzaXRlLiBDbGljayB0aGUgYnV0dG9uIGJlbG93IHRvIGdvIHRoZXJlIGFuZCBzZXQgYSBuZXcgcGFzc3dvcmQuIiwiYWNjb3VudC51bmxvY2sudGl0bGUiOiJVbmxvY2sgYWNjb3VudCIsImFjY291bnQudW5sb2NrLmVtYWlsLm9yLnVzZXJuYW1lLnBsYWNlaG9sZGVyIjoiRW1haWwgb3IgdXNlcm5hbWUiLCJhY2NvdW50LnVubG9jay5lbWFpbC5vci51c2VybmFtZS50b29sdGlwIjoiRW1haWwgb3IgdXNlcm5hbWUiLCJhY2NvdW50LnVubG9jay5zZW5kVGV4dCI6IlNlbmQgU01TIiwiYWNjb3VudC51bmxvY2suc2VuZEVtYWlsIjoiU2VuZCBFbWFpbCIsImFjY291bnQudW5sb2NrLmVtYWlsU2VudC50aXRsZSI6IkVtYWlsIHNlbnQhIiwiYWNjb3VudC51bmxvY2suZW1haWxTZW50LmRlc2MiOiJFbWFpbCBoYXMgYmVlbiBzZW50IHRvIHswfSB3aXRoIGluc3RydWN0aW9ucyBvbiB1bmxvY2tpbmcgeW91ciBhY2NvdW50LiIsImFjY291bnQudW5sb2NrLnF1ZXN0aW9uLnRpdGxlIjoiQW5zd2VyIFVubG9jayBBY2NvdW50IENoYWxsZW5nZSIsImFjY291bnQudW5sb2NrLnF1ZXN0aW9uLnN1Ym1pdCI6IlVubG9jayBBY2NvdW50IiwiYWNjb3VudC51bmxvY2sudW5sb2NrZWQudGl0bGUiOiJBY2NvdW50IHN1Y2Nlc3NmdWxseSB1bmxvY2tlZCEiLCJhY2NvdW50LnVubG9jay51bmxvY2tlZC5kZXNjIjoiWW91IGNhbiBsb2cgaW4gdXNpbmcgeW91ciBleGlzdGluZyB1c2VybmFtZSBhbmQgcGFzc3dvcmQuIiwiYWNjb3VudC51bmxvY2suc21zLm5vdFJlY2VpdmVkIjoiRGlkbid0IHJlY2VpdmUgYW4gU01TPyBVbmxvY2sgdmlhIGVtYWlsIiwiYWNjb3VudC51bmxvY2subm9GYWN0b3JzRW5hYmxlZCI6Ik5vIHVubG9jayBvcHRpb25zIGF2YWlsYWJsZS4gUGxlYXNlIGNvbnRhY3QgeW91ciBhZG1pbmlzdHJhdG9yLiIsImNvbnRhY3Quc3VwcG9ydCI6IklmIHlvdSBkaWRuJ3QgcHJvdmlkZSBhIHNlY29uZGFyeSBlbWFpbCBhZGRyZXNzIG9yIGRvbid0IGhhdmUgYWNjZXNzIHRvIGVtYWlsLCBwbGVhc2UgY29udGFjdCB5b3VyIGFkbWluaXN0cmF0b3IgYXQgezB9Iiwic29jaWFsYXV0aC5kaXZpZGVyLnRleHQiOiJPUiIsInNvY2lhbGF1dGguZmFjZWJvb2subGFiZWwiOiJTaWduIGluIHdpdGggRmFjZWJvb2siLCJzb2NpYWxhdXRoLmdvb2dsZS5sYWJlbCI6IlNpZ24gaW4gd2l0aCBHb29nbGUiLCJzb2NpYWxhdXRoLmxpbmtlZGluLmxhYmVsIjoiU2lnbiBpbiB3aXRoIExpbmtlZEluIiwic29jaWFsYXV0aC5taWNyb3NvZnQubGFiZWwiOiJTaWduIGluIHdpdGggTWljcm9zb2Z0Iiwic29jaWFsYXV0aC5wb3B1cC50aXRsZSI6IkV4dGVybmFsIElkZW50aXR5IFByb3ZpZGVyIFVzZXIgQXV0aGVudGljYXRpb24iLCJhdXRoYnV0dG9uLmRpdmlkZXIudGV4dCI6Im9yIiwicmVnaXN0cmF0aW9uLnNpZ251cC5sYWJlbCI6IkRvbid0IGhhdmUgYW4gYWNjb3VudD8iLCJyZWdpc3RyYXRpb24uc2lnbnVwLnRleHQiOiJTaWduIHVwIiwicmVnaXN0cmF0aW9uLmNvbXBsZXRlLnRpdGxlIjoiVmVyaWZpY2F0aW9uIGVtYWlsIHNlbnQiLCJyZWdpc3RyYXRpb24uY29tcGxldGUuZGVzYyI6IldlIGp1c3Qgc2VudCBhIHZlcmlmaWNhdGlvbiBlbWFpbCB0byB7MH0uIFBsZWFzZSBjaGVjayB5b3VyIGVtYWlsIGFuZCB2ZXJpZnkgeW91ciBhY2NvdW50IHRvIGNvbnRpbnVlLiIsInJlZ2lzdHJhdGlvbi5mb3JtLnRpdGxlIjoiQ3JlYXRlIEFjY291bnQiLCJyZWdpc3RyYXRpb24uZm9ybS5zdWJtaXQiOiJSZWdpc3RlciIsInJlZ2lzdHJhdGlvbi5wYXNzd29yZENvbXBsZXhpdHkubWluTGVuZ3RoIjoiQXQgbGVhc3QgezB9IGNoYXJhY3RlcihzKSIsInJlZ2lzdHJhdGlvbi5wYXNzd29yZENvbXBsZXhpdHkubWluTG93ZXIiOiJBdCBsZWFzdCB7MH0gbG93ZXJjYXNlIGxldHRlcihzKSIsInJlZ2lzdHJhdGlvbi5wYXNzd29yZENvbXBsZXhpdHkubWluVXBwZXIiOiJBdCBsZWFzdCB7MH0gdXBwZXJjYXNlIGxldHRlcihzKSIsInJlZ2lzdHJhdGlvbi5wYXNzd29yZENvbXBsZXhpdHkubWluTnVtYmVyIjoiQXQgbGVhc3QgezB9IG51bWJlcihzKSIsInJlZ2lzdHJhdGlvbi5wYXNzd29yZENvbXBsZXhpdHkubWluU3ltYm9sIjoiQXQgbGVhc3QgezB9IHN5bWJvbChzKSIsInJlZ2lzdHJhdGlvbi5wYXNzd29yZENvbXBsZXhpdHkuZXhjbHVkZVVzZXJuYW1lIjoiRG9lcyBub3QgY29udGFpbiBwYXJ0IG9mIHVzZXJuYW1lIiwicmVnaXN0cmF0aW9uLmVycm9yLnVzZXJOYW1lLmludmFsaWRFbWFpbCI6IkludmFsaWQgZW1haWwgYWRkcmVzcyIsInJlZ2lzdHJhdGlvbi5lcnJvci5wYXNzd29yZC5wYXNzd29yZFJlcXVpcmVtZW50c05vdE1ldCI6IlBhc3N3b3JkIHJlcXVpcmVtZW50cyB3ZXJlIG5vdCBtZXQiLCJyZWdpc3RyYXRpb24uZXJyb3IudXNlck5hbWUubm90VW5pcXVlV2l0aGluT3JnIjoiQW4gYWNjb3VudCB3aXRoIHRoYXQgZW1haWwgYWxyZWFkeSBleGlzdHMiLCJwaXYuY2FyZCI6IlBJViBDYXJkIiwicGl2LmNhcmQuaW5zZXJ0IjoiUGxlYXNlIGluc2VydCB5b3VyIFBJViBjYXJkIGFuZCBzZWxlY3QgdGhlIHVzZXIgY2VydGlmaWNhdGUuIiwicGl2LmNhcmQuZXJyb3IiOiJDZXJ0aWZpY2F0ZSBhdXRoZW50aWNhdGlvbiBmYWlsZWQuIENvbnRhY3QgeW91ciBhZG1pbi4iLCJwaXYuY2FyZC5lcnJvci5lbXB0eSI6Ik5vIGNlcnRpZmljYXRlIHNlbGVjdGVkLiBDaG9vc2UgYSBjZXJ0aWZpY2F0ZSBhbmQgdHJ5IGFnYWluLiIsInBpdi5jYXJkLmVycm9yLmludmFsaWQiOiJDZXJ0aWZpY2F0ZSB2YWxpZGF0aW9uIGZhaWxlZC4gQ2hvb3NlIGFub3RoZXIgY2VydGlmaWNhdGUgYW5kIHRyeSBhZ2Fpbi4iLCJ1bnN1cHBvcnRlZC5vbmVEcml2ZS50aXRsZSI6IllvdXIgT25lRHJpdmUgdmVyc2lvbiBpcyBub3Qgc3VwcG9ydGVkIiwidW5zdXBwb3J0ZWQub25lRHJpdmUuZGVzYyI6IlVwZ3JhZGUgbm93IGJ5IGluc3RhbGxpbmcgdGhlIE9uZURyaXZlIGZvciBCdXNpbmVzcyBOZXh0IEdlbmVyYXRpb24gU3luYyBDbGllbnQgdG8gbG9naW4gdG8gT2t0YSIsInVuc3VwcG9ydGVkLm9uZURyaXZlLmFjdGlvbiI6IkxlYXJuIGhvdyB0byB1cGdyYWRlIiwidW5zdXBwb3J0ZWQuY29va2llcy50aXRsZSI6IkNvb2tpZXMgYXJlIHJlcXVpcmVkIiwidW5zdXBwb3J0ZWQuY29va2llcy5kZXNjIjoiQ29va2llcyBhcmUgZGlzYWJsZWQgb24geW91ciBicm93c2VyLiBQbGVhc2UgZW5hYmxlIENvb2tpZXMgYW5kIHJlZnJlc2ggdGhpcyBwYWdlLiIsInVuc3VwcG9ydGVkLmNvb2tpZXMuYWN0aW9uIjoiUmVmcmVzaCAiLCJkZXZpY2VUcnVzdC5zc28udGV4dCI6IlNpZ24gaW4gdG8gYWNjZXNzIGNvbXBhbnkgcmVzb3VyY2VzIiwiZGV2aWNlVHJ1c3Quc3NvLmhpbnQyIjoiT2t0YSBNb2JpbGUgd2lsbCBjaGVjayB0aGF0IHlvdXIgZGV2aWNlIGlzIHNlY3VyZSBhbmQgbWFrZSBpdCBlYXN5IHRvIHNpZ24gaW4gdG8gdGhpcyBhcHAuIiwiZGV2aWNlVHJ1c3Quc3NvLmJ1dHRvbjIiOiJTaWduIGluIHdpdGggT2t0YSIsImRldmljZVRydXN0LnNzby5leHBpcmUudGl0bGUiOiJPb3BzIGxldCdzIGdldCB5b3UgYmFjayBvbiB0cmFjayIsImRldmljZVRydXN0LnNzby5leHBpcmUuc3VidGl0bGUiOiJVbmZvcnR1bmF0ZWx5IHRoZSBzdGVwcyByZXF1aXJlZCB0byBzaWduIGluIHRvb2sgbG9uZ2VyIHRoYW4gZXhwZWN0ZWQgYW5kIHlvdXIgYXR0ZW1wdCB0aW1lZCBvdXQuIiwiZGV2aWNlVHJ1c3Quc3NvLmV4cGlyZS5idXR0b24iOiJTaWduIGluIHVzaW5nIE9rdGEgTW9iaWxlIiwiZGV2aWNlVHJ1c3QudW5pdmVyc2FsTGluay5mYWxsYmFjay5nZXRPa3RhTW9iaWxlLnRpdGxlIjoiR2V0IE9rdGEgTW9iaWxlIiwiZGV2aWNlVHJ1c3QudW5pdmVyc2FsTGluay5mYWxsYmFjay5nZXRPa3RhTW9iaWxlLnN1YnRpdGxlIjoiR28gdG8gdGhlIHswfUFwcFN0b3JlezF9LCB7MH1zZWFyY2h7MX0gZm9yIHswfU9rdGEgTW9iaWxlezF9IGFuZCB0YXAgb24gezB9R0VUezF9IE9rdGEgTW9iaWxlLiBPbmNlIGluc3RhbGxlZCwgc2lnbiBpbiB0byBPa3RhIE1vYmlsZSBhbmQgZm9sbG93IHRoZSBpbnN0cnVjdGlvbnMgdG8gc2VjdXJlIHlvdXIgZGV2aWNlLiIsImNvbnNlbnQucmVxdWlyZWQuaGVhZGxpbmUiOiI8Yj57MH08L2I+IGlzIHJlcXVlc3RpbmcgcGVybWlzc2lvbnMgdG86IiwiY29uc2VudC5yZXF1aXJlZC5sYWJlbCI6IjxiPnswfTwvYj4gd2FudHMgdG8gYWNjZXNzIHlvdXIgYWNjb3VudCAoPGI+ezF9PC9iPikgaW4gb3JkZXIgdG86IiwiY29uc2VudC5yZXF1aXJlZC5kZXNjcmlwdGlvbiI6IkJ5IGNsaWNraW5nIEFsbG93IEFjY2VzcywgeW91IGFsbG93IHRoaXMgYXBwIGFjY2VzcyB0byB0aGUgYWN0aW9ucyBsaXN0ZWQgYWJvdmUuIiwiY29uc2VudC5yZXF1aXJlZC50ZXJtc09mU2VydmljZSI6IlRlcm1zIG9mIFNlcnZpY2UiLCJjb25zZW50LnJlcXVpcmVkLnByaXZhY3lQb2xpY3kiOiJQcml2YWN5IFBvbGljeSIsImNvbnNlbnQucmVxdWlyZWQuY29uc2VudEJ1dHRvbiI6IkFsbG93IEFjY2VzcyIsImNvbnNlbnQucmVxdWlyZWQuY2FuY2VsQnV0dG9uIjoiRG9uJ3QgQWxsb3ciLCJjb25zZW50LnJlcXVpcmVkLnRpdGxlIjoiezB9IGlzIHJlcXVlc3RpbmcgcGVybWlzc2lvbnMgdG86IiwicGFzc3dvcmQuY29tcGxleGl0eS5kZXNjcmlwdGlvbiI6IllvdXIgcGFzc3dvcmQgbXVzdCBoYXZlIHswfS4iLCJwYXNzd29yZC5jb21wbGV4aXR5Lm5vX2ZpcnN0X29yX2xhc3RfbmFtZSI6ImRvIG5vdCBpbmNsdWRlIHlvdXIgZmlyc3Qgb3IgbGFzdCBuYW1lIn19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtBRjoiQWZnaGFuaXN0YW4iLEFYOiLDhWxhbmQgSXNsYW5kcyIsQUw6IkFsYmFuaWEiLERaOiJBbGdlcmlhIixBUzoiQW1lcmljYW4gU2Ftb2EiLEFEOiJBbmRvcnJhIixBTzoiQW5nb2xhIixBSToiQW5ndWlsbGEiLEFROiJBbnRhcmN0aWNhIixBRzoiQW50aWd1YSBhbmQgQmFyYnVkYSIsQVI6IkFyZ2VudGluYSIsQU06IkFybWVuaWEiLEFXOiJBcnViYSIsQVU6IkF1c3RyYWxpYSIsQVQ6IkF1c3RyaWEiLEFaOiJBemVyYmFpamFuIixCUzoiQmFoYW1hcyIsQkg6IkJhaHJhaW4iLEJEOiJCYW5nbGFkZXNoIixCQjoiQmFyYmFkb3MiLEJZOiJCZWxhcnVzIixCRToiQmVsZ2l1bSIsQlo6IkJlbGl6ZSIsQko6IkJlbmluIixCTToiQmVybXVkYSIsQlQ6IkJodXRhbiIsQk86IkJvbGl2aWEsIFBsdXJpbmF0aW9uYWwgU3RhdGUgb2YiLEJBOiJCb3NuaWEgYW5kIEhlcnplZ292aW5hIixCVzoiQm90c3dhbmEiLEJWOiJCb3V2ZXQgSXNsYW5kIixCUjoiQnJhemlsIixJTzoiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5IixWRzoiVmlyZ2luIElzbGFuZHMsIEJyaXRpc2giLEJOOiJCcnVuZWkgRGFydXNzYWxhbSIsQkc6IkJ1bGdhcmlhIixCRjoiQnVya2luYSBGYXNvIixCSToiQnVydW5kaSIsS0g6IkNhbWJvZGlhIixDTToiQ2FtZXJvb24iLENBOiJDYW5hZGEiLENWOiJDYXBlIFZlcmRlIixLWToiQ2F5bWFuIElzbGFuZHMiLENGOiJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWMiLFREOiJDaGFkIixDTDoiQ2hpbGUiLENOOiJDaGluYSIsQ1g6IkNocmlzdG1hcyBJc2xhbmQiLENPOiJDb2xvbWJpYSIsS006IkNvbW9yb3MiLENHOiJDb25nbyIsQ0s6IkNvb2sgSXNsYW5kcyIsQ1I6IkNvc3RhIFJpY2EiLENJOiJDw7R0ZSBkJ0l2b2lyZSIsSFI6IkNyb2F0aWEiLENVOiJDdWJhIixDWToiQ3lwcnVzIixDWjoiQ3plY2ggUmVwdWJsaWMiLENEOiJDb25nbywgdGhlIERlbW9jcmF0aWMgUmVwdWJsaWMgb2YgdGhlIixESzoiRGVubWFyayIsREo6IkRqaWJvdXRpIixETToiRG9taW5pY2EiLERPOiJEb21pbmljYW4gUmVwdWJsaWMiLFRMOiJUaW1vci1MZXN0ZSIsRUM6IkVjdWFkb3IiLEVHOiJFZ3lwdCIsU1Y6IkVsIFNhbHZhZG9yIixHUToiRXF1YXRvcmlhbCBHdWluZWEiLEVSOiJFcml0cmVhIixFRToiRXN0b25pYSIsRVQ6IkV0aGlvcGlhIixGSzoiRmFsa2xhbmQgSXNsYW5kcyAoTWFsdmluYXMpIixGTzoiRmFyb2UgSXNsYW5kcyIsRko6IkZpamkiLEZJOiJGaW5sYW5kIixGUjoiRnJhbmNlIixHRjoiRnJlbmNoIEd1aWFuYSIsUEY6IkZyZW5jaCBQb2x5bmVzaWEiLFRGOiJGcmVuY2ggU291dGhlcm4gVGVycml0b3JpZXMiLEdBOiJHYWJvbiIsR006IkdhbWJpYSIsR0U6Ikdlb3JnaWEiLERFOiJHZXJtYW55IixHSDoiR2hhbmEiLEdJOiJHaWJyYWx0YXIiLEdSOiJHcmVlY2UiLEdMOiJHcmVlbmxhbmQiLEdEOiJHcmVuYWRhIixHUDoiR3VhZGVsb3VwZSIsR1U6Ikd1YW0iLEdUOiJHdWF0ZW1hbGEiLEdHOiJHdWVybnNleSIsR046Ikd1aW5lYSIsR1c6Ikd1aW5lYS1CaXNzYXUiLEdZOiJHdXlhbmEiLEhUOiJIYWl0aSIsSE06IkhlYXJkIElzbGFuZCBhbmQgTWNEb25hbGQgSXNsYW5kcyIsSE46IkhvbmR1cmFzIixISzoiSG9uZyBLb25nIixIVToiSHVuZ2FyeSIsSVM6IkljZWxhbmQiLElOOiJJbmRpYSIsSUQ6IkluZG9uZXNpYSIsSVI6IklyYW4sIElzbGFtaWMgUmVwdWJsaWMgb2YiLElROiJJcmFxIixJRToiSXJlbGFuZCIsSUw6IklzcmFlbCIsSVQ6Ikl0YWx5IixKTToiSmFtYWljYSIsSlA6IkphcGFuIixKRToiSmVyc2V5IixKTzoiSm9yZGFuIixLWjoiS2F6YWtoc3RhbiIsS0U6IktlbnlhIixLSToiS2lyaWJhdGkiLEtSOiJLb3JlYSwgUmVwdWJsaWMgb2YiLEtXOiJLdXdhaXQiLEtHOiJLeXJneXpzdGFuIixMQToiTGFvIFBlb3BsZSdzIERlbW9jcmF0aWMgUmVwdWJsaWMiLExWOiJMYXR2aWEiLExCOiJMZWJhbm9uIixMUzoiTGVzb3RobyIsTFI6IkxpYmVyaWEiLExZOiJMaWJ5YSIsTEk6IkxpZWNodGVuc3RlaW4iLExUOiJMaXRodWFuaWEiLExVOiJMdXhlbWJvdXJnIixNTzoiTWFjYW8iLE1LOiJNYWNlZG9uaWEsIHRoZSBmb3JtZXIgWXVnb3NsYXYgUmVwdWJsaWMgb2YiLE1HOiJNYWRhZ2FzY2FyIixNVzoiTWFsYXdpIixNWToiTWFsYXlzaWEiLE1WOiJNYWxkaXZlcyIsTUw6Ik1hbGkiLE1UOiJNYWx0YSIsTUg6Ik1hcnNoYWxsIElzbGFuZHMiLE1ROiJNYXJ0aW5pcXVlIixNUjoiTWF1cml0YW5pYSIsTVU6Ik1hdXJpdGl1cyIsWVQ6Ik1heW90dGUiLE1YOiJNZXhpY28iLEZNOiJNaWNyb25lc2lhLCBGZWRlcmF0ZWQgU3RhdGVzIG9mIixNRDoiTW9sZG92YSwgUmVwdWJsaWMgb2YiLE1DOiJNb25hY28iLE1OOiJNb25nb2xpYSIsTUU6Ik1vbnRlbmVncm8iLE1TOiJNb250c2VycmF0IixNQToiTW9yb2NjbyIsTVo6Ik1vemFtYmlxdWUiLE1NOiJNeWFubWFyIixOQToiTmFtaWJpYSIsTlI6Ik5hdXJ1IixOUDoiTmVwYWwiLE5MOiJOZXRoZXJsYW5kcyIsQU46Ik5ldGhlcmxhbmRzIEFudGlsbGVzIixOQzoiTmV3IENhbGVkb25pYSIsTlo6Ik5ldyBaZWFsYW5kIixOSToiTmljYXJhZ3VhIixORToiTmlnZXIiLE5HOiJOaWdlcmlhIixOVToiTml1ZSIsTkY6Ik5vcmZvbGsgSXNsYW5kIixLUDoiS29yZWEsIERlbW9jcmF0aWMgUGVvcGxlJ3MgUmVwdWJsaWMgb2YiLE1QOiJOb3J0aGVybiBNYXJpYW5hIElzbGFuZHMiLE5POiJOb3J3YXkiLE9NOiJPbWFuIixQSzoiUGFraXN0YW4iLFBXOiJQYWxhdSIsUFM6IlBhbGVzdGluZSwgU3RhdGUgb2YiLFBBOiJQYW5hbWEiLFBHOiJQYXB1YSBOZXcgR3VpbmVhIixQWToiUGFyYWd1YXkiLFBFOiJQZXJ1IixQSDoiUGhpbGlwcGluZXMiLFBOOiJQaXRjYWlybiIsUEw6IlBvbGFuZCIsUFQ6IlBvcnR1Z2FsIixQUjoiUHVlcnRvIFJpY28iLFFBOiJRYXRhciIsUkU6IlLDqXVuaW9uIixSTzoiUm9tYW5pYSIsUlU6IlJ1c3NpYW4gRmVkZXJhdGlvbiIsUlc6IlJ3YW5kYSIsU0g6IlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhIixLTjoiU2FpbnQgS2l0dHMgYW5kIE5ldmlzIixMQzoiU2FpbnQgTHVjaWEiLFBNOiJTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uIixWQzoiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXMiLFdTOiJTYW1vYSIsU006IlNhbiBNYXJpbm8iLFNUOiJTw6NvIFRvbcOpIGFuZCBQcsOtbmNpcGUiLFNBOiJTYXVkaSBBcmFiaWEiLFNOOiJTZW5lZ2FsIixSUzoiU2VyYmlhIixTQzoiU2V5Y2hlbGxlcyIsU0w6IlNpZXJyYSBMZW9uZSIsU0c6IlNpbmdhcG9yZSIsU0s6IlNsb3Zha2lhIixTSToiU2xvdmVuaWEiLFNCOiJTb2xvbW9uIElzbGFuZHMiLFNPOiJTb21hbGlhIixaQToiU291dGggQWZyaWNhIixHUzoiU291dGggR2VvcmdpYSBhbmQgdGhlIFNvdXRoIFNhbmR3aWNoIElzbGFuZHMiLFNTOiJTb3V0aCBTdWRhbiIsRVM6IlNwYWluIixMSzoiU3JpIExhbmthIixTRDoiU3VkYW4iLFNSOiJTdXJpbmFtZSIsU0o6IlN2YWxiYXJkIGFuZCBKYW4gTWF5ZW4iLFNaOiJTd2F6aWxhbmQiLFNFOiJTd2VkZW4iLENIOiJTd2l0emVybGFuZCIsU1k6IlN5cmlhbiBBcmFiIFJlcHVibGljIixUVzoiVGFpd2FuIixUSjoiVGFqaWtpc3RhbiIsVFo6IlRhbnphbmlhLCBVbml0ZWQgUmVwdWJsaWMgb2YiLFRIOiJUaGFpbGFuZCIsVEc6IlRvZ28iLFRLOiJUb2tlbGF1IixUTzoiVG9uZ2EiLFRUOiJUcmluaWRhZCBhbmQgVG9iYWdvIixUTjoiVHVuaXNpYSIsVFI6IlR1cmtleSIsVE06IlR1cmttZW5pc3RhbiIsVEM6IlR1cmtzIGFuZCBDYWljb3MgSXNsYW5kcyIsVFY6IlR1dmFsdSIsVkk6IlZpcmdpbiBJc2xhbmRzLCBVLlMuIixVRzoiVWdhbmRhIixVQToiVWtyYWluZSIsQUU6IlVuaXRlZCBBcmFiIEVtaXJhdGVzIixHQjoiVW5pdGVkIEtpbmdkb20iLFVTOiJVbml0ZWQgU3RhdGVzIixVTToiVW5pdGVkIFN0YXRlcyBNaW5vciBPdXRseWluZyBJc2xhbmRzIixVWToiVXJ1Z3VheSIsVVo6IlV6YmVraXN0YW4iLFZVOiJWYW51YXR1IixWQToiSG9seSBTZWUgKFZhdGljYW4gQ2l0eSBTdGF0ZSkiLFZFOiJWZW5lenVlbGEsIEJvbGl2YXJpYW4gUmVwdWJsaWMgb2YiLFZOOiJWaWV0IE5hbSIsV0Y6IldhbGxpcyBhbmQgRnV0dW5hIixFSDoiV2VzdGVybiBTYWhhcmEiLFlFOiJZZW1lbiIsWk06IlphbWJpYSIsWlc6IlppbWJhYndlIn19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzI4KSxuKDQ2NCldLHI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5leHRlbmQoZSx7ZGVwcmVjYXRlOmZ1bmN0aW9uKHQpe2Uud2FybigiW29rdGEtc2lnbmluLXdpZGdldF0gREVQUkVDQVRFRDoiLHQpfX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzI4KV0scj1mdW5jdGlvbih0KXt2YXIgZT17fSxuPSJ3aXRoQ3JlZGVudGlhbHMiaW4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCxpPSJ1bmRlZmluZWQiIT10eXBlb2YgWERvbWFpblJlcXVlc3Q7cmV0dXJuIGUuY29yc0lzTm90U3VwcG9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIShufHxpKX0sZS5jb3JzSXNOb3RFbmFibGVkPWZ1bmN0aW9uKHQpe3JldHVybiAwPT09dC5zdGF0dXN9LGUubG9jYWxTdG9yYWdlSXNOb3RTdXBwb3J0ZWQ9ZnVuY3Rpb24oKXt2YXIgdD0idGVzdCI7dHJ5e3JldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0LHQpLGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHQpLCExfWNhdGNoKGUpe3JldHVybiEwfX0sZS5zdXBwb3J0c1B1c2hTdGF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdD10fHx3aW5kb3csISghdC5oaXN0b3J5fHwhdC5oaXN0b3J5LnB1c2hTdGF0ZSl9LGUuaXNJRT1mdW5jdGlvbigpe3JldHVybi8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCl9LGUuaXNGaXJlZm94PWZ1bmN0aW9uKCl7cmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCJmaXJlZm94Iik+LTF9LGUuZ2V0VXNlckxhbmd1YWdlcz1mdW5jdGlvbigpe3ZhciBlLG47cmV0dXJuIG5hdmlnYXRvci5sYW5ndWFnZXM/bmF2aWdhdG9yLmxhbmd1YWdlczooZT1bXSxuPVsibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJicm93c2VyTGFuZ3VhZ2UiLCJzeXN0ZW1MYW5ndWFnZSJdLHQuZWFjaChuLGZ1bmN0aW9uKHQpe25hdmlnYXRvclt0XSYmZS5wdXNoKG5hdmlnYXRvclt0XSl9KSxlKX0sZX0uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7InVzZSBzdHJpY3QiO3ZhciBfdHlwZW9mPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fTsib2JqZWN0IiE9PSgidW5kZWZpbmVkIj09dHlwZW9mIEpTT04/InVuZGVmaW5lZCI6X3R5cGVvZihKU09OKSkmJihKU09OPXt9KSxmdW5jdGlvbigpe2Z1bmN0aW9uIGYodCl7cmV0dXJuIHQ8MTA/IjAiK3Q6dH1mdW5jdGlvbiBxdW90ZSh0KXtyZXR1cm4gZXNjYXBhYmxlLmxhc3RJbmRleD0wLGVzY2FwYWJsZS50ZXN0KHQpPyciJyt0LnJlcGxhY2UoZXNjYXBhYmxlLGZ1bmN0aW9uKHQpe3ZhciBlPW1ldGFbdF07cmV0dXJuInN0cmluZyI9PXR5cGVvZiBlP2U6IlxcdSIrKCIwMDAwIit0LmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCl9KSsnIic6JyInK3QrJyInfWZ1bmN0aW9uIHN0cih0LGUpe3ZhciBuLGkscixvLHMsYT1nYXAsbD1lW3RdO3N3aXRjaChsJiYib2JqZWN0Ij09PSgidW5kZWZpbmVkIj09dHlwZW9mIGw/InVuZGVmaW5lZCI6X3R5cGVvZihsKSkmJiJmdW5jdGlvbiI9PXR5cGVvZiBsLnRvSlNPTiYmKGw9bC50b0pTT04odCkpLCJmdW5jdGlvbiI9PXR5cGVvZiByZXAmJihsPXJlcC5jYWxsKGUsdCxsKSksInVuZGVmaW5lZCI9PXR5cGVvZiBsPyJ1bmRlZmluZWQiOl90eXBlb2YobCkpe2Nhc2Uic3RyaW5nIjpyZXR1cm4gcXVvdGUobCk7Y2FzZSJudW1iZXIiOnJldHVybiBpc0Zpbml0ZShsKT9TdHJpbmcobCk6Im51bGwiO2Nhc2UiYm9vbGVhbiI6Y2FzZSJudWxsIjpyZXR1cm4gU3RyaW5nKGwpO2Nhc2Uib2JqZWN0IjppZighbClyZXR1cm4ibnVsbCI7aWYoZ2FwKz1pbmRlbnQscz1bXSwiW29iamVjdCBBcnJheV0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShsKSl7Zm9yKG89bC5sZW5ndGgsbj0wO248bztuKz0xKXNbbl09c3RyKG4sbCl8fCJudWxsIjtyZXR1cm4gcj0wPT09cy5sZW5ndGg/IltdIjpnYXA/IltcbiIrZ2FwK3Muam9pbigiLFxuIitnYXApKyJcbiIrYSsiXSI6IlsiK3Muam9pbigiLCIpKyJdIixnYXA9YSxyfWlmKHJlcCYmIm9iamVjdCI9PT0oInVuZGVmaW5lZCI9PXR5cGVvZiByZXA/InVuZGVmaW5lZCI6X3R5cGVvZihyZXApKSlmb3Iobz1yZXAubGVuZ3RoLG49MDtuPG87bis9MSkic3RyaW5nIj09dHlwZW9mIHJlcFtuXSYmKGk9cmVwW25dLHI9c3RyKGksbCksciYmcy5wdXNoKHF1b3RlKGkpKyhnYXA/IjogIjoiOiIpK3IpKTtlbHNlIGZvcihpIGluIGwpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGwsaSkmJihyPXN0cihpLGwpLHImJnMucHVzaChxdW90ZShpKSsoZ2FwPyI6ICI6IjoiKStyKSk7cmV0dXJuIHI9MD09PXMubGVuZ3RoPyJ7fSI6Z2FwPyJ7XG4iK2dhcCtzLmpvaW4oIixcbiIrZ2FwKSsiXG4iK2ErIn0iOiJ7IitzLmpvaW4oIiwiKSsifSIsZ2FwPWEscn19ImZ1bmN0aW9uIiE9dHlwZW9mIERhdGUucHJvdG90eXBlLnRvSlNPTiYmKERhdGUucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbih0KXtyZXR1cm4gaXNGaW5pdGUodGhpcy52YWx1ZU9mKCkpP3RoaXMuZ2V0VVRDRnVsbFllYXIoKSsiLSIrZih0aGlzLmdldFVUQ01vbnRoKCkrMSkrIi0iK2YodGhpcy5nZXRVVENEYXRlKCkpKyJUIitmKHRoaXMuZ2V0VVRDSG91cnMoKSkrIjoiK2YodGhpcy5nZXRVVENNaW51dGVzKCkpKyI6IitmKHRoaXMuZ2V0VVRDU2Vjb25kcygpKSsiWiI6bnVsbH0sU3RyaW5nLnByb3RvdHlwZS50b0pTT049TnVtYmVyLnByb3RvdHlwZS50b0pTT049Qm9vbGVhbi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnZhbHVlT2YoKX0pO3ZhciBjeD0vW1x1MDAwMFx1MDBhZFx1MDYwMC1cdTA2MDRcdTA3MGZcdTE3YjRcdTE3YjVcdTIwMGMtXHUyMDBmXHUyMDI4LVx1MjAyZlx1MjA2MC1cdTIwNmZcdWZlZmZcdWZmZjAtXHVmZmZmXS9nLGVzY2FwYWJsZT0vW1xcXCJceDAwLVx4MWZceDdmLVx4OWZcdTAwYWRcdTA2MDAtXHUwNjA0XHUwNzBmXHUxN2I0XHUxN2I1XHUyMDBjLVx1MjAwZlx1MjAyOC1cdTIwMmZcdTIwNjAtXHUyMDZmXHVmZWZmXHVmZmYwLVx1ZmZmZl0vZyxnYXAsaW5kZW50LG1ldGE9eyJcYiI6IlxcYiIsIlx0IjoiXFx0IiwiXG4iOiJcXG4iLCJcZiI6IlxcZiIsIlxyIjoiXFxyIiwnIic6J1xcIicsIlxcIjoiXFxcXCJ9LHJlcDsiZnVuY3Rpb24iIT10eXBlb2YgSlNPTi5zdHJpbmdpZnkmJihKU09OLnN0cmluZ2lmeT1mdW5jdGlvbih0LGUsbil7dmFyIGk7aWYoZ2FwPSIiLGluZGVudD0iIiwibnVtYmVyIj09dHlwZW9mIG4pZm9yKGk9MDtpPG47aSs9MSlpbmRlbnQrPSIgIjtlbHNlInN0cmluZyI9PXR5cGVvZiBuJiYoaW5kZW50PW4pO2lmKHJlcD1lLGUmJiJmdW5jdGlvbiIhPXR5cGVvZiBlJiYoIm9iamVjdCIhPT0oInVuZGVmaW5lZCI9PXR5cGVvZiBlPyJ1bmRlZmluZWQiOl90eXBlb2YoZSkpfHwibnVtYmVyIiE9dHlwZW9mIGUubGVuZ3RoKSl0aHJvdyBuZXcgRXJyb3IoIkpTT04uc3RyaW5naWZ5Iik7cmV0dXJuIHN0cigiIix7IiI6dH0pfSksImZ1bmN0aW9uIiE9dHlwZW9mIEpTT04ucGFyc2UmJihKU09OLnBhcnNlPWZ1bmN0aW9uKHRleHQscmV2aXZlcil7ZnVuY3Rpb24gd2Fsayh0LGUpe3ZhciBuLGkscj10W2VdO2lmKHImJiJvYmplY3QiPT09KCJ1bmRlZmluZWQiPT10eXBlb2Ygcj8idW5kZWZpbmVkIjpfdHlwZW9mKHIpKSlmb3IobiBpbiByKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLG4pJiYoaT13YWxrKHIsbiksdm9pZCAwIT09aT9yW25dPWk6ZGVsZXRlIHJbbl0pO3JldHVybiByZXZpdmVyLmNhbGwodCxlLHIpfXZhciBqO2lmKHRleHQ9U3RyaW5nKHRleHQpLGN4Lmxhc3RJbmRleD0wLGN4LnRlc3QodGV4dCkmJih0ZXh0PXRleHQucmVwbGFjZShjeCxmdW5jdGlvbih0KXtyZXR1cm4iXFx1IisoIjAwMDAiK3QuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikpLnNsaWNlKC00KX0pKSwvXltcXSw6e31cc10qJC8udGVzdCh0ZXh0LnJlcGxhY2UoL1xcKD86WyJcXFwvYmZucnRdfHVbMC05YS1mQS1GXXs0fSkvZywiQCIpLnJlcGxhY2UoLyJbXiJcXFxuXHJdKiJ8dHJ1ZXxmYWxzZXxudWxsfC0/XGQrKD86XC5cZCopPyg/OltlRV1bK1wtXT9cZCspPy9nLCJdIikucmVwbGFjZSgvKD86Xnw6fCwpKD86XHMqXFspKy9nLCIiKSkpcmV0dXJuIGo9ZXZhbCgiKCIrdGV4dCsiKSIpLCJmdW5jdGlvbiI9PXR5cGVvZiByZXZpdmVyP3dhbGsoeyIiOmp9LCIiKTpqO3Rocm93IG5ldyBTeQ==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("aXRfXyIsdGhpcy5fX2FwcGx5TW9kZSksdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCJpbnZhbGlkIGVycm9yIix0LnRocm90dGxlKGZ1bmN0aW9uKHQsZSxuKXt0aGlzLl9fc2hvd0Vycm9ycyh0LGUsbiE9PSExKX0sMTAwLHt0cmFpbGluZzohMX0pKSx0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsImZvcm06cmVzaXplIixmdW5jdGlvbigpe3RoaXMudHJpZ2dlcigicmVzaXplIil9KSx0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsImZvcm06Y2FuY2VsIix0LnRocm90dGxlKHRoaXMuX19jYW5jZWwsMTAwLHt0cmFpbGluZzohMX0pKSx0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsImZvcm06cHJldmlvdXMiLHQudGhyb3R0bGUodGhpcy5fX3ByZXZpb3VzLDEwMCx7dHJhaWxpbmc6ITF9KSksdGhpcy5fX3NhdmU9dC50aHJvdHRsZSh0aGlzLl9fc2F2ZSwyMDAse3RyYWlsaW5nOiExfSksdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCJmb3JtOnNhdmUiLGZ1bmN0aW9uKCl7dGhpcy4kZWwuc3VibWl0KCl9KSx0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsInN5bmMiLGZ1bmN0aW9uKCl7dGhpcy5tb2RlbC5nZXQoIl9fZWRpdF9fIikmJnRoaXMubW9kZWwuc2V0KCJfX2VkaXRfXyIsITEse3NpbGVudDohMH0pLHRoaXMuX19zYXZlTW9kZWxTdGF0ZSh0aGlzLm1vZGVsKSx0aGlzLnJlbmRlcigpfSk7dmFyIG49dGhpcy5nZXRBdHRyaWJ1dGUoImhhc1NhdmluZ1N0YXRlIik7aWYodGhpcy5nZXRBdHRyaWJ1dGUoImF1dG9TYXZlIikmJih0aGlzLmxpc3RlblRvKHRoaXMsInNhdmUiLGZ1bmN0aW9uKGUpe3ZhciBuPWUuc2F2ZSgpO24mJm4uZG9uZSYmbi5kb25lKHQuYmluZChmdW5jdGlvbigpe3RoaXMudHJpZ2dlcigic2F2ZWQiLGUpfSx0aGlzKSl9KSx0LmlzVW5kZWZpbmVkKG4pJiYobj0hMCkpLG4pe3ZhciBpPXRoaXMuZ2V0QXR0cmlidXRlKCJjdXN0b21TYXZpbmdTdGF0ZSIse30pO3RoaXMubGlzdGVuVG8odGhpcy5tb2RlbCx5KGkuc3RhcnR8fCIiLFsicmVxdWVzdCJdKSx0aGlzLl9fc2V0U2F2aW5nU3RhdGUpLHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCx5KGkuc3RvcHx8IiIsWyJlcnJvciIsInN5bmMiXSksdGhpcy5fX2NsZWFyU2F2aW5nU3RhdGUpfX0sX19jcmVhdGVUb29sYmFyOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMuZ2V0QXR0cmlidXRlKCJkYW5nZXIiKSxyPW49PT0hMD8iYnV0dG9uLWVycm9yIjoiYnV0dG9uLXByaW1hcnkiLG89bmV3IHAodC5leHRlbmQoe3NhdmU6dGhpcy5zYXZlfHxpLmxvY2FsaXplKCJvZm9ybS5zYXZlIiwiY291cmFnZSIpLHNhdmVJZDp0aGlzLnNhdmVJZCxzYXZlQ2xhc3NOYW1lOnIsY2FuY2VsOnRoaXMuY2FuY2VsfHxpLmxvY2FsaXplKCJvZm9ybS5jYW5jZWwiLCJjb3VyYWdlIiksbm9DYW5jZWxCdXR0b246dGhpcy5ub0NhbmNlbEJ1dHRvbnx8ITEsaGFzUHJldlN0ZXA6dGhpcy5zdGVwJiZ0aGlzLnN0ZXA+MX0sZXx8dGhpcy5vcHRpb25zKSk7cmV0dXJuIHQuZWFjaCh0aGlzLl9fYnV0dG9ucyxmdW5jdGlvbih0KXtvLmFkZEJ1dHRvbi5hcHBseShvLHQpfSksb30sY2xhc3NOYW1lOiIiLGF0dHJpYnV0ZXM6e30sZXZlbnRzOnt9LGlucHV0czpbXSx0ZW1wbGF0ZTpudWxsLHJlYWQ6ITEscmVhZE9ubHk6ITEsbm9CdXR0b25CYXI6ITEsbm9DYW5jZWxCdXR0b246ITEsc2F2ZTpudWxsLGNhbmNlbDpudWxsLGRhbmdlcjohMSxsYXlvdXQ6IiIsc3RlcDp2b2lkIDAsdG90YWxTdGVwczp2b2lkIDAsdGl0bGU6bnVsbCxzdWJ0aXRsZTpudWxsLGF1dG9TYXZlOiExLHNjcm9sbE9uRXJyb3I6ITAsc2hvd0Vycm9yczohMCxyZXNpemVTZWxlY3RvcjoiLm8tZm9ybS1jb250ZW50IixnZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oZSxuKXt2YXIgaT10LnJlc3VsdEN0eCh0aGlzLm9wdGlvbnMsZSx0aGlzKTtyZXR1cm4gdC5pc1VuZGVmaW5lZChpKSYmKGk9dC5yZXN1bHQodGhpcyxlKSksdC5pc1VuZGVmaW5lZChpKT9uOml9LGhhc1JlYWRNb2RlOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmdldEF0dHJpYnV0ZSgicmVhZCIpfSxpc1JlYWRPbmx5OmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmdldEF0dHJpYnV0ZSgicmVhZE9ubHkiKX0saGFzQnV0dG9uQmFyOmZ1bmN0aW9uKCl7cmV0dXJuISh0aGlzLmdldEF0dHJpYnV0ZSgibm9CdXR0b25CYXIiKXx8dGhpcy5pc1JlYWRPbmx5KCkpfSxyZW5kZXI6ZnVuY3Rpb24oKXtpZih0aGlzLl9fcmVhZE1vZGVCYXImJnRoaXMuX19yZWFkTW9kZUJhci5yZW1vdmUoKSx0aGlzLmhhc1JlYWRNb2RlKCkmJiF0aGlzLmlzUmVhZE9ubHkoKSl7dmFyIHQ9aC5leHRlbmQoe2Zvcm1UaXRsZTp0aGlzLmdldEF0dHJpYnV0ZSgidGl0bGUiLCIiKX0pO3RoaXMuX19yZWFkTW9kZUJhcj10aGlzLmFkZCh0LCIuby1mb3JtLXRpdGxlLWJhciIpLmxhc3QoKX12YXIgZT1uLnRwbChtKSh7bGF5b3V0OnRoaXMuZ2V0QXR0cmlidXRlKCJsYXlvdXQiLCIiKSx0aXRsZTp0aGlzLmdldEF0dHJpYnV0ZSgidGl0bGUiLCIiLCEwKSxzdWJ0aXRsZTp0aGlzLmdldEF0dHJpYnV0ZSgic3VidGl0bGUiLCIiLCEwKSxoYXNSZWFkTW9kZTp0aGlzLmhhc1JlYWRNb2RlKCl9KTtyZXR1cm4gdGhpcy4kZWwuaHRtbChlKSxkZWxldGUgdGhpcy50ZW1wbGF0ZSxyLnByb3RvdHlwZS5yZW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX19hcHBseU1vZGUoKSx0aGlzfSxfX3NldFNhdmluZ1N0YXRlOmZ1bmN0aW9uKCl7dGhpcy5tb2RlbC50cmlnZ2VyKCJmb3JtOnNldC1zYXZpbmctc3RhdGUiKSx0aGlzLiRlbC5hZGRDbGFzcygiby1mb3JtLXNhdmluZyIpfSxfX2NsZWFyU2F2aW5nU3RhdGU6ZnVuY3Rpb24oKXt0aGlzLm1vZGVsLnRyaWdnZXIoImZvcm06Y2xlYXItc2F2aW5nLXN0YXRlIiksdGhpcy4kZWwucmVtb3ZlQ2xhc3MoIm8tZm9ybS1zYXZpbmciKX0sX190bw==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("dGhpcy51cGRhdGUoKSx0aGlzLiRzZWxlY3QuY2hvc2VuKHt3aWR0aDp0LGRpc2FibGVfc2VhcmNoX3RocmVzaG9sZDpuLHBsYWNlaG9sZGVyX3RleHQ6dGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyfSksbCh0aGlzLiRzZWxlY3QpLHRoaXMucGFyYW1zLmF1dG9XaWR0aCYmdGhpcy4kZWwud2lkdGgoMCksdGhpcy5tb2RlbC50cmlnZ2VyKCJmb3JtOnJlc2l6ZSIpfSl9LHZhbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRzZWxlY3QmJnRoaXMuJHNlbGVjdC52YWwoKX0sZm9jdXM6ZnVuY3Rpb24oKXtpZih0aGlzLiRzZWxlY3QpcmV0dXJuIHRoaXMuJHNlbGVjdC5mb2N1cygpfSx0b1N0cmluZ1ZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRNb2RlbFZhbHVlKCksbj10LGk9dGhpcy5nZXRPcHRpb25zKCk7cmV0dXJuIGUuaXNFbXB0eShpKXx8KG49aVt0XSksZS5pc1VuZGVmaW5lZChuKSYmKG49dGhpcy5kZWZhdWx0VmFsdWUoKSksbnx8IiJ9LGdldE9wdGlvbnM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMub3B0aW9ucztyZXR1cm4gZS5pc0Z1bmN0aW9uKHQpJiYodD10LmNhbGwodGhpcykpLGUuaXNPYmplY3QodCk/dDp7fX0scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHNlbGVjdCYmdGhpcy4kc2VsZWN0LnRyaWdnZXIoInJlbW92ZSIpLHIucHJvdG90eXBlLnJlbW92ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSl9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7aT1bbigzMzIpXSxyPWZ1bmN0aW9uKHQpeyhmdW5jdGlvbigpe3ZhciB0O3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy5vcHRpb25zX2luZGV4PTAsdGhpcy5wYXJzZWQ9W119cmV0dXJuIHQucHJvdG90eXBlLmFkZF9ub2RlPWZ1bmN0aW9uKHQpe3JldHVybiJPUFRHUk9VUCI9PT10Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk/dGhpcy5hZGRfZ3JvdXAodCk6dGhpcy5hZGRfb3B0aW9uKHQpfSx0LnByb3RvdHlwZS5hZGRfZ3JvdXA9ZnVuY3Rpb24odCl7dmFyIGUsbixpLHIsbyxzO2ZvcihlPXRoaXMucGFyc2VkLmxlbmd0aCx0aGlzLnBhcnNlZC5wdXNoKHthcnJheV9pbmRleDplLGdyb3VwOiEwLGxhYmVsOnQubGFiZWwsY2hpbGRyZW46MCxkaXNhYmxlZDp0LmRpc2FibGVkfSksbz10LmNoaWxkTm9kZXMscz1bXSxpPTAscj1vLmxlbmd0aDtpPHI7aSsrKW49b1tpXSxzLnB1c2godGhpcy5hZGRfb3B0aW9uKG4sZSx0LmRpc2FibGVkKSk7cmV0dXJuIHN9LHQucHJvdG90eXBlLmFkZF9vcHRpb249ZnVuY3Rpb24odCxlLG4pe2lmKCJPUFRJT04iPT09dC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpKXJldHVybiIiIT09dC50ZXh0PyhudWxsIT1lJiYodGhpcy5wYXJzZWRbZV0uY2hpbGRyZW4rPTEpLHRoaXMucGFyc2VkLnB1c2goe2FycmF5X2luZGV4OnRoaXMucGFyc2VkLmxlbmd0aCxvcHQ=", "base64"));
  res.write(new Buffer("aW9uc19pbmRleDp0aGlzLm9wdGlvbnNfaW5kZXgsdmFsdWU6dC52YWx1ZSx0ZXh0OnQudGV4dCxodG1sOnQuaW5uZXJIVE1MLHNlbGVjdGVkOnQuc2VsZWN0ZWQsZGlzYWJsZWQ6bj09PSEwP246dC5kaXNhYmxlZCxncm91cF9hcnJheV9pbmRleDplLGNsYXNzZXM6dC5jbGFzc05hbWUsc3R5bGU6dC5zdHlsZS5jc3NUZXh0fSkpOnRoaXMucGFyc2VkLnB1c2goe2FycmF5X2luZGV4OnRoaXMucGFyc2VkLmxlbmd0aCxvcHRpb25zX2luZGV4OnRoaXMub3B0aW9uc19pbmRleCxlbXB0eTohMH0pLHRoaXMub3B0aW9uc19pbmRleCs9MX0sdH0oKSx0LnNlbGVjdF90b19hcnJheT1mdW5jdGlvbihlKXt2YXIgbixpLHIsbyxzO2ZvcihpPW5ldyB0LHM9ZS5jaGlsZE5vZGVzLHI9MCxvPXMubGVuZ3RoO3I8bztyKyspbj1zW3JdLGkuYWRkX25vZGUobik7cmV0dXJuIGkucGFyc2VkfSx0aGlzLlNlbGVjdFBhcnNlcj10fSkuY2FsbCh0aGlzKSxmdW5jdGlvbigpe3ZhciB0LGU7ZT10aGlzLHQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUsbil7dGhpcy5mb3JtX2ZpZWxkPWUsdGhpcy5vcHRpb25zPW51bGwhPW4/bjp7fSx0LmJyb3dzZXJfaXNfc3VwcG9ydGVkKCkmJih0aGlzLmlzX211bHRpcGxlPXRoaXMuZm9ybV9maWVsZC5tdWx0aXBsZSx0aGlzLnNldF9kZWZhdWx0X3RleHQoKSx0aGlzLnNldF9kZWZhdWx0X3ZhbHVlcygpLHRoaXMuc2V0dXAoKSx0aGlzLnNldF91cF9odG1sKCksdGhpcy5yZWdpc3Rlcl9vYnNlcnZlcnMoKSx0aGlzLmZpbmlzaF9zZXR1cCgpKX1yZXR1cm4gdC5wcm90b3R5cGUuc2V0X2RlZmF1bHRfdmFsdWVzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gdGhpcy5jbGlja190ZXN0X2FjdGlvbj1mdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0X2FjdGl2ZV9jbGljayhlKX0sdGhpcy5hY3RpdmF0ZV9hY3Rpb249ZnVuY3Rpb24oZSl7cmV0dXJuIHQuYWN0aXZhdGVfZmllbGQoZSl9LHRoaXMuYWN0aXZlX2ZpZWxkPSExLHRoaXMubW91c2Vfb25fY29udGFpbmVyPSExLHRoaXMucmVzdWx0c19zaG93aW5nPSExLHRoaXMucmVzdWx0X2hpZ2hsaWdodGVkPW51bGwsdGhpcy5yZXN1bHRfc2luZ2xlX3NlbGVjdGVkPW51bGwsdGhpcy5hbGxvd19zaW5nbGVfZGVzZWxlY3Q9bnVsbCE9dGhpcy5vcHRpb25zLmFsbG93X3NpbmdsZV9kZXNlbGVjdCYmbnVsbCE9dGhpcy5mb3JtX2ZpZWxkLm9wdGlvbnNbMF0mJiIiPT09dGhpcy5mb3JtX2ZpZWxkLm9wdGlvbnNbMF0udGV4dCYmdGhpcy5vcHRpb25zLmFsbG93X3NpbmdsZV9kZXNlbGVjdCx0aGlzLmRpc2FibGVfc2VhcmNoX3RocmVzaG9sZD10aGlzLm9wdGlvbnMuZGlzYWJsZV9zZWFyY2hfdGhyZXNob2xkfHwwLHRoaXMuZGlzYWJsZV9zZWFyY2g9dGhpcy5vcHRpb25zLmRpc2FibGVfc2VhcmNofHwhMSx0aGlzLmVuYWJsZV9zcGxpdF93b3JkX3NlYXJjaD1udWxsPT10aGlzLm9wdGlvbnMuZW5hYmxlX3NwbGl0X3dvcmRfc2VhcmNofHx0aGlzLm9wdGlvbnMuZW5hYmxlX3NwbGl0X3dvcmRfc2VhcmNoLHRoaXMuc2VhcmNoX2NvbnRhaW5zPXRoaXMub3B0aW9ucy5zZWFyY2hfY29udGFpbnN8fCExLHRoaXMuc2luZ2xlX2JhY2tzdHJva2VfZGVsZXRlPXRoaXMub3B0aW9ucy5zaW5nbGVfYmFja3N0cm9rZV9kZWxldGV8fCExLHRoaXMubWF4X3NlbGVjdGVkX29wdGlvbnM9dGhpcy5vcHRpb25zLm1heF9zZWxlY3RlZF9vcHRpb25zfHwxLzAsdGhpcy5pbmhlcml0X3NlbGVjdF9jbGFzc2VzPXRoaXMub3B0aW9ucy5pbmhlcml0X3NlbGVjdF9jbGFzc2VzfHwhMX0sdC5wcm90b3R5cGUuc2V0X2RlZmF1bHRfdGV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZvcm1fZmllbGQuZ2V0QXR0cmlidXRlKCJkYXRhLXBsYWNlaG9sZGVyIik/dGhpcy5kZWZhdWx0X3RleHQ9dGhpcy5mb3JtX2ZpZWxkLmdldEF0dHJpYnV0ZSgiZGF0YS1wbGFjZWhvbGRlciIpOnRoaXMuaXNfbXVsdGlwbGU/dGhpcy5kZWZhdWx0X3RleHQ9dGhpcy5vcHRpb25zLnBsYWNlaG9sZGVyX3RleHRfbXVsdGlwbGV8fHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcl90ZXh0fHx0LmRlZmF1bHRfbXVsdGlwbGVfdGV4dDp0aGlzLmRlZmF1bHRfdGV4dD10aGlzLm9wdGlvbnMucGxhY2Vob2xkZXJfdGV4dF9zaW5nbGV8fHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlcl90ZXh0fHx0LmRlZmF1bHRfc2luZ2xlX3RleHQsdGhpcy5yZXN1bHRzX25vbmVfZm91bmQ9dGhpcy5mb3JtX2ZpZWxkLmdldEF0dHJpYnV0ZSgiZGF0YS1ub19yZXN1bHRzX3RleHQiKXx8dGhpcy5vcHRpb25zLm5vX3Jlc3VsdHNfdGV4dHx8dC5kZWZhdWx0X25vX3Jlc3VsdF90ZXh0fSx0LnByb3RvdHlwZS5tb3VzZV9lbnRlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1vdXNlX29uX2NvbnRhaW5lcj0hMH0sdC5wcm90b3R5cGUubW91c2VfbGVhdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb3VzZV9vbl9jb250YWluZXI9ITF9LHQucHJvdG90eXBlLmlucHV0X2ZvY3VzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYodGhpcy5pc19tdWx0aXBsZSl7aWYoIXRoaXMuYWN0aXZlX2ZpZWxkKXJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGUuY29udGFpbmVyX21vdXNlZG93bigpfSw1MCl9ZWxzZSBpZighdGhpcy5hY3RpdmVfZmllbGQpcmV0dXJuIHRoaXMuYWN0aXZhdGVfZmllbGQoKX0sdC5wcm90b3R5cGUuaW5wdXRfYmx1cj1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKCF0aGlzLm1vdXNlX29uX2NvbnRhaW5lcilyZXR1cm4gdGhpcy5hY3RpdmVfZmllbGQ9ITEsc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBlLmJsdXJfdGVzdCgpfSwxMDApfSx0LnByb3RvdHlwZS5yZXN1bHRfYWRkX29wdGlvbj1mdW5jdGlvbih0KXt2YXIgZSxuO3JldHVybiB0LmRvbV9pZD10aGlzLmNvbnRhaW5lcl9pZCsiXw==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("aT1NYXRoLmZsb29yKGkvMikscj1NYXRoLmZsb29yKHIvMiksZS54PT09aj9sPWk6ZS54PT09Rj9sPW8ud2lkdGgtaTpsKz1NYXRoLmZsb29yKGkvMiksZS55PT09Uj9jPXI6ZS55PT09SD9jPW8uaGVpZ2h0LXI6Yys9TWF0aC5mbG9vcihyLzIpLHM9YS5sZW5ndGg7cy0tJiYhKGEubGVuZ3RoPDIpOyl1PWFbc11bMF0tby5wb3NpdGlvbi5sZWZ0LGQ9YVtzXVsxXS1vLnBvc2l0aW9uLnRvcCwoZS54PT09aiYmdT49bHx8ZS54PT09RiYmdTw9bHx8ZS54PT09eiYmKHU8bHx8dT5vLndpZHRoLWwpfHxlLnk9PT1SJiZkPj1jfHxlLnk9PT1IJiZkPD1jfHxlLnk9PT16JiYoZDxjfHxkPm8uaGVpZ2h0LWMpKSYmYS5zcGxpY2UocywxKTtvLnBvc2l0aW9uPXtsZWZ0OmFbMF1bMF0sdG9wOmFbMF1bMV19fXJldHVybiBvfSxyZWN0OmZ1bmN0aW9uKHQsZSxuLGkpe3JldHVybnt3aWR0aDpNYXRoLmFicyhuLXQpLGhlaWdodDpNYXRoLmFicyhpLWUpLHBvc2l0aW9uOntsZWZ0Ok1hdGgubWluKHQsbiksdG9wOk1hdGgubWluKGUsaSl9fX0sX2FuZ2xlczp7dGM6MS41LHRyOjcvNCx0bDo1LzQsYmM6LjUsYnI6LjI1LGJsOi43NSxyYzoyLGxjOjEsYzowfSxlbGxpcHNlOmZ1bmN0aW9uKHQsZSxuLGkscil7dmFyIG89Qi5wb2x5cy5fYW5nbGVzW3IuYWJicmV2KCldLHM9MD09PW8/MDpuKk1hdGguY29zKG8qTWF0aC5QSSksYT1pKk1hdGguc2luKG8qTWF0aC5QSSk7cmV0dXJue3dpZHRoOjIqbi1NYXRoLmFicyhzKSxoZWlnaHQ6MippLU1hdGguYWJzKGEpLHBvc2l0aW9uOntsZWZ0OnQrcyx0b3A6ZSthfSxhZGp1c3RhYmxlOkN9fSxjaXJjbGU6ZnVuY3Rpb24odCxlLG4saSl7cmV0dXJuIEIucG9seXMuZWxsaXBzZSh0LGUsbixuLGkpfX0sQi5zdmc9ZnVuY3Rpb24oZSxuLGkpe2Zvcih2YXIgcixvLHMsYSxjLHUsZCxoLHAsZj1uWzBdLG09dChmLm93bmVyU1ZHRWxlbWVudCksXz1mLm93bmVyRG9jdW1lbnQsZz0ocGFyc2VJbnQobi5jc3MoInN0cm9rZS13aWR0aCIpLDEwKXx8MCkvMjshZi5nZXRCQm94OylmPWYucGFyZW50Tm9kZTtpZighZi5nZXRCQm94fHwhZi5wYXJlbnROb2RlKXJldHVybiBDO3N3aXRjaChmLm5vZGVOYW1lKXtjYXNlImVsbGlwc2UiOmNhc2UiY2lyY2xlIjpoPUIucG9seXMuZWxsaXBzZShmLmN4LmJhc2VWYWwudmFsdWUsZi5jeS5iYXNlVmFsLnZhbHVlLChmLnJ4fHxmLnIpLmJhc2VWYWwudmFsdWUrZywoZi5yeXx8Zi5yKS5iYXNlVmFsLnZhbHVlK2csaSk7YnJlYWs7Y2FzZSJsaW5lIjpjYXNlInBvbHlnb24iOmNhc2UicG9seWxpbmUiOmZvcihkPWYucG9pbnRzfHxbe3g6Zi54MS5iYXNlVmFsLnZhbHVlLHk6Zi55MS5iYXNlVmFsLnZhbHVlfSx7eDpmLngyLmJhc2VWYWwudmFsdWUseTpmLnkyLmJhc2VWYWwudmFsdWV9XSxoPVtdLHU9LTEsYT1kLm51bWJlck9mSXRlbXN8fGQubGVuZ3RoOysrdTxhOyljPWQuZ2V0SXRlbT9kLmdldEl0ZW0odSk6ZFt1XSxoLnB1c2guYXBwbHkoaCxbYy54LGMueV0pO2g9Qi5wb2x5cy5wb2x5Z29uKGgsaSk7YnJlYWs7ZGVmYXVsdDpoPWYuZ2V0QkJveCgpLGg9e3dpZHRoOmgud2lkdGgsaGVpZ2h0OmguaGVpZ2h0LHBvc2l0aW9uOntsZWZ0OmgueCx0b3A6aC55fX19cmV0dXJuIHA9aC5wb3NpdGlvbixtPW1bMF0sbS5jcmVhdGVTVkdQb2ludCYmKG89Zi5nZXRTY3JlZW5DVE0oKSxkPW0uY3JlYXRlU1ZHUG9pbnQoKSxkLng9cC5sZWZ0LGQueT1wLnRvcCxzPWQubWF0cml4VHJhbnNmb3JtKG8pLHAubGVmdD1zLngscC50b3A9cy55KSxfIT09bCYmIm1vdXNlIiE9PWUucG9zaXRpb24udGFyZ2V0JiYocj10KChfLmRlZmF1bHRWaWV3fHxfLnBhcmVudFdpbmRvdykuZnJhbWVFbGVtZW50KS5vZmZzZXQoKSxyJiYocC5sZWZ0Kz1yLmxlZnQscC50b3ArPXIudG9wKSksXz10KF8pLHAubGVmdCs9Xy5zY3JvbGxMZWZ0KCkscC50b3ArPV8uc2Nyb2xsVG9wKCksaH0sQi5pbWFnZW1hcD1mdW5jdGlvbihlLG4saSl7bi5qcXVlcnl8fChuPXQobikpO3ZhciByLG8scyxhLGwsYz0obi5hdHRyKCJzaGFwZSIpfHwicmVjdCIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgicG9seSIsInBvbHlnb24iKSx1PXQoJ2ltZ1t1c2VtYXA9IiMnK24ucGFyZW50KCJtYXAiKS5hdHRyKCJuYW1lIikrJyJdJyksZD10LnRyaW0obi5hdHRyKCJjb29yZHMiKSksaD1kLnJlcGxhY2UoLywkLywiIikuc3BsaXQoIiwiKTtpZighdS5sZW5ndGgpcmV0dXJuIEM7aWYoInBvbHlnb24iPT09YylhPUIucG9seXMucG9seWdvbihoLGkpO2Vsc2V7aWYoIUIucG9seXNbY10pcmV0dXJuIEM7Zm9yKHM9LTEsbD1oLmxlbmd0aCxvPVtdOysrczxsOylvLnB1c2gocGFyc2VJbnQoaFtzXSwxMCkpO2E9Qi5wb2x5c1tjXS5hcHBseSh0aGlzLG8uY29uY2F0KGkpKX1yZXR1cm4gcj11Lm9mZnNldCgpLHIubGVmdCs9TWF0aC5jZWlsKCh1Lm91dGVyV2lkdGgoQyktdS53aWR0aCgpKS8yKSxyLnRvcCs9TWF0aC5jZWlsKCh1Lm91dGVySGVpZ2h0KEMpLXUuaGVpZ2h0KCkpLzIpLGEucG9zaXRpb24ubGVmdCs9ci5sZWZ0LGEucG9zaXRpb24udG9wKz1yLnRvcCxhfTt2YXIgeHQsQXQ9JzxpZnJhbWUgY2xhc3M9InF0aXAtYmdpZnJhbWUiIGZyYW1lYm9yZGVyPSIwIiB0YWJpbmRleD0iLTEiIHNyYz0iamF2YXNjcmlwdDpcJ1wnOyIgIHN0eWxlPSJkaXNwbGF5OmJsb2NrOyBwb3NpdGlvbjphYnNvbHV0ZTsgei1pbmRleDotMTsgZmlsdGVyOmFscGhhKG9wYWNpdHk9MCk7IC1tcy1maWx0ZXI6InByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTApIjsiPjwvaWZyYW1lPic7dC5leHRlbmQoVC5wcm90b3R5cGUse19zY3JvbGw6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLnF0aXAuZWxlbWVudHMub3ZlcmxheTtlJiYoZVswXS5zdHlsZS50b3A9dChhKS5zY3JvbGxUb3AoKSsicHgiKX0saW5pdDpmdW5jdGlvbihlKXt2YXIgbj1lLnRvb2x0aXA7dCgic2VsZWN0LCBvYmplY3QiKS5sZW5ndGg8MSYmKHRoaXMuYmdpZnJhbWU9ZS5lbGVtZW50cy5iZ2lmcmFtZT10KEF0KS5hcHBlbmRUbyhuKSxlLl9iaW5kKG4sInRvb2x0aXBtb3ZlIix0aGlzLmFkanVzdEJHSUZyYW1lLHRoaXMuX25zLHRoaXMpKSx0aGlzLnJlZHJhd0NvbnRhaW5lcj10KCI8ZGl2Lz4iLHtpZDpWKyItcmNvbnRhaW5lciJ9KS5hcHBlbmRUbyhsLmJvZHkpLGUuZWxlbWVudHMub3ZlcmxheSYmZS5lbGVtZW50cy5vdmVybGF5LmFkZENsYXNzKCJxdGlwbW9kYWwtaWU2Zml4IikmJihlLl9iaW5kKGEsWyJzY3JvbGwiLCJyZXNpemUiXSx0aGlzLl9zY3JvbGwsdGhpcy5fbnMsdGhpcyksZS5fYmluZChuLFsidG9vbHRpcHNob3ciXSx0aGlzLl9zY3JvbGwsdGhpcy5fbnMsdGhpcykpLHRoaXMucmVkcmF3KCl9LGFkanVzdEJHSUZyYW1lOmZ1bmN0aW9uKCl7dmFyIHQsZSxuPXRoaXMucXRpcC50b29sdGlwLGk9e2hlaWdodDpuLm91dGVySGVpZ2h0KEMpLHdpZHRoOm4ub3V0ZXJXaWR0aChDKX0scj10aGlzLnF0aXAucGx1Z2lucy50aXAsbz10aGlzLnF0aXAuZWxlbWVudHMudGlwO2U9cGFyc2VJbnQobi5jc3MoImJvcmRlckxlZnRXaWR0aCIpLDEwKXx8MCxlPXtsZWZ0Oi1lLHRvcDotZX0sciYmbyYmKHQ9IngiPT09ci5jb3JuZXIucHJlY2VkYW5jZT9bTixqXTpbSSxSXSxlW3RbMV1dLT1vW3RbMF1dKCkpLHRoaXMuYmdpZnJhbWUuY3NzKGUpLmNzcyhpKX0scmVkcmF3OmZ1bmN0aW9uKCl7aWYodGhpcy5xdGlwLnJlbmRlcmVkPDF8fHRoaXMuZHJhd2luZylyZXR1cm4gdGhpczt2YXIgdCxlLG4saSxyPXRoaXMucXRpcC50b29sdGlwLG89dGhpcy5xdGlwLm9wdGlvbnMuc3R5bGUscz10aGlzLnF0aXAub3B0aW9ucy5wb3NpdGlvbi5jb250YWluZXI7cmV0dXJuIHRoaXMucXRpcC5kcmF3aW5nPTEsby5oZWlnaHQmJnIuY3NzKEksby5oZWlnaHQpLG8ud2lkdGg/ci5jc3MoTixvLndpZHRoKTooci5jc3MoTiwiIikuYXBwZW5kVG8odGhpcy5yZWRyYXdDb250YWluZXIpLGU9ci53aWR0aCgpLGUlMjwxJiYoZSs9MSksbj1yLmNzcygibWF4V2lkdGgiKXx8IiIsaT1yLmNzcygibWluV2lkdGgiKXx8IiIsdD0obitpKS5pbmRleE9mKCIlIik+LTE/cy53aWR0aCgpLzEwMDowLG49KG4uaW5kZXhPZigiJSIpPi0xP3Q6MSpwYXJzZUludChuLDEwKSl8fGUsaT0oaS5pbmRleE9mKCIlIik+LTE/dDoxKnBhcnNlSW50KGksMTApKXx8MCxlPW4raT9NYXRoLm1pbihNYXRoLm1heChlLGkpLG4pOmUsci5jc3MoTixNYXRoLnJvdW5kKGUpKS5hcHBlbmRUbyhzKSksdGhpcy5kcmF3aW5nPTAsdGhpc30sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuYmdpZnJhbWUmJnRoaXMuYmdpZnJhbWUucmVtb3ZlKCksdGhpcy5xdGlwLl91bmJpbmQoW2EsdGhpcy5xdGlwLnRvb2x0aXBdLHRoaXMuX25zKX19KSx4dD1CLmllNj1mdW5jdGlvbih0KXtyZXR1cm4gNj09PXJ0LmllP25ldyBUKHQpOkN9LHh0LmluaXRpYWxpemU9InJlbmRlciIsQS5pZTY9eyJeY29udGVudHxzdHlsZSQiOmZ1bmN0aW9uKCl7dGhpcy5yZWRyYXcoKX19fSl9KHdpbmRvdyxkb2N1bWVudCl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzI4KSxuKDQ3MCksbig1NTkpXSxyPWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKGUsbil7ZS5hcHBseSh0aGlzLHQubWFwKG4uc3BsaXQoL1xzKy8pLGZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm1vZGVsLmdldCh0KX0sdGhpcykpfWZ1bmN0aW9uIHIoZSxuKXt0LmlzRnVuY3Rpb24oZSkmJmUuY2FsbChuKX1yZXR1cm4gZS5leHRlbmQoe2NsYXNzTmFtZTpmdW5jdGlvbiBvKCl7dmFyIG89Im8tZm9ybS1maWVsZHNldCI7cmV0dXJuIHRoaXMub3B0aW9uc1sibGFiZWwtdG9wIl0mJihvKz0iIG8tZm9ybS1sYWJlbC10b3AiKSx0aGlzLm9wdGlvbnMucmVhZE9ubHkmJihvKz0iIG8tZm9ybS1yZWFkLW1vZGUiKSxvfSxhdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7cmV0dXJueyJkYXRhLXNlIjp0aGlzLm9wdGlvbnNbImRhdGEtc2UiXXx8Im8tZm9ybS1maWVsZHNldCJ9fSxjb25zdHJ1Y3RvcjpmdW5jdGlvbihvKXtvLmNsYXNzTmFtZSYmKHRoaXMuaW5wdXRXcmFwcGVyQ2xhc3NOYW1lPXRoaXMuY2xhc3NOYW1lLHRoaXMub3B0aW9uc0NsYXNzTmFtZT1vLmNsYXNzTmFtZSxvLmNsYXNzTmFtZT1mdW5jdGlvbigpe3JldHVybiB0LnJlc3VsdCh0aGlzLCJpbnB1dFdyYXBwZXJDbGFzc05hbWUiLCIiKSsiICIrdC5yZXN1bHQodGhpcywib3B0aW9uc0NsYXNzTmFtZSIpfSksZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdC5lYWNoKG8uZXZlbnRzfHx7fSxmdW5jdGlvbih0LGUpe3RoaXMubGlzdGVuVG8odGhpcy5tb2RlbCxlLHQpfSx0aGlzKSx0LmVhY2goby5iaW5kaW5nc3x8e30sZnVuY3Rpb24oZSxyKXt0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsbi5jaGFuZ2VFdmVudFN0cmluZyhyLnNwbGl0KC9ccysvKSksdC5iaW5kKGksdGhpcyxlLHIpKX0sdGhpcyksbi5hcHBseVNob3dXaGVuKHRoaXMsby5zaG93V2hlbiksbi5hcHBseVRvZ2dsZVdoZW4odGhpcyxvLnRvZ2dsZVdoZW4pLHIoby5pbml0aWFsaXplLHRoaXMpfSxwb3N0UmVuZGVyOmZ1bmN0aW9uKCl7dC5lYWNoKHRoaXMub3B0aW9ucy5iaW5kaW5nc3x8e30saSx0aGlzKSxyKHRoaXMub3B0aW9ucy5yZW5kZXIsdGhpcyl9LGdldExhYmVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2l6ZSgpPjE/dGhpcy5hdCgwKTpudWxsfSxnZXRJbnB1dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldElucHV0Q29udGFpbmVyKCl9LGdldElucHV0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXQodGhpcy5zaXplKCk+MT8xOjApfSxnZXRJbnB1dHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRJbnB1dENvbnRhaW5lcigpLnRvQXJyYXkoKX0sZm9jdXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRJbnB1dCgpLmZvY3VzKCl9fSl9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7aT1bbigzMjgpLG4oNTAwKSxuKDQ3MCksbig0OTcpLG4oNDY0KSxuKDQ4MCldLHI9ZnVuY3Rpb24odCxlLG4saSxyLG8pe2Z1bmN0aW9uIHMoZSl7aWYoZSYmIWUuX19lZGl0X18pcmV0dXJuIHQuZXh0ZW5kKHtfX2VkaXRfXzp0LmNvbnN0YW50KCEwKX0sZSl9ZnVuY3Rpb24gYShlKXtlPXQucGljayhlfHx7fSwiYWN0aW9uIiwiaWQiLCJjbGFzc05hbWUiLCJ0ZXh0IiwidHlwZSIpO3ZhciByLG8scztyZXR1cm4gbi5leHRlbmQoe3RhZ05hbWU6ImlucHV0IixjbGFzc05hbWU6ImJ1dHRvbiIsZXZlbnRzOntjbGljazpmdW5jdGlvbigpe2UuYWN0aW9uJiYhdGhpcy5kaXNhYmxlZCgpJiZlLmFjdGlvbi5jYWxsKHRoaXMpfSxrZXl1cDpmdW5jdGlvbih0KXtpLmlzRW50ZXIodCkmJmUuYWN0aW9uJiYhdGhpcy5kaXNhYmxlZCgpJiZlLmFjdGlvbi5jYWxsKHRoaXMpfX0sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWwucHJvcCgiZGlzYWJsZWQiKT09PSEwfSxkaXNhYmxlOmZ1bmN0aW9uKCl7dGhpcy4kZWwucHJvcCgiZGlzYWJsZWQiLCEwKSx0aGlzLiRlbC5hZGRDbGFzcygiYnRuLWRpc2FibGVkIil9LGVuYWJsZTpmdW5jdGlvbigpe3RoaXMuJGVsLnByb3AoImRpc2FibGVkIiwhMSksdGhpcy4kZWwucmVtb3ZlQ2xhc3MoImJ0bi1kaXNhYmxlZCIpfSxpbml0aWFsaXplOmZ1bmN0aW9uKCl7dmFyIG49dGhpczt0aGlzLiRlbC5hdHRyKCJ0eXBlIiwic2F2ZSI9PWUudHlwZT8ic3VibWl0IjoiYnV0dG9uIiksdGhpcy4kZWwudmFsKGUudGV4dCksZS5pZCYmdGhpcy4kZWwuYXR0cigiaWQiLGUuaWQpLGUuY2xhc3NOYW1lJiZ0aGlzLiRlbC5hZGRDbGFzcyhlLmNsYXNzTmFtZSksZS50eXBlJiZ0aGlzLiRlbC5hdHRyKCJkYXRhLXR5cGUiLGUudHlwZSksdGhpcy4kZWwubW91c2Vkb3duKGZ1bmN0aW9uKCl7bi5tb2RlbC5zZXQoIl9fcGVuZGluZ19fIiwhMCl9KSx0aGlzLiRlbC5tb3VzZXVwKGZ1bmN0aW9uKCl7bi5tb2RlbC5zZXQoIl9fcGVuZGluZ19fIiwhMSl9KSx0aGlzLmxpc3RlblRvKHRoaXMubW9kZWwsImZvcm06c2V0LXNhdmluZy1zdGF0ZSIsZnVuY3Rpb24oKXt0aGlzLmRpc2FibGUoKSwic2F2ZSI9PWUudHlwZSYmKHI9c2V0VGltZW91dCh0LmJpbmQodGhpcy5fX2NoYW5nZVNhdmVUZXh0LHRoaXMpLDFlMykpfSksdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCJmb3JtOmNsZWFyLXNhdmluZy1zdGF0ZSIsZnVuY3Rpb24oKXt0aGlzLmVuYWJsZSgpLCJzYXZlIj09ZS50eXBlJiYoY2xlYXJUaW1lb3V0KHIpLGNsZWFySW50ZXJ2YWwobyksdGhpcy4kZWwudmFsKGUudGV4dCkpfSl9LF9fY2hhbmdlU2F2ZVRleHQ6ZnVuY3Rpb24oKXtzPTAsbz1zZXRJbnRlcnZhbCh0LmJpbmQodGhpcy5fX3Nob3dMb2FkaW5nVGV4dCx0aGlzKSwyMDApfSxfX3Nob3dMb2FkaW5nVGV4dDpmdW5jdGlvbigpe3RoaXMuJGVsLnZhbChfW3MrKyVfLmxlbmd0aF0pfX0pfWZ1bmN0aW9uIGwoZSxuKXtpZihlfHwoZT17fSksImxhYmVsIj09ZS50eXBlKXJldHVybiB2b2lkKGUubGFiZWx8fHIud2FybignQSBsYWJlbCBpbnB1dCBtdXN0IGhhdmUgYSAibGFiZWwiIHBhcmFtZXRlcicsZSkpO2lmKCJidXR0b24iPT1lLnR5cGUpcmV0dXJuIGUudGl0bGV8fGUuaWNvbnx8ci53YXJuKCdBIGJ1dHRvbiBpbnB1dCBtdXN0IGhhdmUgYSAidGl0bGUiIGFuZC9vciBhbiAiaWNvbiIgcGFyYW1ldGVyJyxlKSx2b2lkKGUuY2xpY2t8fGUuaHJlZnx8ci53YXJuKCdBIGJ1dHRvbiBpbnB1dCBtdXN0IGhhdmUgYSAiY2xpY2siIGFuZC9vciBhbiAiaHJlZiIgcGFyYW1ldGVyJyxlKSk7aWYoZS5uYW1lfHxlLmlucHV0fHxyLndhcm4oJ01pc3NpbmcgIm5hbWUiIG9yICJpbnB1dCIgcGFyYW1ldGVycycsZSksdC5pc0FycmF5KGUubmFtZSkmJnQuaXNBcnJheShlLmlucHV0KSl0aHJvdyBuZXcgRXJyb3IoJ05vdCBhbGxvd2VkIHRvIGhhdmUgYm90aCAibmFtZSIgYW5kICJpbnB1dCIgZGVmaW5lZCBhcyBhcnJheS4nKTtpZigibGlzdCIhPWUudHlwZSYmZS5uYW1lJiZuJiZuLmFsbG93cyl7dmFyIGk9W107dC5pc0FycmF5KGUubmFtZSk/aT1lLm5hbWU6aS5wdXNoKGUubmFtZSksdC5lYWNoKGksZnVuY3Rpb24odCl7aWYoIW4uYWxsb3dzKHQpKXRocm93IG5ldyBFcnJvcigiZmllbGQgbm90IGFsbG93ZWQ6ICIrZS5uYW1lKX0pfXQuaXNBcnJheShlLmlucHV0KSYmImxpc3QiIT1lLnR5cGUmJnQuZWFjaChlLmlucHV0LGZ1bmN0aW9uKHQpe2wodCxuKX0pO3ZhciBvPXQua2V5cyhlKSxzPXQuaW50ZXJzZWN0aW9uKG8sbSk7aWYodC5zaXplKHMpIT10LnNpemUoZSkpe3ZhciBhPXQuY2xvbmUobSk7YS51bnNoaWZ0KG8pLHIud2FybigiSW52YWxpZCBpbnB1dCBwYXJhbWV0ZXJzIix0LndpdGhvdXQuYXBwbHkobnVsbCxhKSxlKX19ZnVuY3Rpb24gYyhlLG4saSl7ZT10LmNsb25lKGUpLHQuY29udGFpbnMoWyJsaXN0IiwiZ3JvdXAiXSxlLnR5cGUpJiYoZS5wYXJhbXM9dC5kZWZhdWx0cyh7Y3JlYXRlOmksaW5wdXRzOnQubWFwKHQuaXNBcnJheShlLmlucHV0KT9lLmlucHV0OltlLmlucHV0XSxmdW5jdGlvbihlKXtyZXR1cm4gdC5maXJzdChjKGUsbixpKSl9KX0sZS5wYXJhbXN8fHt9KSxkZWxldGUgZS5pbnB1dCk7dmFyIHI9dC5pc0FycmF5KGUuaW5wdXQpP3QuY2xvbmUoZS5pbnB1dCk6W2VdO3JldHVybiB0Lm1hcChyLGZ1bmN0aW9uKGkpe3ZhciByPXQuZGVmYXVsdHMoe21vZGVsOm4ubW9kZWx9LGksdC5vbWl0KGUsImlucHV0IiwiaW5wdXRzIiksbi5vcHRpb25zLHtpZDp0LnVuaXF1ZUlkKCJpbnB1dCIpLHJlYWRPbmx5Om4uaXNSZWFkT25seSgpLHJlYWQ6bi5oYXNSZWFkTW9kZSgpfSk7cmV0dXJuIG4uaXNSZWFkT25seSgpJiYoci5yZWFkPXIucmVhZE9ubHk9ITApLHJ9KX12YXIgdT1bIm1vZGVsIiwiaWQiLCJpbnB1dElkIiwidHlwZSIsImxhYmVsIiwic3VibGFiZWwiLCJ0b29sdGlwIiwibmFtZSJdLGQ9WyJ3aWRlIiwibXVsdGkiLCJpbnB1dCIsImV4cGxhaW4iLCJjdXN0b21FeHBsYWluIiwibW9kZWwiLCJuYW1lIiwidHlwZSIsImF1dG9SZW5kZXIiXSxoPVsibW9kZWwiLCJuYW1lIiwibGFiZWwtdG9wIiwicmVhZE9ubHkiLCJldmVudHMiLCJpbml0aWFsaXplIiwic2hvd1doZW4iLCJiaW5kaW5ncyIsInJlbmRlciIsImNsYXNzTmFtZSIsImRhdGEtc2UiLCJ0b2dnbGVXaGVuIl0scD1bIm1vZGVsIiwibmFtZSIsImlucHV0SWQiLCJ0eXBlIiwiaW5wdXQiLCJwbGFjZWhvbGRlciIsImxhYmVsIiwicmVhZE9ubHkiLCJyZWFkIiwiZGlzYWJsZWQiLCJyZWFkTW9kZVN0cmluZyIsIm9wdGlvbnMiLCJmcm9tIiwidG8iLCJhdXRvUmVuZGVyIiwiaW5saW5lVmFsaWRhdGlvbiIsInZhbGlkYXRlT25seUlmRGlydHkiLCJhcmlhTGFiZWwiLCJwYXJhbXMiXSxmPVsiZXJyb3JGaWVsZCJdLG09dC51bmlxKHQudW5pb24odSxkLGgscCxmKSksXz1bIuKAoiAgICAgICAgICIsIuKAoiAg4oCiICAgICAgIiwi4oCiICDigKIgIOKAoiAgICIsIuKAoiAg4oCiICDigKIgIOKAoiIsIiAgIOKAoiAg4oCiICDigKIiLCIgICAgICDigKIgIOKAoiIsIiAgICAgICAgIOKAoiIsIiAgICAgICAgICAiLCIgICAgICAgICAgIiwiICAgICAgICAgICJdO3JldHVybntMQUJFTF9PUFRJT05TOnUsQ09OVEFJTkVSX09QVElPTlM6ZCxXUkFQUEVSX09QVElPTlM6aCxJTlBVVF9PUFRJT05TOnAsZ2VuZXJhdGVJbnB1dE9wdGlvbnM6YyxjaGFuZ2VFdmVudFN0cmluZzpmdW5jdGlvbih0KXtyZXR1cm4iY2hhbmdlOiIrdC5qb2luKCIgY2hhbmdlOiIpfSxjcmVhdGVSZWFkRm9ybUJ1dHRvbjpmdW5jdGlvbihpKXt2YXIgcixvLHM7cmV0dXJuImNhbmNlbCI9PWkudHlwZT8obz1zPWUubG9jYWxpemUoIm9mb3JtLmNhbmNlbCIsImNvdXJhZ2UiKSxyPWZ1bmN0aW9uKCl7dGhpcy5tb2RlbC50cmlnZ2VyKCJmb3JtOmNhbmNlbCIpfSk6KG89ZS5sb2NhbGl6ZSgib2Zvcm0uZWRpdCIsImNvdXJhZ2UiKSxzPW8rIiAiK2kuZm9ybVRpdGxlLHI9ZnVuY3Rpb24oKXt0aGlzLm1vZGVsLnNldCgiX19lZGl0X18iLCEwKX0pLG4uZXh0ZW5kKHt0YWdOYW1lOiJhIixhdHRyaWJ1dGVzOntocmVmOiIjIiwiYXJpYS1sYWJlbCI6c30sdGVtcGxhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gdC5lc2NhcGUobyl9LGV2ZW50czp7Y2xpY2s6ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHIuY2FsbCh0aGlzKX19fSl9LGNyZWF0ZUJ1dHRvbjpmdW5jdGlvbihuKXtzd2l0Y2gobj10LmNsb25lKG4pLG4udHlwZSl7Y2FzZSJzYXZlIjp0LmRlZmF1bHRzKG4se2NsYXNzTmFtZToiYnV0dG9uLXByaW1hcnkifSk7YnJlYWs7Y2FzZSJjYW5jZWwiOnQuZGVmYXVsdHMobix7dGV4dDplLmxvY2FsaXplKCJvZm9ybS5jYW5jZWwiLCJjb3VyYWdlIiksYWN0aW9uOmZ1bmN0aW9uKCl7dGhpcy5tb2RlbC50cmlnZ2VyKCJmb3JtOmNhbmNlbCIpfX0pO2JyZWFrO2Nhc2UicHJldmlvdXMiOnQuZGVmYXVsdHMobix7dGV4dDplLmxvY2FsaXplKCJvZm9ybS5wcmV2aW91cyIsImNvdXJhZ2UiKSxhY3Rpb246ZnVuY3Rpb24oKXt0aGlzLm1vZGVsLnRyaWdnZXIoImZvcm06cHJldmlvdXMiKX19KX1yZXR1cm4gYShuKX0sdmFsaWRhdGVJbnB1dDpsLGFwcGx5U2hvd1doZW46ZnVuY3Rpb24odCxlKXt2YXIgbj1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXt0LiRlbC50b2dnbGUoZSksdC5tb2RlbC50cmlnZ2VyKCJmb3JtOnJlc2l6ZSIpfX07by5hcHBseURvV2hlbih0LHMoZSksZnVuY3Rpb24oZSxpKXtpLmFuaW1hdGU/dC4kZWxbInNsaWRlIisoZT8iRG93biI6IlVwIildKDIwMCxuKGUpKTp0LiRlbC50b2dnbGUoZSl9KX0sYXBwbHlUb2dnbGVXaGVuOmZ1bmN0aW9uKHQsZSl7by5hcHBseURvV2hlbih0LHMoZSksZnVuY3Rpb24oZSxuKXt0LiRlbC50b2dnbGUoZSksdC5tb2RlbC50cmlnZ2VyKCJmb3JtOnJlc2l6ZSIpLG4uYW5pbWF0ZSYmdC5yZW5kZXIoKX0pfX19LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7aT1bbig0NzApXSxyPWZ1bmN0aW9uKHQpe3ZhciBlPSdcdCAgICA8ZGl2IGNsYXNzPSJva3RhLWZvcm0taW5mb2JveC1lcnJvciBpbmZvYm94IGluZm9ib3gtZXJyb3IiIHJvbGU9ImFsZXJ0Ij5cdCAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGVycm9yLTE2Ij48L3NwYW4+XHQgICAgICB7eyNpZiBlcnJvclN1bW1hcnl9fVx0ICAgICAgICA8cD57e2Vycm9yU3VtbWFyeX19PC9wPlx0ICAgICAge3tlbHNlfX1cdCAgICAgICAgPHA+e3tpMThuIGNvZGU9Im9mb3JtLmVycm9yYmFubmVyLnRpdGxlIiBidW5kbGU9ImNvdXJhZ2UifX08L3A+XHQgICAgICB7ey9pZn19XHQgICAgPC9kaXY+XHQgICc7cmV0dXJuIHQuZXh0ZW5kKHt0ZW1wbGF0ZTplLG1vZGVsRXZlbnRzOnsiZm9ybTpjbGVhci1lcnJvcnMiOiJyZW1vdmUifX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSl7fSxmdW5jdGlvbih0LGUsbil7dmFyIGkscjtpPVtuKDMyOCksbig0NzApLG4oNTU5KV0scj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGUuZXh0ZW5kKHtjbGFzc05hbWU6Im8tZm9ybS1idXR0b24tYmFyIixpbml0aWFsaXplOmZ1bmN0aW9uKGUpe3RoaXMuYWRkQnV0dG9uKHt0eXBlOiJzYXZlIix0ZXh0OnQucmVzdWx0Q3R4KGUsInNhdmUiLHRoaXMpLGlkOnQucmVzdWx0Q3R4KGUsInNhdmVJZCIsdGhpcyksY2xhc3NOYW1lOnQucmVzdWx0Q3R4KGUsInNhdmVDbGFzc05hbWUiLHRoaXMpfSksZS5ub0NhbmNlbEJ1dHRvbnx8dGhpcy5hZGRCdXR0b24oe3R5cGU6ImNhbmNlbCIsdGV4dDp0LnJlc3VsdEN0eChlLCJjYW5jZWwiLHRoaXMpfSksZS5oYXNQcmV2U3RlcCYmdGhpcy5hZGRCdXR0b24oe3R5cGU6InByZXZpb3VzIn0se3ByZXBlbmQ6ITB9KX0sYWRkQnV0dG9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYWRkKG4uY3JlYXRlQnV0dG9uKHQpLGUpfX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzMxKSxuKDMyOCksbig0NzEpLG4oNDcwKSxuKDU2NCldLHI9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9bi50cGw7cmV0dXJuIGkuZXh0ZW5kKHtwYXJhbXM6e30sY29uc3RydWN0b3I6ZnVuY3Rpb24oKXtpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLiRlbC5hZGRDbGFzcygic2ltcGxlbW9kYWwtd3JhcCIpLHRoaXMucGFyYW1zPWUuZXh0ZW5kKHtvbkNsb3NlOmUuYmluZChlLnRocm90dGxlKHRoaXMucmVtb3ZlLDY0KSx0aGlzKX0sdGhpcy5wYXJhbXN8fHt9KX0scmVuZGVyOmZ1bmN0aW9uKCl7dGhpcy5kZWxlZ2F0ZUV2ZW50cygpLGkucHJvdG90eXBlLnJlbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dmFyIG49ZS5leHRlbmQoe30sZS5waWNrKHRoaXMsInRpdGxlIiwic3VidGl0bGUiKSxlLnBpY2sodGhpcy5vcHRpb25zLCJ0aXRsZSIsInN1YnRpdGxlIikpO2lmKG4uc3VidGl0bGUpe3ZhciBvPWUucmVzdWx0Q3R4KG4sInN1YnRpdGxlIix0aGlzKTt0aGlzLiRlbC5wcmVwZW5kKHIoJzxwIGNsYXNzPSJtb2RhbC1zdWJ0aXRsZSB0ZXh0LWxpZ2h0IFx0ICAgICAgICAgIHBhZGRpbmctMjAgbWFyZ2luLWJ0bS0wIj57e3N1YnRpdGxlfX08L3A+Jykoe3N1YnRpdGxlOm99KSl9aWYobi50aXRsZSl7dmFyIHM9ZS5yZXN1bHRDdHgobiwidGl0bGUiLHRoaXMpO3RoaXMuJGVsLnByZXBlbmQocignPGgyIGNsYXNzPSJibG9jayBtb2RhbC10aXRsZSI+e3t0aXRsZX19PC9oMj4nKSh7dGl0bGU6c30pKX1yZXR1cm4gZS5kZWZlcihlLmJpbmQoZnVuY3Rpb24oKXt0aGlzLiRlbC5tb2RhbCh0aGlzLnBhcmFtcyksdGhpcy5yZXNpemUoKX0sdGhpcykpLHQoImJvZHkiKS5jc3MoIm92ZXJmbG93IiwiaGlkZGVuIiksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIHQubW9kYWwuY2xvc2UoKSx0KCJib2R5IikuY3NzKCJvdmVyZmxvdyIsIiIpLGUuZGVmZXIoZnVuY3Rpb24oKXt0Lm1vZGFsLmNsb3NlKCl9KSxpLnByb3RvdHlwZS5yZW1vdmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxyZXNpemU6ZnVuY3Rpb24oKXt0Lm1vZGFsLnVwZGF0ZSh0aGlzLiRlbC5vdXRlckhlaWdodCgpKX19KX0uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbih0LGUsbil7dmFyIGkscixvLHM9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIHR9OyFmdW5jdGlvbihzKXtyPVtuKDMzMildLGk9cyxvPSJmdW5jdGlvbiI9PXR5cGVvZiBpP2kuYXBwbHkoZSxyKTppLCEodm9pZCAwIT09byYmKHQuZXhwb3J0cz1vKSl9KGZ1bmN0aW9uKHQpe3ZhciBlPVtdLG49dChkb2N1bWVudCksaT1uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkscj10KHdpbmRvdyksbz1bXSxhPXtpZVF1aXJrczpudWxsLG1zaWU6L21zaWUvLnRlc3QoaSkmJiEvb3BlcmEvLnRlc3QoaSksb3BlcmE6L29wZXJhLy50ZXN0KGkpfTthLmllNj1hLm1zaWUmJi9tc2llIDYuLy50ZXN0KGkpJiYib2JqZWN0IiE9PXMod2luZG93LlhNTEh0dHBSZXF1ZXN0KSxhLmllNz1hLm1zaWUmJi9tc2llIDcuMC8udGVzdChpKSx0Lm1vZGFsPWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQubW9kYWwuaW1wbC5pbml0KGUsbil9LHQubW9kYWwuY2xvc2U9ZnVuY3Rpb24oKXt0Lm1vZGFsLmltcGwuY2xvc2UoKX0sdC5tb2RhbC5mb2N1cz1mdW5jdGlvbihlKXt0Lm1vZGFsLmltcGwuZm9jdXMoZSl9LHQubW9kYWwuc2V0Q29udGFpbmVyRGltZW5zaW9ucz1mdW5jdGlvbigpe3QubW9kYWwuaW1wbC5zZXRDb250YWluZXJEaW1lbnNpb25zKCl9LHQubW9kYWwuc2V0UG9zaXRpb249ZnVuY3Rpb24oKXt0Lm1vZGFsLmltcGwuc2V0UG9zaXRpb24oKX0sdC5tb2RhbC51cGRhdGU9ZnVuY3Rpb24oZSxuKXt0Lm1vZGFsLmltcGwudXBkYXRlKGUsbil9LHQuZm4ubW9kYWw9ZnVuY3Rpb24oZSl7cmV0dXJuIHQubW9kYWwuaW1wbC5pbml0KHRoaXMsZSl9LHQubW9kYWwuZGVmYXVsdHM9e2FwcGVuZFRvOiJib2R5Iixmb2N1czohMCxvcGFjaXR5OjUwLG92ZXJsYXlJZDoic2ltcGxlbW9kYWwtb3ZlcmxheSIsb3ZlcmxheUNzczp7fSxjb250YWluZXJJZDoic2ltcGxlbW9kYWwtY29udGFpbmVyIixjb250YWluZXJDc3M6e30sZGF0YUlkOiJzaW1wbGVtb2RhbC1kYXRhIixkYXRhQ3NzOnt9LG1pbkhlaWdodDpudWxsLG1pbldpZHRoOm51bGwsbWF4SGVpZ2h0Om51bGwsbWF4V2lkdGg6bnVsbCxhdXRvUmVzaXplOiExLGF1dG9Qb3NpdGlvbjohMCx6SW5kZXg6MWUzLGNsb3NlOiEwLGNsb3NlSFRNTDonPGEgY2xhc3M9Im1vZGFsQ2xvc2VJbWciIHRpdGxlPSJDbG9zZSI+PC9hPicsY2xvc2VDbGFzczoic2ltcGxlbW9kYWwtY2xvc2UiLGVzY0Nsb3NlOiEwLG92ZXJsYXlDbG9zZTohMSxmaXhlZDohMCxwb3NpdGlvbjpudWxsLHBlcnNpc3Q6ITEsbW9kYWw6ITAsb25PcGVuOm51bGwsb25TaG93Om51bGwsb25DbG9zZTpudWxsfSx0Lm1vZGFsLmltcGw9e2Q6e30saW5pdDpmdW5jdGlvbihlLG4pe3ZhciBpPXRoaXM7aWYoaS5kLmRhdGEpcmV0dXJuITE7aWYoYS5pZVF1aXJrcz1hLm1zaWUmJiJ1bmRlZmluZWQiIT10eXBlb2YgdC5zdXBwb3J0LmJveE1vZGVsJiYhdC5zdXBwb3J0LmJveE1vZGVsLGkubz10LmV4dGVuZCh7fSx0Lm1vZGFsLmRlZmF1bHRzLG4pLGkuekluZGV4PWkuby56SW5kZXgsaS5vY2NiPSExLCJvYmplY3QiPT09KCJ1bmRlZmluZWQiPT10eXBlb2YgZT8idW5kZWZpbmVkIjpzKGUpKSllPWUgaW5zdGFuY2VvZiB0P2U6dChlKSxpLmQucGxhY2Vob2xkZXI9ITEsZS5wYXJlbnQoKS5wYXJlbnQoKS5zaXplKCk+MCYmKGUuYmVmb3JlKHQoIjxzcGFuPjwvc3Bhbj4iKS5hdHRyKCJpZCIsInNpbXBsZW1vZGFsLXBsYWNlaG9sZGVyIikuY3NzKHtkaXNwbGF5OiJub25lIn0pKSxpLmQucGxhY2Vob2xkZXI9ITAsaS5kaXNwbGF5PWUuY3NzKCJkaXNwbGF5IiksaS5vLnBlcnNpc3R8fChpLmQub3JpZz1lLmNsb25lKCEwKSkpO2Vsc2V7aWYoInN0cmluZyIhPXR5cGVvZiBlJiYibnVtYmVyIiE9dHlwZW9mIGUpcmV0dXJuIGFsZXJ0KCJTaW1wbGVNb2RhbCBFcnJvcjogVW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAiKygidW5kZWZpbmVkIj09dHlwZW9mIGU/InVuZGVmaW5lZCI6cyhlKSkpLGk7ZT10KCI8ZGl2PjwvZGl2PiIpLmh0bWwoZSl9cmV0dXJuIGkuY3JlYXRlKGUpLGU9bnVsbCxpLm9wZW4oKSx0LmlzRnVuY3Rpb24oaS5vLm9uU2hvdykmJmkuby5vblNob3cuYXBwbHkoaSxbaS5kXSksaX0sY3JlYXRlOmZ1bmN0aW9uKG4pe3ZhciBpPXRoaXM7aS5nZXREaW1lbnNpb25zKCksaS5vLm1vZGFsJiZhLmllNiYmKGkuZC5pZnJhbWU9dCgnPGlmcmFtZSBzcmM9ImphdmFzY3JpcHQ6ZmFsc2U7Ij48L2lmcmFtZT4nKS5jc3ModC5leHRlbmQoaS5vLmlmcmFtZUNzcyx7ZGlzcGxheToibm9uZSIsb3BhY2l0eTowLHBvc2l0aW9uOiJmaXhlZCIsaGVpZ2h0Om9bMF0sd2lkdGg6b1sxXSx6SW5kZXg6aS5vLnpJbmRleCx0b3A6MCxsZWZ0OjB9KSkuYXBwZW5kVG8oaS5vLmFwcGVuZFRvKSksaS5kLm92ZXJsYXk9dCgiPGRpdj48L2Rpdj4iKS5hdHRyKCJpZCIsaS5vLm92ZXJsYXlJZCkuYWRkQ2xhc3MoInNpbXBsZW1vZGFsLW92ZXJsYXkiKS5jc3ModC5leHRlbmQoaS5vLm92ZXJsYXlDc3Mse2Rpc3BsYXk6Im5vbmUiLG9wYWNpdHk6aS5vLm9wYWNpdHkvMTAwLGhlaWdodDppLm8ubW9kYWw/ZVswXTowLHdpZHRoOmkuby5tb2RhbD9lWzFdOjAscG9zaXRpb246ImZpeGVkIixsZWZ0OjAsdG9wOjAsekluZGV4Omkuby56SW5kZXgrMX0pKS5hcHBlbmRUbyhpLm8uYXBwZW5kVG8pLGkuZC5jb250YWluZXI9dCgiPGRpdj48L2Rpdj4iKS5hdHRyKCJpZCIsaS5vLmNvbnRhaW5lcklkKS5hdHRyKCJyb2xlIiwiZGlhbG9nIikuYWRkQ2xhc3MoInNpbXBsZW1vZGFsLWNvbnRhaW5lci1uZXciKS5jc3ModC5leHRlbmQoe3Bvc2l0aW9uOmkuby5maXhlZD8iZml4ZWQiOiJhYnNvbHV0ZSJ9LGkuby5jb250YWluZXJDc3Mse2Rpc3BsYXk6Im5vbmUiLHpJbmRleDppLm8uekluZGV4KzJ9KSkuYXBwZW5kKGkuby5jbG9zZSYmaS5vLmNsb3NlSFRNTD90KGkuby5jbG9zZUhUTUwpLmFkZENsYXNzKGkuby5jbG9zZUNsYXNzKToiIikuYXBwZW5kVG8oaS5vLmFwcGVuZFRvKSxpLmQud3JhcD10KCI8ZGl2PjwvZGl2PiIpLmF0dHIoInRhYkluZGV4IiwtMSkuYWRkQ2xhc3MoInNpbXBsZW1vZGFsLXdyYXAiKS5jc3Moe2hlaWdodDoiMTAwJSIsb3V0bGluZTowLHdpZHRoOiIxMDAlIn0pLmFwcGVuZFRvKGkuZC5jb250YWluZXIpLGkuZC5kYXRhPW4uYXR0cigiaWQiLG4uYXR0cigiaWQiKXx8aS5vLmRhdGFJZCkuYWRkQ2xhc3MoInNpbXBsZW1vZGFsLWRhdGEiKS5jc3ModC5leHRlbmQoaS5vLmRhdGFDc3Mse2Rpc3BsYXk6Im5vbmUifSkpLmFwcGVuZFRvKCJib2R5Iiksbj1udWxsLGkuc2V0Q29udGFpbmVyRGltZW5zaW9ucygpLGkuZC5kYXRhLmFwcGVuZFRvKGkuZC53cmFwKSwoYS5pZTZ8fGEuaWVRdWlya3MpJiZpLmZpeElFKCl9LGJpbmRFdmVudHM6ZnVuY3Rpb24oKXt2YXIgaT10aGlzO3QoIi4iK2kuby5jbG9zZUNsYXNzKS5iaW5kKCJjbGljay5zaW1wbGVtb2RhbCIsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLGkuY2xvc2UoKX0pLGkuby5tb2RhbCYmaS5vLmNsb3NlJiZpLm8ub3ZlcmxheUNsb3NlJiZpLmQub3ZlcmxheS5iaW5kKCJjbGljay5zaW1wbGVtb2RhbCIsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLGkuY2xvc2UoKX0pLG4uYmluZCgia2V5ZG93bi5zaW1wbGVtb2RhbCIsZnVuY3Rpb24odCl7aS5vLm1vZGFsJiY5PT09dC5rZXlDb2RlP2kud2F0Y2hUYWIodCk6aS5vLmNsb3NlJiZpLm8uZXNjQ2xvc2UmJjI3PT09dC5rZXlDb2RlJiYodC5wcmV2ZW50RGVmYXVsdCgpLGkuY2xvc2UoKSl9KSxyLmJpbmQoInJlc2l6ZS5zaW1wbGVtb2RhbCBvcmllbnRhdGlvbmNoYW5nZS5zaW1wbGVtb2RhbCIsZnVuY3Rpb24oKXtpLmdldERpbWVuc2lvbnMoKSxpLm8uYXV0b1Jlc2l6ZT9pLnNldENvbnRhaW5lckRpbWVuc2lvbnMoKTppLm8uYXV0b1Bvc2l0aW9uJiZpLnNldFBvc2l0aW9uKCksYS5pZTZ8fGEuaWVRdWlya3M/aS5maXhJRSgpOmkuby5tb2RhbCYmKGkuZC5pZnJhbWUmJmkuZC5pZnJhbWUuY3NzKHtoZWlnaHQ6b1swXSx3aWR0aDpvWzFdfSksaS5kLm92ZXJsYXkuY3NzKHtoZWlnaHQ6ZVswXSx3aWR0aDplWzFdfSkpfSl9LHVuYmluZEV2ZW50czpmdW5jdGlvbigpe3QoIi4iK3RoaXMuby5jbG9zZUNsYXNzKS51bmJpbmQoImNsaWNrLnNpbXBsZW1vZGFsIiksbi51bmJpbmQoImtleWRvd24uc2ltcGxlbW9kYWwiKSxyLnVuYmluZCgiLnNpbXBsZW1vZGFsIiksdGhpcy5kLm92ZXJsYXkudW5iaW5kKCJjbGljay5zaW1wbGVtb2RhbCIpfSxmaXhJRTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsbj1lLm8ucG9zaXRpb247dC5lYWNoKFtlLmQuaWZyYW1lfHxudWxsLGUuby5tb2RhbD9lLmQub3ZlcmxheTpudWxsLCJmaXhlZCI9PT1lLmQuY29udGFpbmVyLmNzcygicG9zaXRpb24iKT9lLmQuY29udGFpbmVyOm51bGxdLGZ1bmN0aW9uKHQsZSl7aWYoZSl7dmFyIGk9ImRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IixyPSJkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIixvPSJkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCIscz0iZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0IixhPSJkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCIsbD0iZG9jdW1lbnQuYm9keS5zY3JvbGxXaWR0aCIsYz0iZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCIsdT0iZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIixkPSJkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCIsaD0iZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCIscD1lWzBdLnN0eWxlO2lmKHAucG9zaXRpb249ImFic29sdXRlIix0PDIpcC5yZW1vdmVFeHByZXNzaW9uKCJoZWlnaHQiKSxwLnJlbW92ZUV4cHJlc3Npb24oIndpZHRoIikscC5zZXRFeHByZXNzaW9uKCJoZWlnaHQiLCIiK28rIiA+ICIraSsiID8gIitvKyIgOiAiK2krJyArICJweCInKSxwLnNldEV4cHJlc3Npb24oIndpZHRoIiwiIitsKyIgPiAiK3IrIiA/ICIrbCsiIDogIityKycgKyAicHgiJyk7ZWxzZXt2YXIgZixtO2lmKG4mJm4uY29uc3RydWN0b3I9PT1BcnJheSl7dmFyIF89blswXT8ibnVtYmVyIj09dHlwZW9mIG5bMF0/blswXS50b1N0cmluZygpOm5bMF0ucmVwbGFjZSgvcHgvLCIiKTplLmNzcygidG9wIikucmVwbGFjZSgvcHgvLCIiKTtpZihmPV8uaW5kZXhPZigiJSIpPT09LTE/XysiICsgKHQgPSAiK2grIiA/ICIraCsiIDogIithKycpICsgInB4Iic6cGFyc2VJbnQoXy5yZXBsYWNlKC8lLywiIikpKyIgKiAoKCIrYysiIHx8ICIraSsiKSAvIDEwMCkgKyAodCA9ICIraCsiID8gIitoKyIgOiAiK2ErJykgKyAicHgiJyxuWzFdKXt2YXIgZz0ibnVtYmVyIj09dHlwZW9mIG5bMV0/blsxXS50b1N0cmluZygpOm5bMV0ucmVwbGFjZSgvcHgvLCIiKTttPWcuaW5kZXhPZigiJSIpPT09LTE/ZysiICsgKHQgPSAiK2QrIiA/ICIrZCsiIDogIitzKycpICsgInB4Iic6cGFyc2VJbnQoZy5yZXBsYWNlKC8lLywiIikpKyIgKiAoKCIrdSsiIHx8ICIrcisiKSAvIDEwMCkgKyAodCA9ICIrZCsiID8gIitkKyIgOiAiK3MrJykgKyAicHgiJ319ZWxzZSBmPSIoIitjKyIgfHwgIitpKyIpIC8gMiAtICh0aGlzLm9mZnNldEhlaWdodCAvIDIpICsgKHQgPSAiK2grIiA/ICIraCsiIDogIithKycpICsgInB4IicsbT0iKCIrdSsiIHx8ICIrcisiKSAvIDIgLSAodGhpcy5vZmZzZXRXaWR0aCAvIDIpICsgKHQgPSAiK2QrIiA/ICIrZCsiIDogIitzKycpICsgInB4Iic7cC5yZW1vdmVFeHByZXNzaW9uKCJ0b3AiKSxwLnJlbW92ZUV4cHJlc3Npb24oImxlZnQiKSxwLnNldEV4cHJlc3Npb24oInRvcCIsZikscC5zZXRFeHByZXNzaW9uKCJsZWZ0IixtKX19fSl9LGZvY3VzOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMsaT1lJiZ0LmluQXJyYXkoZSxbImZpcnN0IiwibGFzdCJdKSE9PS0xP2U6ImZpcnN0IixyPXQoIjppbnB1dDplbmFibGVkOnZpc2libGU6IitpLG4uZC53cmFwKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ci5sZW5ndGg+MD9yLmZvY3VzJiZyLmZvY3VzKCk6biYmbi5kJiZuLmQud3JhcCYmbi5kLndyYXAuZm9jdXMmJm4uZC53cmFwLmZvY3VzKCl9LDEwKX0sZ2V0RGltZW5zaW9uczpmdW5jdGlvbigpe3ZhciB0PSJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93LmlubmVySGVpZ2h0P3IuaGVpZ2h0KCk6d2luZG93LmlubmVySGVpZ2h0O2U9W24uaGVpZ2h0KCksbi53aWR0aCgpXSxvPVt0LHIud2lkdGgoKV19LGdldFZhbDpmdW5jdGlvbih0LGUpe3JldHVybiB0PyJudW1iZXIiPT10eXBlb2YgdD90OiJhdXRvIj09PXQ/MDp0LmluZGV4T2YoIiUiKT4wP3BhcnNlSW50KHQucmVwbGFjZSgvJS8sIiIpKS8xMDAqKCJoIj09PWU/b1swXTpvWzFdKTpwYXJzZUludCh0LnJlcGxhY2UoL3B4LywiIikpOm51bGx9LHVwZGF0ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuISFuLmQuZGF0YSYmKG4uZC5vcmlnSGVpZ2h0PW4uZ2V0VmFsKHQsImgiKSxuLmQub3JpZ1dpZHRoPW4uZ2V0VmFsKGUsInciKSxuLmQuZGF0YS5oaWRlKCksdCYmbi5kLmNvbnRhaW5lci5jc3MoImhlaWdodCIsdCksZSYmbi5kLmNvbnRhaW5lci5jc3MoIndpZHRoIixlKSxuLnNldENvbnRhaW5lckRpbWVuc2lvbnMoKSxuLmQuZGF0YS5zaG93KCksbi5vLmZvY3VzJiZuLmZvY3VzKCksbi51bmJpbmRFdmVudHMoKSx2b2lkIG4uYmluZEV2ZW50cygpKX0sc2V0Q29udGFpbmVyRGltZW5zaW9uczpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1hLmllNnx8YS5pZTcsbj10LmQub3JpZ0hlaWdodD90LmQub3JpZ0hlaWdodDphLm9wZXJhP3QuZC5jb250YWluZXIuaGVpZ2h0KCk6dC5nZXRWYWwoZT90LmQuY29udGFpbmVyWzBdLmN1cnJlbnRTdHlsZS5oZWlnaHQ6dC5kLmNvbnRhaW5lci5jc3MoImhlaWdodCIpLCJoIiksaT10LmQub3JpZ1dpZHRoP3QuZC5vcmlnV2lkdGg6YS5vcGVyYT90LmQuY29udGFpbmVyLndpZHRoKCk6dC5nZXRWYWwoZT90LmQuY29udGFpbmVyWzBdLmN1cnJlbnRTdHlsZS53aWR0aDp0LmQuY29udGFpbmVyLmNzcygid2lkdGgiKSwidyIpLHI9dC5kLmRhdGEub3V0ZXJIZWlnaHQoITApLHM9dC5kLmRhdGEub3V0ZXJXaWR0aCghMCk7dC5kLm9yaWdIZWlnaHQ9dC5kLm9yaWdIZWlnaHR8fG4sdC5kLm9yaWdXaWR0aD10LmQub3JpZ1dpZHRofHxpO3ZhciBsPXQuby5tYXhIZWlnaHQ/dC5nZXRWYWwodC5vLm1heEhlaWdodCwiaCIpOm51bGwsYz10Lm8ubWF4V2lkdGg/dC5nZXRWYWwodC5vLm1heFdpZHRoLCJ3Iik6bnVsbCx1PWwmJmw8b1swXT9sOm9bMF0sZD1jJiZjPG9bMV0/YzpvWzFdLGg9dC5vLm1pbkhlaWdodD90LmdldFZhbCh0Lm8ubWluSGVpZ2h0LCJoIik6ImF1dG8iO249bj90Lm8uYXV0b1Jlc2l6ZSYmbj51P3U6bjxoP2g6bjpyP3I+dT91OnQuby5taW5IZWlnaHQmJiJhdXRvIiE9PWgmJnI8aD9oOnI6aDt2YXIgcD10Lm8ubWluV2lkdGg/dC5nZXRWYWwodC5vLm1pbldpZHRoLCJ3Iik6ImF1dG8iO2k9aT90Lm8uYXV0b1Jlc2l6ZSYmaT5kP2Q6aTxwP3A6aTpzP3M+ZD9kOnQuby5taW5XaWR0aCYmImF1dG8iIT09cCYmczxwP3A6czpwLHQuZC5jb250YWluZXIuY3NzKHtoZWlnaHQ6bix3aWR0aDppfSksdC5kLndyYXAuY3NzKHtvdmVyZmxvdzpyPm58fHM+aT8iYXV0byI6InZpc2libGUifSksdC5vLmF1dG9Qb3NpdGlvbiYmdC5zZXRQb3NpdGlvbigpfSxzZXRQb3NpdGlvbjpmdW5jdGlvbigpe3ZhciB0LGUsbj10aGlzLGk9b1swXS8yLW4uZC5jb250YWluZXIub3V0ZXJIZWlnaHQoITApLzIscz1vWzFdLzItbi5kLmNvbnRhaW5lci5vdXRlcldpZHRoKCEwKS8yLGE9ImZpeGVkIiE9PW4uZC5jb250YWluZXIuY3NzKCJwb3NpdGlvbiIpP3Iuc2Nyb2xsVG9wKCk6MDtuLm8ucG9zaXRpb24mJiJbb2JqZWN0IEFycmF5XSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobi5vLnBvc2l0aW9uKT8odD1hKyhuLm8ucG9zaXRpb25bMF18fGkpLGU9bi5vLnBvc2l0aW9uWzFdfHxzKToodD1hK2ksZT1zKSxuLmQuY29udGFpbmVyLmNzcyh7bGVmdDplLHRvcDp0fSl9LHdhdGNoVGFiOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7aWYodChlLnRhcmdldCkucGFyZW50cygiLnNpbXBsZW1vZGFsLWNvbnRhaW5lci1uZXciKS5sZW5ndGg+MCl7aWYobi5pbnB1dHM9dCgiOmlucHV0OmVuYWJsZWQ6dmlzaWJsZTpmaXJzdCwgOmlucHV0OmVuYWJsZWQ6dmlzaWJsZTpsYXN0IixuLmQuZGF0YVswXSksIWUuc2hpZnRLZXkmJmUudGFyZ2V0PT09bi5pbnB1dHNbbi5pbnB1dHMubGVuZ3RoLTFdfHxlLnNoaWZ0S2V5JiZlLnRhcmdldD09PW4uaW5wdXRzWzBdfHwwPT09bi5pbnB1dHMubGVuZ3RoKXtlLnByZXZlbnREZWZhdWx0KCk7dmFyIGk9ZS5zaGlmdEtleT8ibGFzdCI6ImZpcnN0IjtuLmZvY3VzKGkpfX1lbHNlIGUucHJldmVudERlZmF1bHQoKSxuLmZvY3VzKCl9LG9wZW46ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuZC5pZnJhbWUmJmUuZC5pZnJhbWUuc2hvdygpLHQuaXNGdW5jdGlvbihlLm8ub25PcGVuKT9lLm8ub25PcGVuLmFwcGx5KGUsW2UuZF0pOihlLmQub3ZlcmxheS5zaG93KCksZS5kLmNvbnRhaW5lci5zaG93KCksZS5kLmRhdGEuc2hvdygpKSxlLm8uZm9jdXMmJmUuZm9jdXMoKSxlLmJpbmRFdmVudHMoKX0sY2xvc2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCFlLmQuZGF0YSlyZXR1cm4hMTtpZihlLnVuYmluZEV2ZW50cygpLHQuaXNGdW5jdGlvbihlLm8ub25DbG9zZSkmJiFlLm9jY2IpZS5vY2NiPSEwLGUuby5vbkNsb3NlLmFwcGx5KGUsW2UuZF0pO2Vsc2V7aWYoZS5kLnBsYWNlaG9sZGVyKXt2YXIgbj10KCIjc2ltcGxlbW9kYWwtcGxhY2Vob2xkZXIiKTtlLm8ucGVyc2lzdD9uLnJlcGxhY2VXaXRoKGUuZC5kYXRhLnJlbW92ZUNsYXNzKCJzaW1wbGVtb2RhbC1kYXRhIikuY3NzKCJkaXNwbGF5IixlLmRpc3BsYXkpKTooZS5kLmRhdGEuaGlkZSgpLnJlbW92ZSgpLG4ucmVwbGFjZVdpdGgoZS5kLm9yaWcpKX1lbHNlIGUuZC5kYXRhLmhpZGUoKS5yZW1vdmUoKTtlLmQuY29udGFpbmVyLmhpZGUoKS5yZW1vdmUoKSxlLmQub3ZlcmxheS5oaWRlKCksZS5kLmlmcmFtZSYmZS5kLmlmcmFtZS5oaWRlKCkucmVtb3ZlKCksZS5kLm92ZXJsYXkucmVtb3ZlKCksZS5kPXt9fX19fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzI4KSxuKDQ3MCksbig1MTEpLG4oNTY2KV0scj1mdW5jdGlvbih0LGUsbil7dmFyIGk9e2xpbmVzOjksbGVuZ3RoOjAsd2lkdGg6OCxyYWRpdXM6MTIsY29ybmVyczoxLHJvdGF0ZToyMyxkaXJlY3Rpb246MSxjb2xvcjoiIzY2NiIsc3BlZWQ6LjgsdHJhaWw6NTAsc2hhZG93OiExLGh3YWNjZWw6ITEsY2xhc3NOYW1lOiIiLHpJbmRleDoyZTksdG9wOiJhdXRvIixsZWZ0OiJhdXRvIn07cmV0dXJuIGUuZXh0ZW5kKHtjb25zdHJ1Y3RvcjpmdW5jdGlvbigpe3RoaXMuc3Bpbk9wdGlvbnN8fCh0aGlzLnNwaW5PcHRpb25zPXt9KSx0LmRlZmF1bHRzKHRoaXMuc3Bpbk9wdGlvbnMsaSksZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHJlbmRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNwaW5BdFJlbmRlcnx8dGhpcy4kZWwuaGlkZSgpLGUucHJvdG90eXBlLnJlbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5zcGluQXRSZW5kZXImJnRoaXMuc3BpbigpLHRoaXN9LHNwaW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZWwuc3Bpbih0aGlzLnNwaW5PcHRpb25zKS5zaG93KCksdGhpc30sZW1wdHk6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRlbDt0LmZhZGVPdXQobi5MT0FESU5HX0ZBREUsZnVuY3Rpb24oKXt0LnNwaW4oITEpfSl9fSl9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7aT1bbigzMzIpLG4oNTY3KV0scj1mdW5jdGlvbih0LGUpe3QuZm4uc3Bpbj1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dHJ5e3ZhciBpPXQodGhpcykscj1pLmRhdGEoKTtyLnNwaW5uZXImJihyLnNwaW5uZXIuc3RvcCgpLGRlbGV0ZSByLnNwaW5uZXIpLG4hPT0hMSYmKHIuc3Bpbm5lcj1uZXcgZSh0LmV4dGVuZCh7Y29sb3I6aS5jc3MoImNvbG9yIil9LG4pKS5zcGluKHRoaXMpKX1jYXRjaChvKXt3aW5kb3cuY29uc29sZSYmd2luZG93LmNvbnNvbGUuZXJyb3Iobyl9fSksdGhpc319LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7KGZ1bmN0aW9uKHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgbz0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgdH07IWZ1bmN0aW9uKHMsYSl7Im9iamVjdCI9PW8odCkmJnQuZXhwb3J0cz90LmV4cG9ydHM9YSgpOihpPWEscj0iZnVuY3Rpb24iPT10eXBlb2YgaT9pLmNhbGwoZSxuLGUsdCk6aSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpKX0odm9pZCAwLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3ZhciBuLGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0fHwiZGl2Iik7Zm9yKG4gaW4gZSlpW25dPWVbbl07cmV0dXJuIGl9ZnVuY3Rpb24gZSh0KXtmb3IodmFyIGU9MSxuPWFyZ3VtZW50cy5sZW5ndGg7ZTxuO2UrKyl0LmFwcGVuZENoaWxkKGFyZ3VtZW50c1tlXSk7cmV0dXJuIHR9ZnVuY3Rpb24gbih0LGUsbixpKXt2YXIgcj1bIm9wYWNpdHkiLGUsfn4oMTAwKnQpLG4saV0uam9pbigiLSIpLG89LjAxK24vaSoxMDAscz1NYXRoLm1heCgxLSgxLXQpL2UqKDEwMC1vKSx0KSxhPWMuc3Vic3RyaW5nKDAsYy5pbmRleE9mKCJBbmltYXRpb24iKSkudG9Mb3dlckNhc2UoKSxsPWEmJiItIithKyItInx8IiI7cmV0dXJuIGhbcl18fCh1Lmluc2VydFJ1bGUoIkAiK2wrImtleWZyYW1lcyAiK3IrInswJXtvcGFjaXR5OiIrcysifSIrbysiJXtvcGFjaXR5OiIrdCsifSIrKG8rLjAxKSsiJXtvcGFjaXR5OjF9IisobytlKSUxMDArIiV7b3BhY2l0eToiK3QrIn0xMDAle29wYWNpdHk6IitzKyJ9fSIsdS5jc3NSdWxlcy5sZW5ndGgpLAoJaFtyXT0xKSxyfWZ1bmN0aW9uIGkodCxlKXt2YXIgbixpLHI9dC5zdHlsZTtpZihlPWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSx2b2lkIDAhPT1yW2VdKXJldHVybiBlO2ZvcihpPTA7aTxkLmxlbmd0aDtpKyspaWYobj1kW2ldK2Usdm9pZCAwIT09cltuXSlyZXR1cm4gbn1mdW5jdGlvbiByKHQsZSl7Zm9yKHZhciBuIGluIGUpdC5zdHlsZVtpKHQsbil8fG5dPWVbbl07cmV0dXJuIHR9ZnVuY3Rpb24gbyh0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZQ==", "base64"));
  res.write(new Buffer("Kyspe3ZhciBuPWFyZ3VtZW50c1tlXTtmb3IodmFyIGkgaW4gbil2b2lkIDA9PT10W2ldJiYodFtpXT1uW2ldKX1yZXR1cm4gdH1mdW5jdGlvbiBzKHQsZSl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiB0P3Q6dFtlJXQubGVuZ3RoXX1mdW5jdGlvbiBhKHQpe3RoaXMub3B0cz1vKHR8fHt9LGEuZGVmYXVsdHMscCl9ZnVuY3Rpb24gbCgpe2Z1bmN0aW9uIG4oZSxuKXtyZXR1cm4gdCgiPCIrZSsnIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQuY29tOnZtbCIgY2xhc3M9InNwaW4tdm1sIj4nLG4pfXUuYWRkUnVsZSgiLnNwaW4tdm1sIiwiYmVoYXZpb3I6dXJsKCNkZWZhdWx0I1ZNTCkiKSxhLnByb3RvdHlwZS5saW5lcz1mdW5jdGlvbih0LGkpe2Z1bmN0aW9uIG8oKXtyZXR1cm4gcihuKCJncm91cCIse2Nvb3Jkc2l6ZTp1KyIgIit1LGNvb3Jkb3JpZ2luOi1jKyIgIistY30pLHt3aWR0aDp1LGhlaWdodDp1fSl9ZnVuY3Rpb24gYSh0LGEsbCl7ZShoLGUocihvKCkse3JvdGF0aW9uOjM2MC9pLmxpbmVzKnQrImRlZyIsbGVmdDp+fmF9KSxlKHIobigicm91bmRyZWN0Iix7YXJjc2l6ZTppLmNvcm5lcnN9KSx7d2lkdGg6YyxoZWlnaHQ6aS5zY2FsZSppLndpZHRoLGxlZnQ6aS5zY2FsZSppLnJhZGl1cyx0b3A6LWkuc2NhbGUqaS53aWR0aD4+MSxmaWx0ZXI6bH0pLG4oImZpbGwiLHtjb2xvcjpzKGkuY29sb3IsdCksb3BhY2l0eTppLm9wYWNpdHl9KSxuKCJzdHJva2UiLHtvcGFjaXR5OjB9KSkpKX12YXIgbCxjPWkuc2NhbGUqKGkubGVuZ3RoK2kud2lkdGgpLHU9MippLnNjYWxlKmMsZD0tKGkud2lkdGgraS5sZW5ndGgpKmkuc2NhbGUqMisicHgiLGg9cihvKCkse3Bvc2l0aW9uOiJhYnNvbHV0ZSIsdG9wOmQsbGVmdDpkfSk7aWYoaS5zaGFkb3cpZm9yKGw9MTtsPD1pLmxpbmVzO2wrKylhKGwsLTIsInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CbHVyKHBpeGVscmFkaXVzPTIsbWFrZXNoYWRvdz0xLHNoYWRvd29wYWNpdHk9LjMpIik7Zm9yKGw9MTtsPD1pLmxpbmVzO2wrKylhKGwpO3JldHVybiBlKHQsaCl9LGEucHJvdG90eXBlLm9wYWNpdHk9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC5maXJzdENoaWxkO2k9aS5zaGFkb3cmJmkubGluZXN8fDAsciYmZStpPHIuY2hpbGROb2Rlcy5sZW5ndGgmJihyPXIuY2hpbGROb2Rlc1tlK2ldLHI9ciYmci5maXJzdENoaWxkLHI9ciYmci5maXJzdENoaWxkLHImJihyLm9wYWNpdHk9bikpfX12YXIgYyx1LGQ9WyJ3ZWJraXQiLCJNb3oiLCJtcyIsIk8iXSxoPXt9LHA9e2xpbmVzOjEyLGxlbmd0aDo3LHdpZHRoOjUscmFkaXVzOjEwLHNjYWxlOjEsY29ybmVyczoxLGNvbG9yOiIjMDAwIixvcGFjaXR5Oi4yNSxyb3RhdGU6MCxkaXJlY3Rpb246MSxzcGVlZDoxLHRyYWlsOjEwMCxmcHM6MjAsekluZGV4OjJlOSxjbGFzc05hbWU6InNwaW5uZXIiLHRvcDoiNTAlIixsZWZ0OiI1MCUiLHNoYWRvdzohMSxod2FjY2VsOiExLHBvc2l0aW9uOiJhYnNvbHV0ZSJ9O2lmKGEuZGVmYXVsdHM9e30sbyhhLnByb3RvdHlwZSx7c3BpbjpmdW5jdGlvbihlKXt0aGlzLnN0b3AoKTt2YXIgbj10aGlzLGk9bi5vcHRzLG89bi5lbD10KG51bGwse2NsYXNzTmFtZTppLmNsYXNzTmFtZX0pO2lmKHIobyx7cG9zaXRpb246aS5wb3NpdGlvbix3aWR0aDowLHpJbmRleDppLnpJbmRleCxsZWZ0OmkubGVmdCx0b3A6aS50b3B9KSxlJiZlLmluc2VydEJlZm9yZShvLGUuZmlyc3RDaGlsZHx8bnVsbCksby5zZXRBdHRyaWJ1dGUoInJvbGUiLCJwcm9ncmVzc2JhciIpLG4ubGluZXMobyxuLm9wdHMpLCFjKXt2YXIgcyxhPTAsbD0oaS5saW5lcy0xKSooMS1pLmRpcmVjdGlvbikvMix1PWkuZnBzLGQ9dS9pLnNwZWVkLGg9KDEtaS5vcGFjaXR5KS8oZCppLnRyYWlsLzEwMCkscD1kL2kubGluZXM7IWZ1bmN0aW9uIGYoKXthKys7Zm9yKHZhciB0PTA7dDxpLmxpbmVzO3QrKylzPU1hdGgubWF4KDEtKGErKGkubGluZXMtdCkqcCklZCpoLGkub3BhY2l0eSksbi5vcGFjaXR5KG8sdCppLmRpcmVjdGlvbitsLHMsaSk7bi50aW1lb3V0PW4uZWwmJnNldFRpbWVvdXQoZix+figxZTMvdSkpfSgpfXJldHVybiBufSxzdG9wOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lbDtyZXR1cm4gdCYmKGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpLHQucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLHRoaXMuZWw9dm9pZCAwKSx0aGlzfSxsaW5lczpmdW5jdGlvbihpLG8pe2Z1bmN0aW9uIGEoZSxuKXtyZXR1cm4gcih0KCkse3Bvc2l0aW9uOiJhYnNvbHV0ZSIsd2lkdGg6by5zY2FsZSooby5sZW5ndGgrby53aWR0aCkrInB4IixoZWlnaHQ6by5zY2FsZSpvLndpZHRoKyJweCIsYmFja2dyb3VuZDplLGJveFNoYWRvdzpuLHRyYW5zZm9ybU9yaWdpbjoibGVmdCIsdHJhbnNmb3JtOiJyb3RhdGUoIit+figzNjAvby5saW5lcyp1K28ucm90YXRlKSsiZGVnKSB0cmFuc2xhdGUoIitvLnNjYWxlKm8ucmFkaXVzKyJweCwwKSIsYm9yZGVyUmFkaXVzOihvLmNvcm5lcnMqby5zY2FsZSpvLndpZHRoPj4xKSsicHgifSl9Zm9yKHZhciBsLHU9MCxkPShvLmxpbmVzLTEpKigxLW8uZGlyZWN0aW9uKS8yO3U8by5saW5lczt1KyspbD1yKHQoKSx7cG9zaXRpb246ImFic29sdXRlIix0b3A6MSt+KG8uc2NhbGUqby53aWR0aC8yKSsicHgiLHRyYW5zZm9ybTpvLmh3YWNjZWw/InRyYW5zbGF0ZTNkKDAsMCwwKSI6IiIsb3BhY2l0eTpvLm9wYWNpdHksYW5pbWF0aW9uOmMmJm4oby5vcGFjaXR5LG8udHJhaWwsZCt1Km8uZGlyZWN0aW9uLG8ubGluZXMpKyIgIisxL28uc3BlZWQrInMgbGluZWFyIGluZmluaXRlIn0pLG8uc2hhZG93JiZlKGwscihhKCIjMDAwIiwiMCAwIDRweCAjMDAwIikse3RvcDoiMnB4In0pKSxlKGksZShsLGEocyhvLmNvbG9yLHUpLCIwIDAgMXB4IHJnYmEoMCwwLDAsLg==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("c3VsdHMpLHRoaXMuZHJvcGRvd24ub24oInNjcm9sbC1kZWJvdW5jZWQiLG8sdGhpcy5iaW5kKHRoaXMubG9hZE1vcmVJZk5lZWRlZCkpLHQodGhpcy5jb250YWluZXIpLm9uKCJjaGFuZ2UiLCIuc2VsZWN0Mi1pbnB1dCIsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKX0pLHQodGhpcy5kcm9wZG93bikub24oImNoYW5nZSIsIi5zZWxlY3QyLWlucHV0IixmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpfSksdC5mbi5tb3VzZXdoZWVsJiZpLm1vdXNld2hlZWwoZnVuY3Rpb24odCxlLG4scil7dmFyIG89aS5zY3JvbGxUb3AoKTtyPjAmJm8tcjw9MD8oaS5zY3JvbGxUb3AoMCksZyh0KSk6cjwwJiZpLmdldCgwKS5zY3JvbGxIZWlnaHQtaS5zY3JvbGxUb3AoKStyPD1pLmhlaWdodCgpJiYoaS5zY3JvbGxUb3AoaS5nZXQoMCkuc2Nyb2xsSGVpZ2h0LWkuaGVpZ2h0KCkpLGcodCkpfSksZChyKSxyLm9uKCJrZXl1cC1jaGFuZ2UgaW5wdXQgcGFzdGUiLHRoaXMuYmluZCh0aGlzLnVwZGF0ZVJlc3VsdHMpKSxyLm9uKCJmb2N1cyIsZnVuY3Rpb24oKXtyLmFkZENsYXNzKCJzZWxlY3QyLWZvY3VzZWQiKX0pLHIub24oImJsdXIiLGZ1bmN0aW9uKCl7ci5yZW1vdmVDbGFzcygic2VsZWN0Mi1mb2N1c2VkIil9KSx0aGlzLmRyb3Bkb3duLm9uKCJtb3VzZXVwIixvLHRoaXMuYmluZChmdW5jdGlvbihlKXt0KGUudGFyZ2V0KS5jbG9zZXN0KCIuc2VsZWN0Mi1yZXN1bHQtc2VsZWN0YWJsZSIpLmxlbmd0aD4wJiYodGhpcy5oaWdobGlnaHRVbmRlckV2ZW50KGUpLHRoaXMuc2VsZWN0SGlnaGxpZ2h0ZWQoZSkpfSkpLHRoaXMuZHJvcGRvd24ub24oImNsaWNrIG1vdXNldXAgbW91c2Vkb3duIHRvdWNoc3RhcnQgdG91Y2hlbmQgZm9jdXNpbiIsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKX0pLHRoaXMubmV4dFNlYXJjaFRlcm09bix0LmlzRnVuY3Rpb24odGhpcy5vcHRzLmluaXRTZWxlY3Rpb24pJiYodGhpcy5pbml0U2VsZWN0aW9uKCksdGhpcy5tb25pdG9yU291cmNlKCkpLG51bGwhPT1lLm1heGltdW1JbnB1dExlbmd0aCYmdGhpcy5zZWFyY2guYXR0cigibWF4bGVuZ3RoIixlLm1heGltdW1JbnB1dExlbmd0aCk7dmFyIHM9ZS5lbGVtZW50LnByb3AoImRpc2FibGVkIik7cz09PW4mJihzPSExKSx0aGlzLmVuYWJsZSghcyk7dmFyIGw9ZS5lbGVtZW50LnByb3AoInJlYWRvbmx5Iik7bD09PW4mJihsPSExKSx0aGlzLnJlYWRvbmx5KGwpLEg9SHx8YSgpLHRoaXMuYXV0b2ZvY3VzPWUuZWxlbWVudC5wcm9wKCJhdXRvZm9jdXMiKSxlLmVsZW1lbnQucHJvcCgiYXV0b2ZvY3VzIiwhMSksdGhpcy5hdXRvZm9jdXMmJnRoaXMuZm9jdXMoKSx0aGlzLnNlYXJjaC5hdHRyKCJwbGFjZWhvbGRlciIsZS5zZWFyY2hJbnB1dFBsYWNlaG9sZGVyKX0sZGVzdHJveTpmdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0cy5lbGVtZW50LGU9dC5kYXRhKCJzZWxlY3QyIiksaT10aGlzO3RoaXMuY2xvc2UoKSx0Lmxlbmd0aCYmdFswXS5kZXRhY2hFdmVudCYmaS5fc3luYyYmdC5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5kZXRhY2hFdmVudCgib25wcm9wZXJ0eWNoYW5nZSIsaS5fc3luYyl9KSx0aGlzLnByb3BlcnR5T2JzZXJ2ZXImJih0aGlzLnByb3BlcnR5T2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHRoaXMucHJvcGVydHlPYnNlcnZlcj1udWxsKSx0aGlzLl9zeW5jPW51bGwsZSE9PW4mJihlLmNvbnRhaW5lci5yZW1vdmUoKSxlLmxpdmVSZWdpb24ucmVtb3ZlKCksZS5kcm9wZG93bi5yZW1vdmUoKSx0LnJlbW92ZUNsYXNzKCJzZWxlY3QyLW9mZnNjcmVlbiIpLnJlbW92ZURhdGEoInNlbGVjdDIiKS5vZmYoIi5zZWxlY3QyIikucHJvcCgiYXV0b2ZvY3VzIix0aGlzLmF1dG9mb2N1c3x8ITEpLHRoaXMuZWxlbWVudFRhYkluZGV4P3QuYXR0cih7dGFiaW5kZXg6dGhpcy5lbGVtZW50VGFiSW5kZXh9KTp0LnJlbW92ZUF0dHIoInRhYmluZGV4IiksdC5zaG93KCkpLEQuY2FsbCh0aGlzLCJjb250YWluZXIiLCJsaXZlUmVnaW9uIiwiZHJvcGRvd24iLCJyZXN1bHRzIiwic2VhcmNoIil9LG9wdGlvblRvRGF0YTpmdW5jdGlvbih0KXtyZXR1cm4gdC5pcygib3B0aW9uIik/e2lkOnQucHJvcCgidmFsdWUiKSx0ZXh0OnQudGV4dCgpLGVsZW1lbnQ6dC5nZXQoKSxjc3M6dC5hdHRyKCJjbGFzcyIpLGRpc2FibGVkOnQucHJvcCgiZGlzYWJsZWQiKSxsb2NrZWQ6bCh0LmF0dHIoImxvY2tlZCIpLCJsb2NrZWQiKXx8bCh0LmRhdGEoImxvY2tlZCIpLCEwKX06dC5pcygib3B0Z3JvdXAiKT97dGV4dDp0LmF0dHIoImxhYmVsIiksY2hpbGRyZW46W10sZWxlbWVudDp0LmdldCgpLGNzczp0LmF0dHIoImNsYXNzIil9OnZvaWQgMH0scHJlcGFyZU9wdHM6ZnVuY3Rpb24oZSl7dmFyIGkscixvLHMsYT10aGlzO2lmKGk9ZS5lbGVtZW50LCJzZWxlY3QiPT09aS5nZXQoMCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpJiYodGhpcy5zZWxlY3Q9cj1lLmVsZW1lbnQpLHImJnQuZWFjaChbImlkIiwibXVsdGlwbGUiLCJhamF4IiwicXVlcnkiLCJjcmVhdGVTZWFyY2hDaG9pY2UiLCJpbml0U2VsZWN0aW9uIiwiZGF0YSIsInRhZ3MiXSxmdW5jdGlvbigpe2lmKHRoaXMgaW4gZSl0aHJvdyBuZXcgRXJyb3IoIk9wdGlvbiAnIit0aGlzKyInIGlzIG5vdCBhbGxvd2VkIGZvciBTZWxlY3QyIHdoZW4gYXR0YWNoZWQgdG8gYSA8c2VsZWN0PiBlbGVtZW50LiIpfSksZT10LmV4dGVuZCh7fSx7cG9wdWxhdGVSZXN1bHRzOmZ1bmN0aW9uKGkscixvKXt2YXIgcyxsPXRoaXMub3B0cy5pZCxjPXRoaXMubGl2ZVJlZ2lvbjsocz1mdW5jdGlvbihpLHIsdSl7dmFyIGQsaCxwLGYsbSxfLGcsdix5LGI7aT1lLnNvcnRSZXN1bHRzKGkscixvKTt2YXIgdz1bXTtmb3IoZD0wLGg9aS5sZW5ndGg7ZDxoO2QrPTEpcD1pW2RdLG09cC5kaXNhYmxlZD09PSEwLGY9IW0mJg==", "base64"));
  res.write(new Buffer("bChwKSE9PW4sXz1wLmNoaWxkcmVuJiZwLmNoaWxkcmVuLmxlbmd0aD4wLGc9dCgiPGxpPjwvbGk+IiksZy5hZGRDbGFzcygic2VsZWN0Mi1yZXN1bHRzLWRlcHQtIit1KSxnLmFkZENsYXNzKCJzZWxlY3QyLXJlc3VsdCIpLGcuYWRkQ2xhc3MoZj8ic2VsZWN0Mi1yZXN1bHQtc2VsZWN0YWJsZSI6InNlbGVjdDItcmVzdWx0LXVuc2VsZWN0YWJsZSIpLG0mJmcuYWRkQ2xhc3MoInNlbGVjdDItZGlzYWJsZWQiKSxfJiZnLmFkZENsYXNzKCJzZWxlY3QyLXJlc3VsdC13aXRoLWNoaWxkcmVuIiksZy5hZGRDbGFzcyhhLm9wdHMuZm9ybWF0UmVzdWx0Q3NzQ2xhc3MocCkpLGcuYXR0cigicm9sZSIsInByZXNlbnRhdGlvbiIpLHY9dChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSksdi5hZGRDbGFzcygic2VsZWN0Mi1yZXN1bHQtbGFiZWwiKSx2LmF0dHIoImlkIiwic2VsZWN0Mi1yZXN1bHQtbGFiZWwtIitJKCkpLHYuYXR0cigicm9sZSIsIm9wdGlvbiIpLGI9ZS5mb3JtYXRSZXN1bHQocCx2LG8sYS5vcHRzLmVzY2FwZU1hcmt1cCksYiE9PW4mJih2Lmh0bWwoYiksZy5hcHBlbmQodikpLF8mJih5PXQoIjx1bD48L3VsPiIpLHkuYWRkQ2xhc3MoInNlbGVjdDItcmVzdWx0LXN1YiIpLHMocC5jaGlsZHJlbix5LHUrMSksZy5hcHBlbmQoeSkpLGcuZGF0YSgic2VsZWN0Mi1kYXRhIixwKSx3LnB1c2goZ1swXSk7ci5hcHBlbmQodyksYy50ZXh0KGUuZm9ybWF0TWF0Y2hlcyhpLmxlbmd0aCkpfSkocixpLDApfX0sdC5mbi5zZWxlY3QyLmRlZmF1bHRzLGUpLCJmdW5jdGlvbiIhPXR5cGVvZiBlLmlkJiYobz1lLmlkLGUuaWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRbb119KSx0LmlzQXJyYXkoZS5lbGVtZW50LmRhdGEoInNlbGVjdDJUYWdzIikpKXtpZigidGFncyJpbiBlKXRocm93InRhZ3Mgc3BlY2lmaWVkIGFzIGJvdGggYW4gYXR0cmlidXRlICdkYXRhLXNlbGVjdDItdGFncycgYW5kIGluIG9wdGlvbnMgb2YgU2VsZWN0MiAiK2UuZWxlbWVudC5hdHRyKCJpZCIpO2UudGFncz1lLmVsZW1lbnQuZGF0YSgic2VsZWN0MlRhZ3MiKX1pZihyPyhlLnF1ZXJ5PXRoaXMuYmluZChmdW5jdGlvbih0KXt2YXIgZSxyLG8scz17cmVzdWx0czpbXSxtb3JlOiExfSxsPXQudGVybTtvPWZ1bmN0aW9uKGUsbil7dmFyIGk7ZS5pcygib3B0aW9uIik/dC5tYXRjaGVyKGwsZS50ZXh0KCksZSkmJm4ucHVzaChhLm9wdGlvblRvRGF0YShlKSk6ZS5pcygib3B0Z3JvdXAiKSYmKGk9YS5vcHRpb25Ub0RhdGEoZSksZS5jaGlsZHJlbigpLmVhY2gyKGZ1bmN0aW9uKHQsZSl7byhlLGkuY2hpbGRyZW4pfSksaS5jaGlsZHJlbi5sZW5ndGg+MCYmbi5wdXNoKGkpKX0sZT1pLmNoaWxkcmVuKCksdGhpcy5nZXRQbGFjZWhvbGRlcigpIT09biYmZS5sZW5ndGg+MCYmKHI9dGhpcy5nZXRQbGFjZWhvbGRlck9wdGlvbigpLHImJihlPWUubm90KHIpKSksZS5lYWNoMihmdW5jdGlvbih0LGUpe28oZSxzLnJlc3VsdHMpfSksdC5jYWxsYmFjayhzKX0pLGUuaWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQuaWR9KToicXVlcnkiaW4gZXx8KCJhamF4ImluIGU/KHM9ZS5lbGVtZW50LmRhdGEoImFqYXgtdXJsIikscyYmcy5sZW5ndGg+MCYmKGUuYWpheC51cmw9cyksZS5xdWVyeT1TLmNhbGwoZS5lbGVtZW50LGUuYWpheCkpOiJkYXRhImluIGU/ZS5xdWVyeT1UKGUuZGF0YSk6InRhZ3MiaW4gZSYmKGUucXVlcnk9ayhlLnRhZ3MpLGUuY3JlYXRlU2VhcmNoQ2hvaWNlPT09biYmKGUuY3JlYXRlU2VhcmNoQ2hvaWNlPWZ1bmN0aW9uKGUpe3JldHVybntpZDp0LnRyaW0oZSksdGV4dDp0LnRyaW0oZSl9fSksZS5pbml0U2VsZWN0aW9uPT09biYmKGUuaW5pdFNlbGVjdGlvbj1mdW5jdGlvbihuLGkpe3ZhciByPVtdO3QoYyhuLnZhbCgpLGUuc2VwYXJhdG9yKSkuZWFjaChmdW5jdGlvbigpe3ZhciBuPXtpZDp0aGlzLHRleHQ6dGhpc30saT1lLnRhZ3M7dC5pc0Z1bmN0aW9uKGkpJiYoaT1pKCkpLHQoaSkuZWFjaChmdW5jdGlvbigpe2lmKGwodGhpcy5pZCxuLmlkKSlyZXR1cm4gbj10aGlzLCExfSksci5wdXNoKG4pfSksaShyKX0pKSksImZ1bmN0aW9uIiE9dHlwZW9mIGUucXVlcnkpdGhyb3cicXVlcnkgZnVuY3Rpb24gbm90IGRlZmluZWQgZm9yIFNlbGVjdDIgIitlLmVsZW1lbnQuYXR0cigiaWQiKTtpZigidG9wIj09PWUuY3JlYXRlU2VhcmNoQ2hvaWNlUG9zaXRpb24pZS5jcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbj1mdW5jdGlvbih0LGUpe3QudW5zaGlmdChlKX07ZWxzZSBpZigiYm90dG9tIj09PWUuY3JlYXRlU2VhcmNoQ2hvaWNlUG9zaXRpb24pZS5jcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbj1mdW5jdGlvbih0LGUpe3QucHVzaChlKX07ZWxzZSBpZigiZnVuY3Rpb24iIT10eXBlb2YgZS5jcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbil0aHJvdyJpbnZhbGlkIGNyZWF0ZVNlYXJjaENob2ljZVBvc2l0aW9uIG9wdGlvbiBtdXN0IGJlICd0b3AnLCAnYm90dG9tJyBvciBhIGN1c3RvbSBmdW5jdGlvbiI7cmV0dXJuIGV9LG1vbml0b3JTb3VyY2U6ZnVuY3Rpb24oKXt2YXIgZSxpPXRoaXMub3B0cy5lbGVtZW50LHI9dGhpcztpLm9uKCJjaGFuZ2Uuc2VsZWN0MiIsdGhpcy5iaW5kKGZ1bmN0aW9uKHQpe3RoaXMub3B0cy5lbGVtZW50LmRhdGEoInNlbGVjdDItY2hhbmdlLXRyaWdnZXJlZCIpIT09ITAmJnRoaXMuaW5pdFNlbGVjdGlvbigpfSkpLHRoaXMuX3N5bmM9dGhpcy5iaW5kKGZ1bmN0aW9uKCl7dmFyIHQ9aS5wcm9wKCJkaXNhYmxlZCIpO3Q9PT1uJiYodD0hMSksdGhpcy5lbmFibGUoIXQpO3ZhciBlPWkucHJvcCgicmVhZG9ubHkiKTtlPT09biYmKGU9ITEpLHRoaXMucmVhZG9ubHkoZSksYih0aGlzLmNvbnRhaW5lcix0aGlzLm9wdHMuZWxlbWVudCx0aGlzLm9wdHMuYWRhcHRDb250YWluZXJDc3NDbGFzcyksdGhpcy5jb250YWluZXIuYWRkQ2xhc3MoeCh0aGlzLm9wdHMuY29udGFpbmVyQ3NzQ2xhc3MsdGhpcy5vcHRzLmVsZW1lbnQpKSxiKHRoaXMuZHJvcGRvd24sdGhpcy5vcHRzLmVsZW1lbnQsdGhpcy5vcHRzLmFkYXB0RHJvcGRvd25Dc3NDbGFzcyksdGhpcy5kcm9wZG93bi5hZGRDbGFzcyh4KHRoaXMub3B0cy5kcm9wZG93bkNzc0NsYXNzLHRoaXMub3B0cy5lbGVtZW50KSl9KSxpLmxlbmd0aCYmaVswXS5hdHRhY2hFdmVudCYmaS5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5hdHRhY2hFdmVudCgib25wcm9wZXJ0eWNoYW5nZSIsci5fc3luYyl9KSxlPXdpbmRvdy5NdXRhdGlvbk9ic2VydmVyfHx3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlcnx8d2luZG93Lk1vek11dGF0aW9uT2JzZXJ2ZXIsZSE9PW4mJih0aGlzLnByb3BlcnR5T2JzZXJ2ZXImJihkZWxldGUgdGhpcy5wcm9wZXJ0eU9ic2VydmVyLHRoaXMucHJvcGVydHlPYnNlcnZlcj1udWxsKSx0aGlzLnByb3BlcnR5T2JzZXJ2ZXI9bmV3IGUoZnVuY3Rpb24oZSl7dC5lYWNoKGUsci5fc3luYyl9KSx0aGlzLnByb3BlcnR5T2JzZXJ2ZXIub2JzZXJ2ZShpLmdldCgwKSx7YXR0cmlidXRlczohMCxzdWJ0cmVlOiExfSkpfSx0cmlnZ2VyU2VsZWN0OmZ1bmN0aW9uKGUpe3ZhciBuPXQuRXZlbnQoInNlbGVjdDItc2VsZWN0aW5nIix7dmFsOnRoaXMuaWQoZSksb2JqZWN0OmUsY2hvaWNlOmV9KTtyZXR1cm4gdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcihuKSwhbi5pc0RlZmF1bHRQcmV2ZW50ZWQoKX0sdHJpZ2dlckNoYW5nZTpmdW5jdGlvbihlKXtlPWV8fHt9LGU9dC5leHRlbmQoe30sZSx7dHlwZToiY2hhbmdlIix2YWw6dGhpcy52YWwoKX0pLHRoaXMub3B0cy5lbGVtZW50LmRhdGEoInNlbGVjdDItY2hhbmdlLXRyaWdnZXJlZCIsITApLHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoZSksdGhpcy5vcHRzLmVsZW1lbnQuZGF0YSgic2VsZWN0Mi1jaGFuZ2UtdHJpZ2dlcmVkIiwhMSksdGhpcy5vcHRzLmVsZW1lbnQuY2xpY2soKSx0aGlzLm9wdHMuYmx1ck9uQ2hhbmdlJiZ0aGlzLm9wdHMuZWxlbWVudC5ibHVyKCl9LGlzSW50ZXJmYWNlRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVuYWJsZWRJbnRlcmZhY2U9PT0hMH0sZW5hYmxlSW50ZXJmYWNlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZW5hYmxlZCYmIXRoaXMuX3JlYWRvbmx5LGU9IXQ7cmV0dXJuIHQhPT10aGlzLmVuYWJsZWRJbnRlcmZhY2UmJih0aGlzLmNvbnRhaW5lci50b2dnbGVDbGFzcygic2VsZWN0Mi1jb250YWluZXItZGlzYWJsZWQiLGUpLHRoaXMuY2xvc2UoKSx0aGlzLmVuYWJsZWRJbnRlcmZhY2U9dCwhMCl9LGVuYWJsZTpmdW5jdGlvbih0KXt0PT09biYmKHQ9ITApLHRoaXMuX2VuYWJsZWQhPT10JiYodGhpcy5fZW5hYmxlZD10LHRoaXMub3B0cy5lbGVtZW50LnByb3AoImRpc2FibGVkIiwhdCksdGhpcy5lbmFibGVJbnRlcmZhY2UoKSl9LGRpc2FibGU6ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZSghMSl9LHJlYWRvbmx5OmZ1bmN0aW9uKHQpe3Q9PT1uJiYodD0hMSksdGhpcy5fcmVhZG9ubHkhPT10JiYodGhpcy5fcmVhZG9ubHk9dCx0aGlzLm9wdHMuZWxlbWVudC5wcm9wKCJyZWFkb25seSIsdCksdGhpcy5lbmFibGVJbnRlcmZhY2UoKSl9LG9wZW5lZDpmdW5jdGlvbigpe3JldHVybiEhdGhpcy5jb250YWluZXImJnRoaXMuY29udGFpbmVyLmhhc0NsYXNzKCJzZWxlY3QyLWRyb3Bkb3duLW9wZW4iKX0scG9zaXRpb25Ecm9wZG93bjpmdW5jdGlvbigpe3ZhciBlLG4saSxyLG8scz10aGlzLmRyb3Bkb3duLGE9dGhpcy5jb250YWluZXIsbD1hLm9mZnNldCgpLGM9YS5vdXRlckhlaWdodCghMSksdT1hLm91dGVyV2lkdGgoITEpLGQ9cy5vdXRlckhlaWdodCghMSksaD10KHdpbmRvdykscD1oLndpZHRoKCksZj1oLmhlaWdodCgpLG09aC5zY3JvbGxMZWZ0KCkrcCxfPWguc2Nyb2xsVG9wKCkrZixnPWwudG9wK2Msdj1sLmxlZnQseT1nK2Q8PV8sYj1sLnRvcC1kPj1oLnNjcm9sbFRvcCgpLHc9cy5vdXRlcldpZHRoKCExKSxNPWZ1bmN0aW9uKCl7cmV0dXJuIHYrdzw9bX0sUz1mdW5jdGlvbigpe3JldHVybiBsLmxlZnQrbSthLm91dGVyV2lkdGgoITEpPnd9LFQ9cy5oYXNDbGFzcygic2VsZWN0Mi1kcm9wLWFib3ZlIik7VD8obj0hMCwhYiYmeSYmKGk9ITAsbj0hMSkpOihuPSExLCF5JiZiJiYoaT0hMCxuPSEwKSksaSYmKHMuaGlkZSgpLGw9dGhpcy5jb250YWluZXIub2Zmc2V0KCksYz10aGlzLmNvbnRhaW5lci5vdXRlckhlaWdodCghMSksdT10aGlzLmNvbnRhaW5lci5vdXRlcldpZHRoKCExKSxkPXMub3V0ZXJIZWlnaHQoITEpLG09aC5zY3JvbGxMZWZ0KCkrcCxfPWguc2Nyb2xsVG9wKCkrZixnPWwudG9wK2Msdj1sLmxlZnQsdz1zLm91dGVyV2lkdGgoITEpLHMuc2hvdygpLHRoaXMuZm9jdXNTZWFyY2goKSksdGhpcy5vcHRzLmRyb3Bkb3duQXV0b1dpZHRoPyhvPXQoIi5zZWxlY3QyLXJlc3VsdHMiLHMpWzBdLHMuYWRkQ2xhc3MoInNlbGVjdDItZHJvcC1hdXRvLXdpZHRoIikscy5jc3MoIndpZHRoIiwiIiksdz1zLm91dGVyV2lkdGgoITEpKyhvLnNjcm9sbEhlaWdodD09PW8uY2xpZW50SGVpZ2h0PzA6SC53aWR0aCksdz51P3U9dzp3PXUsZD1zLm91dGVySGVpZ2h0KCExKSk6dGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoInNlbGVjdDItZHJvcC1hdXRvLXdpZHRoIiksInN0YXRpYyIhPT10aGlzLmJvZHkuY3NzKCJwb3NpdGlvbiIpJiYoZT10aGlzLmJvZHkub2Zmc2V0KCksZy09ZS50b3Asdi09ZS5sZWZ0KSwhTSgpJiZTKCkmJih2PWwubGVmdCt0aGlzLmNvbnRhaW5lci5vdXRlcldpZHRoKCExKS13KSxyPXtsZWZ0OnYsd2lkdGg6dX0sbj8oci50b3A9bC50b3AtZCxyLmJvdHRvbT0iYXV0byIsdGhpcy5jb250YWluZXIuYWRkQ2xhc3MoInNlbGVjdDItZHJvcC1hYm92ZSIpLHMuYWRkQ2xhc3MoInNlbGVjdDItZHJvcC1hYm92ZSIpKTooci50b3A9ZyxyLmJvdHRvbT0iYXV0byIsdGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoInNlbGVjdDItZHJvcC1hYm92ZSIpLHMucmVtb3ZlQ2xhc3MoInNlbGVjdDItZHJvcC1hYm92ZSIpKSxyPXQuZXh0ZW5kKHIseCh0aGlzLm9wdHMuZHJvcGRvd25Dc3MsdGhpcy5vcHRzLmVsZW1lbnQpKSxzLmNzcyhyKX0sc2hvdWxkT3BlbjpmdW5jdGlvbigpe3ZhciBlO3JldHVybiF0aGlzLm9wZW5lZCgpJiYodGhpcy5fZW5hYmxlZCE9PSExJiZ0aGlzLl9yZWFkb25seSE9PSEwJiYoZT10LkV2ZW50KCJzZWxlY3QyLW9wZW5pbmciKSx0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKGUpLCFlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSl9LGNsZWFyRHJvcGRvd25BbGlnbm1lbnRQcmVmZXJlbmNlOmZ1bmN0aW9uKCl7dGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoInNlbGVjdDItZHJvcC1hYm92ZSIpLHRoaXMuZHJvcGRvd24ucmVtb3ZlQ2xhc3MoInNlbGVjdDItZHJvcC1hYm92ZSIpfSxvcGVuOmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLnNob3VsZE9wZW4oKSYmKHRoaXMub3BlbmluZygpLGoub24oIm1vdXNlbW92ZS5zZWxlY3QyRXZlbnQiLGZ1bmN0aW9uKHQpe0YueD10LnBhZ2VYLEYueT10LnBhZ2VZfSksITApfSxvcGVuaW5nOmZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzLmNvbnRhaW5lckV2ZW50TmFtZSxyPSJzY3JvbGwuIituLG89InJlc2l6ZS4iK24scz0ib3JpZW50YXRpb25jaGFuZ2UuIituO3RoaXMuY29udGFpbmVyLmFkZENsYXNzKCJzZWxlY3QyLWRyb3Bkb3duLW9wZW4iKS5hZGRDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIiksdGhpcy5jbGVhckRyb3Bkb3duQWxpZ25tZW50UHJlZmVyZW5jZSgpLHRoaXMuZHJvcGRvd25bMF0hPT10aGlzLmJvZHkuY2hpbGRyZW4oKS5sYXN0KClbMF0mJnRoaXMuZHJvcGRvd24uZGV0YWNoKCkuYXBwZW5kVG8odGhpcy5ib2R5KSxlPXQoIiNzZWxlY3QyLWRyb3AtbWFzayIpLDA9PWUubGVuZ3RoJiYoZT10KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKSxlLmF0dHIoImlkIiwic2VsZWN0Mi1kcm9wLW1hc2siKS5hdHRyKCJjbGFzcyIsInNlbGVjdDItZHJvcC1tYXNrIiksZS5oaWRlKCksZS5hcHBlbmRUbyh0aGlzLmJvZHkpLGUub24oIm1vdXNlZG93biB0b3VjaHN0YXJ0IGNsaWNrIixmdW5jdGlvbihuKXtpKGUpO3ZhciByLG89dCgiI3NlbGVjdDItZHJvcCIpO28ubGVuZ3RoPjAmJihyPW8uZGF0YSgic2VsZWN0MiIpLHIub3B0cy5zZWxlY3RPbkJsdXImJnIuc2VsZWN0SGlnaGxpZ2h0ZWQoe25vRm9jdXM6ITB9KSxyLmNsb3NlKCksbi5wcmV2ZW50RGVmYXVsdCgpLG4uc3RvcFByb3BhZ2F0aW9uKCkpfSkpLHRoaXMuZHJvcGRvd24ucHJldigpWzBdIT09ZVswXSYmdGhpcy5kcm9wZG93bi5iZWZvcmUoZSksdCgiI3NlbGVjdDItZHJvcCIpLnJlbW92ZUF0dHIoImlkIiksdGhpcy5kcm9wZG93bi5hdHRyKCJpZCIsInNlbGVjdDItZHJvcCIpLGUuc2hvdygpLHRoaXMucG9zaXRpb25Ecm9wZG93bigpLHRoaXMuZHJvcGRvd24uc2hvdygpLHRoaXMucG9zaXRpb25Ecm9wZG93bigpLHRoaXMuZHJvcGRvd24uYWRkQ2xhc3MoInNlbGVjdDItZHJvcC1hY3RpdmUiKTt2YXIgYT10aGlzO3RoaXMuY29udGFpbmVyLnBhcmVudHMoKS5hZGQod2luZG93KS5lYWNoKGZ1bmN0aW9uKCl7dCh0aGlzKS5vbihvKyIgIityKyIgIitzLGZ1bmN0aW9uKHQpe2Eub3BlbmVkKCkmJmEucG9zaXRpb25Ecm9wZG93bigpfSl9KX0sY2xvc2U6ZnVuY3Rpb24oKXtpZih0aGlzLm9wZW5lZCgpKXt2YXIgZT10aGlzLmNvbnRhaW5lckV2ZW50TmFtZSxuPSJzY3JvbGwuIitlLGk9InJlc2l6ZS4iK2Uscj0ib3JpZW50YXRpb25jaGFuZ2UuIitlO3RoaXMuY29udGFpbmVyLnBhcmVudHMoKS5hZGQod2luZG93KS5lYWNoKGZ1bmN0aW9uKCl7dCh0aGlzKS5vZmYobikub2ZmKGkpLm9mZihyKX0pLHRoaXMuY2xlYXJEcm9wZG93bkFsaWdubWVudFByZWZlcmVuY2UoKSx0KCIjc2VsZWN0Mi1kcm9wLW1hc2siKS5oaWRlKCksdGhpcy5kcm9wZG93bi5yZW1vdmVBdHRyKCJpZCIpLHRoaXMuZHJvcGRvd24uaGlkZSgpLHRoaXMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCJzZWxlY3QyLWRyb3Bkb3duLW9wZW4iKS5yZW1vdmVDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIiksdGhpcy5yZXN1bHRzLmVtcHR5KCksai5vZmYoIm1vdXNlbW92ZS5zZWxlY3QyRXZlbnQiKSx0aGlzLmNsZWFyU2VhcmNoKCksdGhpcy5zZWFyY2gucmVtb3ZlQ2xhc3MoInNlbGVjdDItYWN0aXZlIiksdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcih0LkV2ZW50KCJzZWxlY3QyLWNsb3NlIikpfX0sZXh0ZXJuYWxTZWFyY2g6ZnVuY3Rpb24odCl7dGhpcy5vcGVuKCksdGhpcy5zZWFyY2gudmFsKHQpLHRoaXMudXBkYXRlUmVzdWx0cyghMSl9LGNsZWFyU2VhcmNoOmZ1bmN0aW9uKCl7fSxnZXRNYXhpbXVtU2VsZWN0aW9uU2l6ZTpmdW5jdGlvbigpe3JldHVybiB4KHRoaXMub3B0cy5tYXhpbXVtU2VsZWN0aW9uU2l6ZSx0aGlzLm9wdHMuZWxlbWVudCl9LGVuc3VyZUhpZ2hsaWdodFZpc2libGU6ZnVuY3Rpb24oKXt2YXIgZSxuLGkscixvLHMsYSxsLGM9dGhpcy5yZXN1bHRzO2lmKG49dGhpcy5oaWdobGlnaHQoKSwhKG48MCkpe2lmKDA9PW4pcmV0dXJuIHZvaWQgYy5zY3JvbGxUb3AoMCk7ZT10aGlzLmZpbmRIaWdobGlnaHRhYmxlQ2hvaWNlcygpLmZpbmQoIi5zZWxlY3QyLXJlc3VsdC1sYWJlbCIpLGk9dChlW25dKSxsPShpLm9mZnNldCgpfHx7fSkudG9wfHwwLHI9bCtpLm91dGVySGVpZ2h0KCEwKSxuPT09ZS5sZW5ndGgtMSYmKGE9Yy5maW5kKCJsaS5zZWxlY3QyLW1vcmUtcmVzdWx0cyIpLGEubGVuZ3RoPjAmJihyPWEub2Zmc2V0KCkudG9wK2Eub3V0ZXJIZWlnaHQoITApKSksbz1jLm9mZnNldCgpLnRvcCtjLm91dGVySGVpZ2h0KCEwKSxyPm8mJmMuc2Nyb2xsVG9wKGMuc2Nyb2xsVG9wKCkrKHItbykpLHM9bC1jLm9mZnNldCgpLnRvcCxzPDAmJiJub25lIiE9aS5jc3MoImRpc3BsYXkiKSYmYy5zY3JvbGxUb3AoYy5zY3JvbGxUb3AoKStzKX19LGZpbmRIaWdobGlnaHRhYmxlQ2hvaWNlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlc3VsdHMuZmluZCgiLnNlbGVjdDItcmVzdWx0LXNlbGVjdGFibGU6bm90KC5zZWxlY3QyLWRpc2FibGVkKTpub3QoLnNlbGVjdDItc2VsZWN0ZWQpIil9LG1vdmVIaWdobGlnaHQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPXRoaXMuZmluZEhpZ2hsaWdodGFibGVDaG9pY2VzKCksaT10aGlzLmhpZ2hsaWdodCgpO2k+LTEmJmk8bi5sZW5ndGg7KXtpKz1lO3ZhciByPXQobltpXSk7aWYoci5oYXNDbGFzcygic2VsZWN0Mi1yZXN1bHQtc2VsZWN0YWJsZSIpJiYhci5oYXNDbGFzcygic2VsZWN0Mi1kaXNhYmxlZCIpJiYhci5oYXNDbGFzcygic2VsZWN0Mi1zZWxlY3RlZCIpKXt0aGlzLmhpZ2hsaWdodChpKTticmVha319fSxoaWdobGlnaHQ6ZnVuY3Rpb24oZSl7dmFyIG4saSxyPXRoaXMuZmluZEhpZ2hsaWdodGFibGVDaG9pY2VzKCk7cmV0dXJuIDA9PT1hcmd1bWVudHMubGVuZ3RoP3Moci5maWx0ZXIoIi5zZWxlY3QyLWhpZ2hsaWdodGVkIilbMF0sci5nZXQoKSk6KGU+PXIubGVuZ3RoJiYoZT1yLmxlbmd0aC0xKSxlPDAmJihlPTApLHRoaXMucmVtb3ZlSGlnaGxpZ2h0KCksbj10KHJbZV0pLG4uYWRkQ2xhc3MoInNlbGVjdDItaGlnaGxpZ2h0ZWQiKSx0aGlzLnNlYXJjaC5hdHRyKCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnQiLG4uZmluZCgiLnNlbGVjdDItcmVzdWx0LWxhYmVsIikuYXR0cigiaWQiKSksdGhpcy5lbnN1cmVIaWdobGlnaHRWaXNpYmxlKCksdGhpcy5saXZlUmVnaW9uLnRleHQobi50ZXh0KCkpLGk9bi5kYXRhKCJzZWxlY3QyLWRhdGEiKSx2b2lkKGkmJnRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoe3R5cGU6InNlbGVjdDItaGlnaGxpZ2h0Iix2YWw6dGhpcy5pZChpKSxjaG9pY2U6aX0pKSl9LHJlbW92ZUhpZ2hsaWdodDpmdW5jdGlvbigpe3RoaXMucmVzdWx0cy5maW5kKCIuc2VsZWN0Mi1oaWdobGlnaHRlZCIpLnJlbW92ZUNsYXNzKCJzZWxlY3QyLWhpZ2hsaWdodGVkIil9LHRvdWNoTW92ZWQ6ZnVuY3Rpb24oKXt0aGlzLl90b3VjaE1vdmVkPSEwfSxjbGVhclRvdWNoTW92ZWQ6ZnVuY3Rpb24oKXt0aGlzLl90b3VjaE1vdmVkPSExfSxjb3VudFNlbGVjdGFibGVSZXN1bHRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmluZEhpZ2hsaWdodGFibGVDaG9pY2VzKCkubGVuZ3RofSxoaWdobGlnaHRVbmRlckV2ZW50OmZ1bmN0aW9uKGUpe3ZhciBuPXQoZS50YXJnZXQpLmNsb3Nlc3QoIi5zZWxlY3QyLXJlc3VsdC1zZWxlY3RhYmxlIik7aWYobi5sZW5ndGg+MCYmIW4uaXMoIi5zZWxlY3QyLWhpZ2hsaWdodGVkIikpe3ZhciBpPXRoaXMuZmluZEhpZ2hsaWdodGFibGVDaG9pY2VzKCk7dGhpcy5oaWdobGlnaHQoaS5pbmRleChuKSl9ZWxzZSAwPT1uLmxlbmd0aCYmdGhpcy5yZW1vdmVIaWdobGlnaHQoKX0sbG9hZE1vcmVJZk5lZWRlZDpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5yZXN1bHRzLG49ZS5maW5kKCJsaS5zZWxlY3QyLW1vcmUtcmVzdWx0cyIpLGk9dGhpcy5yZXN1bHRzUGFnZSsxLHI9dGhpcyxvPXRoaXMuc2VhcmNoLnZhbCgpLHM9dGhpcy5jb250ZXh0OzAhPT1uLmxlbmd0aCYmKHQ9bi5vZmZzZXQoKS50b3AtZS5vZmZzZXQoKS50b3AtZS5oZWlnaHQoKSx0PD10aGlzLm9wdHMubG9hZE1vcmVQYWRkaW5nJiYobi5hZGRDbGFzcygic2VsZWN0Mi1hY3RpdmUiKSx0aGlzLm9wdHMucXVlcnkoe2VsZW1lbnQ6dGhpcy5vcHRzLmVsZW1lbnQsdGVybTpvLHBhZ2U6aSxjb250ZXh0OnMsbWF0Y2hlcjp0aGlzLm9wdHMubWF0Y2hlcixjYWxsYmFjazp0aGlzLmJpbmQoZnVuY3Rpb24odCl7ci5vcGVuZWQoKSYmKHIub3B0cy5wb3B1bGF0ZVJlc3VsdHMuY2FsbCh0aGlzLGUsdC5yZXN1bHRzLHt0ZXJtOm8scGFnZTppLGNvbnRleHQ6c30pLHIucG9zdHByb2Nlc3NSZXN1bHRzKHQsITEsITEpLHQubW9yZT09PSEwPyhuLmRldGFjaCgpLmFwcGVuZFRvKGUpLnRleHQoeChyLm9wdHMuZm9ybWF0TG9hZE1vcmUsci5vcHRzLmVsZW1lbnQsaSsxKSksd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtyLmxvYWRNb3JlSWZOZWVkZWQoKX0sMTApKTpuLnJlbW92ZSgpLHIucG9zaXRpb25Ecm9wZG93bigpLHIucmVzdWx0c1BhZ2U9aSxyLmNvbnRleHQ9dC5jb250ZXh0LHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoe3R5cGU6InNlbGVjdDItbG9hZGVkIixpdGVtczp0fSkpfSl9KSkpfSx0b2tlbml6ZTpmdW5jdGlvbigpe30sdXBkYXRlUmVzdWx0czpmdW5jdGlvbihlKXtmdW5jdGlvbiBpKCl7Yy5yZW1vdmVDbGFzcygic2VsZWN0Mi1hY3RpdmUiKSxoLnBvc2l0aW9uRHJvcGRvd24oKSx1LmZpbmQoIi5zZWxlY3QyLW5vLXJlc3VsdHMsLnNlbGVjdDItc2VsZWN0aW9uLWxpbWl0LC5zZWxlY3QyLXNlYXJjaGluZyIpLmxlbmd0aD9oLmxpdmVSZWdpb24udGV4dCh1LnRleHQoKSk6aC5saXZlUmVnaW9uLnRleHQoaC5vcHRzLmZvcm1hdE1hdGNoZXModS5maW5kKCIuc2VsZWN0Mi1yZXN1bHQtc2VsZWN0YWJsZSIpLmxlbmd0aCkpfWZ1bmN0aW9uIHIodCl7dS5odG1sKHQpLGkoKX12YXIgbyxzLGEsYz10aGlzLnNlYXJjaCx1PXRoaXMucmVzdWx0cyxkPXRoaXMub3B0cyxoPXRoaXMscD1jLnZhbCgpLGY9dC5kYXRhKHRoaXMuY29udGFpbmVyLCJzZWxlY3QyLWxhc3QtdGVybSIpO2lmKChlPT09ITB8fCFmfHwhbChwLGYpKSYmKHQuZGF0YSh0aGlzLmNvbnRhaW5lciwic2VsZWN0Mi1sYXN0LXRlcm0iLHApLGU9PT0hMHx8dGhpcy5zaG93U2VhcmNoSW5wdXQhPT0hMSYmdGhpcy5vcGVuZWQoKSkpe2E9Kyt0aGlzLnF1ZXJ5Q291bnQ7dmFyIG09dGhpcy5nZXRNYXhpbXVtU2VsZWN0aW9uU2l6ZSgpO2lmKG0+PTEmJihvPXRoaXMuZGF0YSgpLHQuaXNBcnJheShvKSYmby5sZW5ndGg+PW0mJkwoZC5mb3JtYXRTZWxlY3Rpb25Ub29CaWcsImZvcm1hdFNlbGVjdGlvblRvb0JpZyIpKSlyZXR1cm4gdm9pZCByKCI8bGkgY2xhc3M9J3NlbGVjdDItc2VsZWN0aW9uLWxpbWl0Jz4iK3goZC5mb3JtYXRTZWxlY3Rpb25Ub29CaWcsZC5lbGVtZW50LG0pKyI8L2xpPiIpO2lmKGMudmFsKCkubGVuZ3RoPGQubWluaW11bUlucHV0TGVuZ3RoKXJldHVybiByKEwoZC5mb3JtYXRJbnB1dFRvb1Nob3J0LCJmb3JtYXRJbnB1dFRvb1Nob3J0Iik/IjxsaSBjbGFzcz0nc2VsZWN0Mi1uby1yZXN1bHRzJz4iK3goZC5mb3JtYXRJbnB1dFRvb1Nob3J0LGQuZWxlbWVudCxjLnZhbCgpLGQubWluaW11bUlucHV0TGVuZ3RoKSsiPC9saT4iOiIiKSx2b2lkKGUmJnRoaXMuc2hvd1NlYXJjaCYmdGhpcy5zaG93U2VhcmNoKCEwKSk7aWYoZC5tYXhpbXVtSW5wdXRMZW5ndGgmJmMudmFsKCkubGVuZ3RoPmQubWF4aW11bUlucHV0TGVuZ3RoKXJldHVybiB2b2lkIHIoTChkLmZvcm1hdElucHV0VG9vTG9uZywiZm9ybWF0SW5wdXRUb29Mb25nIik/IjxsaSBjbGFzcz0nc2VsZWN0Mi1uby1yZXN1bHRzJz4iK3goZC5mb3JtYXRJbnB1dFRvb0xvbmcsZC5lbGVtZW50LGMudmFsKCksZC5tYXhpbXVtSW5wdXRMZW5ndGgpKyI8L2xpPiI6IiIpO2QuZm9ybWF0U2VhcmNoaW5nJiYwPT09dGhpcy5maW5kSGlnaGxpZ2h0YWJsZUNob2ljZXMoKS5sZW5ndGgmJnIoIjxsaSBjbGFzcz0nc2VsZWN0Mi1zZWFyY2hpbmcnPiIreChkLmZvcm1hdFNlYXJjaGluZyxkLmVsZW1lbnQpKyI8L2xpPiIpLGMuYWRkQ2xhc3MoInNlbGVjdDItYWN0aXZlIiksdGhpcy5yZW1vdmVIaWdobGlnaHQoKSxzPXRoaXMudG9rZW5pemUoKSxzIT1uJiZudWxsIT1zJiZjLnZhbChzKSx0aGlzLnJlc3VsdHNQYWdlPTEsZC5xdWVyeSh7ZWxlbWVudDpkLmVsZW1lbnQsdGVybTpjLnZhbCgpLHBhZ2U6dGhpcy5yZXN1bHRzUGFnZSxjb250ZXh0Om51bGwsbWF0Y2hlcjpkLm1hdGNoZXIsY2FsbGJhY2s6dGhpcy5iaW5kKGZ1bmN0aW9uKG8pe3ZhciBzO2lmKGE9PXRoaXMucXVlcnlDb3VudCl7aWYoIXRoaXMub3BlbmVkKCkpcmV0dXJuIHZvaWQgdGhpcy5zZWFyY2gucmVtb3ZlQ2xhc3MoInNlbGVjdDItYWN0aXZlIik7aWYoby5oYXNFcnJvciE9PW4mJkwoZC5mb3JtYXRBamF4RXJyb3IsImZvcm1hdEFqYXhFcnJvciIpKXJldHVybiB2b2lkIHIoIjxsaSBjbGFzcz0nc2VsZWN0Mi1hamF4LWVycm9yJz4iK3goZC5mb3JtYXRBamF4RXJyb3IsZC5lbGVtZW50LG8uanFYSFIsby50ZXh0U3RhdHVzLG8uZXJyb3JUaHJvd24pKyI8L2xpPiIpO2lmKHRoaXMuY29udGV4dD1vLmNvbnRleHQ9PT1uP251bGw6by5jb250ZXh0LHRoaXMub3B0cy5jcmVhdGVTZWFyY2hDaG9pY2UmJiIiIT09Yy52YWwoKSYmKHM9dGhpcy5vcHRzLmNyZWF0ZVNlYXJjaENob2ljZS5jYWxsKGgsYy52YWwoKSxvLnJlc3VsdHMpLHMhPT1uJiZudWxsIT09cyYmaC5pZChzKSE9PW4mJm51bGwhPT1oLmlkKHMpJiYwPT09dChvLnJlc3VsdHMpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiBsKGguaWQodGhpcyksaC5pZChzKSl9KS5sZW5ndGgmJnRoaXMub3B0cy5jcmVhdGVTZWFyY2hDaG9pY2VQb3NpdGlvbihvLnJlc3VsdHMscykpLDA9PT1vLnJlc3VsdHMubGVuZ3RoJiZMKGQuZm9ybWF0Tm9NYXRjaGVzLCJmb3JtYXROb01hdGNoZXMiKSlyZXR1cm4gdm9pZCByKCI8bGkgY2xhc3M9J3NlbGVjdDItbm8tcmVzdWx0cyc+Iit4KGQuZm9ybWF0Tm9NYXRjaGVzLGQuZWxlbWVudCxjLnZhbCgpKSsiPC9saT4iKTt1LmVtcHR5KCksaC5vcHRzLnBvcHVsYXRlUmVzdWx0cy5jYWxsKHRoaXMsdSxvLnJlc3VsdHMse3Rlcm06Yy52YWwoKSxwYWdlOnRoaXMucmVzdWx0c1BhZ2UsY29udGV4dDpudWxsfSksby5tb3JlPT09ITAmJkwoZC5mb3JtYXRMb2FkTW9yZSwiZm9ybWF0TG9hZE1vcmUiKSYmKHUuYXBwZW5kKCI8bGkgY2xhc3M9J3NlbGVjdDItbW9yZS1yZXN1bHRzJz4iK2QuZXNjYXBlTWFya3VwKHgoZC5mb3JtYXRMb2FkTW9yZSxkLmVsZW1lbnQsdGhpcy5yZXN1bHRzUGFnZSkpKyI8L2xpPiIpLHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aC5sb2FkTW9yZUlmTmVlZGVkKCl9LDEwKSksdGhpcy5wb3N0cHJvY2Vzc1Jlc3VsdHMobyxlKSxpKCksdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcih7dHlwZToic2VsZWN0Mi1sb2FkZWQiLGl0ZW1zOm99KX19KX0pfX0sY2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy5jbG9zZSgpfSxibHVyOmZ1bmN0aW9uKCl7dGhpcy5vcHRzLnNlbGVjdE9uQmx1ciYmdGhpcy5zZWxlY3RIaWdobGlnaHRlZCh7bm9Gb2N1czohMH0pLHRoaXMuY2xvc2UoKSx0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIiksdGhpcy5zZWFyY2hbMF09PT1kb2N1bWVudC5hY3RpdmVFbGVtZW50JiZ0aGlzLnNlYXJjaC5ibHVyKCksdGhpcy5jbGVhclNlYXJjaCgpLHRoaXMuc2VsZWN0aW9uLmZpbmQoIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2UtZm9jdXMiKS5yZW1vdmVDbGFzcygic2VsZWN0Mi1zZWFyY2gtY2hvaWNlLWZvY3VzIil9LGZvY3VzU2VhcmNoOmZ1bmN0aW9uKCl7bSh0aGlzLnNlYXJjaCl9LHNlbGVjdEhpZ2hsaWdodGVkOmZ1bmN0aW9uKHQpe2lmKHRoaXMuX3RvdWNoTW92ZWQpcmV0dXJuIHZvaWQgdGhpcy5jbGVhclRvdWNoTW92ZWQoKTt2YXIgZT10aGlzLmhpZ2hsaWdodCgpLG49dGhpcy5yZXN1bHRzLmZpbmQoIi5zZWxlY3QyLWhpZ2hsaWdodGVkIiksaT1uLmNsb3Nlc3QoIi5zZWxlY3QyLXJlc3VsdCIpLmRhdGEoInNlbGVjdDItZGF0YSIpO2k/KHRoaXMuaGlnaGxpZ2h0KGUpLHRoaXMub25TZWxlY3QoaSx0KSk6dCYmdC5ub0ZvY3VzJiZ0aGlzLmNsb3NlKCl9LGdldFBsYWNlaG9sZGVyOmZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHRoaXMub3B0cy5lbGVtZW50LmF0dHIoInBsYWNlaG9sZGVyIil8fHRoaXMub3B0cy5lbGVtZW50LmF0dHIoImRhdGEtcGxhY2Vob2xkZXIiKXx8dGhpcy5vcHRzLmVsZW1lbnQuZGF0YSgicGxhY2Vob2xkZXIiKXx8dGhpcy5vcHRzLnBsYWNlaG9sZGVyfHwoKHQ9dGhpcy5nZXRQbGFjZWhvbGRlck9wdGlvbigpKSE9PW4/dC50ZXh0KCk6bil9LGdldFBsYWNlaG9sZGVyT3B0aW9uOmZ1bmN0aW9uKCl7aWYodGhpcy5zZWxlY3Qpe3ZhciBlPXRoaXMuc2VsZWN0LmNoaWxkcmVuKCJvcHRpb24iKS5maXJzdCgpO2lmKHRoaXMub3B0cy5wbGFjZWhvbGRlck9wdGlvbiE9PW4pcmV0dXJuImZpcnN0Ij09PXRoaXMub3B0cy5wbGFjZWhvbGRlck9wdGlvbiYmZXx8ImZ1bmN0aW9uIj09dHlwZW9mIHRoaXMub3B0cy5wbGFjZWhvbGRlck9wdGlvbiYmdGhpcy5vcHRzLnBsYWNlaG9sZGVyT3B0aW9uKHRoaXMuc2VsZWN0KTtpZigiIj09PXQudHJpbShlLnRleHQoKSkmJiIiPT09ZS52YWwoKSlyZXR1cm4gZX19LGluaXRDb250YWluZXJXaWR0aDpmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgZSxpLHIsbyxzLGE7aWYoIm9mZiI9PT10aGlzLm9wdHMud2lkdGgpcmV0dXJuIG51bGw7aWYoImVsZW1lbnQiPT09dGhpcy5vcHRzLndpZHRoKXJldHVybiAwPT09dGhpcy5vcHRzLmVsZW1lbnQub3V0ZXJXaWR0aCghMSk/ImF1dG8iOnRoaXMub3B0cy5lbGVtZW50Lm91dGVyV2lkdGgoITEpKyJweCI7aWYoImNvcHkiPT09dGhpcy5vcHRzLndpZHRofHwicmVzb2x2ZSI9PT10aGlzLm9wdHMud2lkdGgpe2lmKGU9dGhpcy5vcHRzLmVsZW1lbnQuYXR0cigic3R5bGUiKSxlIT09bilmb3IoaT1lLnNwbGl0KCI7Iiksbz0wLHM9aS5sZW5ndGg7bzxzO28rPTEpaWYoYT1pW29dLnJlcGxhY2UoL1xzL2csIiIpLHI9YS5tYXRjaCgvXndpZHRoOigoWy0rXT8oWzAtOV0qXC4pP1swLTldKykocHh8ZW18ZXh8JXxpbnxjbXxtbXxwdHxwYykpL2kpLG51bGwhPT1yJiZyLmxlbmd0aD49MSlyZXR1cm4gclsxXTtyZXR1cm4icmVzb2x2ZSI9PT10aGlzLm9wdHMud2lkdGg/KGU9dGhpcy5vcHRzLmVsZW1lbnQuY3NzKCJ3aWR0aCIpLGUuaW5kZXhPZigiJSIpPjA/ZTowPT09dGhpcy5vcHRzLmVsZW1lbnQub3V0ZXJXaWR0aCghMSk/ImF1dG8iOnRoaXMub3B0cy5lbGVtZW50Lm91dGVyV2lkdGgoITEpKyJweCIpOm51bGx9cmV0dXJuIHQuaXNGdW5jdGlvbih0aGlzLm9wdHMud2lkdGgpP3RoaXMub3B0cy53aWR0aCgpOnRoaXMub3B0cy53aWR0aH12YXIgaT1lLmNhbGwodGhpcyk7bnVsbCE9PWkmJnRoaXMuY29udGFpbmVyLmNzcygid2lkdGgiLGkpfX0pLFA9QyhPLHtjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oKXt2YXIgZT10KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKS5hdHRyKHsiY2xhc3MiOiJzZWxlY3QyLWNvbnRhaW5lciJ9KS5odG1sKFsiPGEgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyBjbGFzcz0nc2VsZWN0Mi1jaG9pY2UnIHRhYmluZGV4PSctMSc+IiwiICAgPHNwYW4gY2xhc3M9J3NlbGVjdDItY2hvc2VuJz4mIzE2MDs8L3NwYW4+PGFiYnIgY2xhc3M9J3NlbGVjdDItc2VhcmNoLWNob2ljZS1jbG9zZSc+PC9hYmJyPiIsIiAgIDxzcGFuIGNsYXNzPSdzZWxlY3QyLWFycm93JyByb2xlPSdwcmVzZW50YXRpb24nPjxiIHJvbGU9J3ByZXNlbnRhdGlvbic+PC9iPjwvc3Bhbj4iLCI8L2E+IiwiPGxhYmVsIGZvcj0nJyBjbGFzcz0nc2VsZWN0Mi1vZmZzY3JlZW4nPjwvbGFiZWw+IiwiPGlucHV0IGNsYXNzPSdzZWxlY3QyLWZvY3Vzc2VyIHNlbGVjdDItb2Zmc2NyZWVuJyB0eXBlPSd0ZXh0JyBhcmlhLWhhc3BvcHVwPSd0cnVlJyByb2xlPSdidXR0b24nIC8+IiwiPGRpdiBjbGFzcz0nc2VsZWN0Mi1kcm9wIHNlbGVjdDItZGlzcGxheS1ub25lJz4iLCIgICA8ZGl2IGNsYXNzPSdzZWxlY3QyLXNlYXJjaCc+IiwiICAgICAgIDxsYWJlbCBmb3I9JycgY2xhc3M9J3NlbGVjdDItb2Zmc2NyZWVuJz48L2xhYmVsPiIsIiAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgYXV0b2NvbXBsZXRlPSdvZmYnIGF1dG9jb3JyZWN0PSdvZmYnIGF1dG9jYXBpdGFsaXplPSdvZmYnIHNwZWxsY2hlY2s9J2ZhbHNlJyBjbGFzcz0nc2VsZWN0Mi1pbnB1dCcgcm9sZT0nY29tYm9ib3gnIGFyaWEtZXhwYW5kZWQ9J3RydWUnIiwiICAgICAgIGFyaWEtYXV0b2NvbXBsZXRlPSdsaXN0JyAvPiIsIiAgIDwvZGl2PiIsIiAgIDx1bCBjbGFzcz0nc2VsZWN0Mi1yZXN1bHRzJyByb2xlPSdsaXN0Ym94Jz4iLCIgICA8L3VsPiIsIjwvZGl2PiJdLmpvaW4oIiIpKTtyZXR1cm4gZX0sZW5hYmxlSW50ZXJmYWNlOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnQuZW5hYmxlSW50ZXJmYWNlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSYmdGhpcy5mb2N1c3Nlci5wcm9wKCJkaXNhYmxlZCIsIXRoaXMuaXNJbnRlcmZhY2VFbmFibGVkKCkpfSxvcGVuaW5nOmZ1bmN0aW9uKCl7dmFyIGUsaSxyO3RoaXMub3B0cy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaD49MCYmdGhpcy5zaG93U2VhcmNoKCEwKSx0aGlzLnBhcmVudC5vcGVuaW5nLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLnNob3dTZWFyY2hJbnB1dCE9PSExJiZ0aGlzLnNlYXJjaC52YWwodGhpcy5mb2N1c3Nlci52YWwoKSksdGhpcy5vcHRzLnNob3VsZEZvY3VzSW5wdXQodGhpcykmJih0aGlzLnNlYXJjaC5mb2N1cygpLGU9dGhpcy5zZWFyY2guZ2V0KDApLGUuY3JlYXRlVGV4dFJhbmdlPyhpPWUuY3JlYXRlVGV4dFJhbmdlKCksaS5jb2xsYXBzZSghMSksaS5zZWxlY3QoKSk6ZS5zZXRTZWxlY3Rpb25SYW5nZSYmKHI9dGhpcy5zZWFyY2gudmFsKCkubGVuZ3RoLGUuc2V0U2VsZWN0aW9uUmFuZ2UocixyKSkpLCIiPT09dGhpcy5zZWFyY2gudmFsKCkmJnRoaXMubmV4dFNlYXJjaFRlcm0hPW4mJih0aGlzLnNlYXJjaC52YWwodGhpcy5uZXh0U2VhcmNoVGVybSksdGhpcy5zZWFyY2guc2VsZWN0KCkpLHRoaXMuZm9jdXNzZXIucHJvcCgiZGlzYWJsZWQiLCEwKS52YWwoIiIpLHRoaXMudXBkYXRlUmVzdWx0cyghMCksdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcih0LkV2ZW50KCJzZWxlY3QyLW9wZW4iKSl9LGNsb3NlOmZ1bmN0aW9uKCl7dGhpcy5vcGVuZWQoKSYmKHRoaXMucGFyZW50LmNsb3NlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLmZvY3Vzc2VyLnByb3AoImRpc2FibGVkIiwhMSksdGhpcy5vcHRzLnNob3VsZEZvY3VzSW5wdXQodGhpcykmJnRoaXMuZm9jdXNzZXIuZm9jdXMoKSl9LGZvY3VzOmZ1bmN0aW9uKCl7dGhpcy5vcGVuZWQoKT90aGlzLmNsb3NlKCk6KHRoaXMuZm9jdXNzZXIucHJvcCgiZGlzYWJsZWQiLCExKSx0aGlzLm9wdHMuc2hvdWxkRm9jdXNJbnB1dCh0aGlzKSYmdGhpcy5mb2N1c3Nlci5mb2N1cygpKX0saXNGb2N1c2VkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGFpbmVyLmhhc0NsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKX0sY2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnQuY2FuY2VsLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLmZvY3Vzc2VyLnByb3AoImRpc2FibGVkIiwhMSksdGhpcy5vcHRzLnNob3VsZEZvY3VzSW5wdXQodGhpcykmJnRoaXMuZm9jdXNzZXIuZm9jdXMoKX0sZGVzdHJveTpmdW5jdGlvbigpe3QoImxhYmVsW2Zvcj0nIit0aGlzLmZvY3Vzc2VyLmF0dHIoImlkIikrIiddIikuYXR0cigiZm9yIix0aGlzLm9wdHMuZWxlbWVudC5hdHRyKCJpZCIpKSx0aGlzLnBhcmVudC5kZXN0cm95LmFwcGx5KHRoaXMsYXJndW1lbnRzKSxELmNhbGwodGhpcywic2VsZWN0aW9uIiwiZm9jdXNzZXIiKX0saW5pdENvbnRhaW5lcjpmdW5jdGlvbigpe3ZhciBlLG4scj10aGlzLmNvbnRhaW5lcixvPXRoaXMuZHJvcGRvd24scz1JKCk7dGhpcy5vcHRzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoPDA/dGhpcy5zaG93U2VhcmNoKCExKTp0aGlzLnNob3dTZWFyY2goITApLHRoaXMuc2VsZWN0aW9uPWU9ci5maW5kKCIuc2VsZWN0Mi1jaG9pY2UiKSx0aGlzLmZvY3Vzc2VyPXIuZmluZCgiLnNlbGVjdDItZm9jdXNzZXIiKSxlLmZpbmQoIi5zZWxlY3QyLWNob3NlbiIpLmF0dHIoImlkIiwic2VsZWN0Mi1jaG9zZW4tIitzKSx0aGlzLmZvY3Vzc2VyLmF0dHIoImFyaWEtbGFiZWxsZWRieSIsInNlbGVjdDItY2hvc2VuLSIrcyksdGhpcy5yZXN1bHRzLmF0dHIoImlkIiwic2VsZWN0Mi1yZXN1bHRzLSIrcyksdGhpcy5zZWFyY2guYXR0cigiYXJpYS1vd25zIiwic2VsZWN0Mi1yZXN1bHRzLSIrcyksdGhpcy5mb2N1c3Nlci5hdHRyKCJpZCIsInMyaWRfYXV0b2dlbiIrcyksbj10KCJsYWJlbFtmb3I9JyIrdGhpcy5vcHRzLmVsZW1lbnQuYXR0cigiaWQiKSsiJ10iKSx0aGlzLmZvY3Vzc2VyLnByZXYoKS50ZXh0KG4udGV4dCgpKS5hdHRyKCJmb3IiLHRoaXMuZm9jdXNzZXIuYXR0cigiaWQiKSk7dmFyIGE9dGhpcy5vcHRzLmVsZW1lbnQuYXR0cigidGl0bGUiKTt0aGlzLm9wdHMuZWxlbWVudC5hdHRyKCJ0aXRsZSIsYXx8bi50ZXh0KCkpLHRoaXMuZm9jdXNzZXIuYXR0cigidGFiaW5kZXgiLHRoaXMuZWxlbWVudFRhYkluZGV4KSx0aGlzLnNlYXJjaC5hdHRyKCJpZCIsdGhpcy5mb2N1c3Nlci5hdHRyKCJpZCIpKyJfc2VhcmNoIiksdGhpcy5zZWFyY2gucHJldigpLnRleHQodCgibGFiZWxbZm9yPSciK3RoaXMuZm9jdXNzZXIuYXR0cigiaWQiKSsiJ10iKS50ZXh0KCkpLmF0dHIoImZvciIsdGhpcy5zZWFyY2guYXR0cigiaWQiKSksdGhpcy5zZWFyY2gub24oImtleWRvd24iLHRoaXMuYmluZChmdW5jdGlvbih0KXtpZih0aGlzLmlzSW50ZXJmYWNlRW5hYmxlZCgpJiYyMjkhPXQua2V5Q29kZSl7aWYodC53aGljaD09PVkuUEFHRV9VUHx8dC53aGljaD09PVkuUEFHRV9ET1dOKXJldHVybiB2b2lkIGcodCk7c3dpdGNoKHQud2hpY2gpe2Nhc2UgWS5VUDpjYXNlIFkuRE9XTjpyZXR1cm4gdGhpcy5tb3ZlSGlnaGxpZ2h0KHQud2hpY2g9PT1ZLlVQPy0xOjEpLHZvaWQgZyh0KTtjYXNlIFkuRU5URVI6cmV0dXJuIHRoaXMuc2VsZWN0SGlnaGxpZ2h0ZWQoKSx2b2lkIGcodCk7Y2FzZSBZLlRBQjpyZXR1cm4gdm9pZCB0aGlzLnNlbGVjdEhpZ2hsaWdodGVkKHtub0ZvY3VzOiEwfSk7Y2FzZSBZLkVTQzpyZXR1cm4gdGhpcy5jYW5jZWwodCksdm9pZCBnKHQpfX19KSksdGhpcy5zZWFyY2gub24oImJsdXIiLHRoaXMuYmluZChmdW5jdGlvbih0KXtkb2N1bWVudC5hY3RpdmVFbGVtZW50PT09dGhpcy5ib2R5LmdldCgwKSYmd2luZG93LnNldFRpbWVvdXQodGhpcy5iaW5kKGZ1bmN0aW9uKCl7dGhpcy5vcGVuZWQoKSYmdGhpcy5zZWFyY2guZm9jdXMoKX0pLDApfSkpLHRoaXMuZm9jdXNzZXIub24oImtleWRvd24iLHRoaXMuYmluZChmdW5jdGlvbih0KXtpZih0aGlzLmlzSW50ZXJmYWNlRW5hYmxlZCgpJiZ0LndoaWNoIT09WS5UQUImJiFZLmlzQ29udHJvbCh0KSYmIVkuaXNGdW5jdGlvbktleSh0KSYmdC53aGljaCE9PVkuRVNDKXtpZih0aGlzLm9wdHMub3Blbk9uRW50ZXI9PT0hMSYmdC53aGljaD09PVkuRU5URVIpcmV0dXJuIHZvaWQgZyh0KTtpZih0LndoaWNoPT1ZLkRPV058fHQud2hpY2g9PVkuVVB8fHQud2hpY2g9PVkuRU5URVImJnRoaXMub3B0cy5vcGVuT25FbnRlcil7aWYodC5hbHRLZXl8fHQuY3RybEtleXx8dC5zaGlmdEtleXx8dC5tZXRhS2V5KXJldHVybjtyZXR1cm4gdGhpcy5vcGVuKCksdm9pZCBnKHQpfXJldHVybiB0LndoaWNoPT1ZLkRFTEVURXx8dC53aGljaD09WS5CQUNLU1BBQ0U/KHRoaXMub3B0cy5hbGxvd0NsZWFyJiZ0aGlzLmNsZWFyKCksdm9pZCBnKHQpKTp2b2lkIDB9fSkpLGQodGhpcy5mb2N1c3NlciksdGhpcy5mb2N1c3Nlci5vbigia2V5dXAtY2hhbmdlIGlucHV0Iix0aGlzLmJpbmQoZnVuY3Rpb24odCl7aWYodGhpcy5vcHRzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoPj0wKXtpZih0LnN0b3BQcm9wYWdhdGlvbigpLHRoaXMub3BlbmVkKCkpcmV0dXJuO3RoaXMub3BlbigpfX0pKSxlLm9uKCJtb3VzZWRvd24gdG91Y2hzdGFydCIsImFiYnIiLHRoaXMuYmluZChmdW5jdGlvbih0KXt0aGlzLmlzSW50ZXJmYWNlRW5hYmxlZCgpJiYodGhpcy5jbGVhcigpLHYodCksdGhpcy5jbG9zZSgpLHRoaXMuc2VsZWN0aW9uLmZvY3VzKCkpfSkpLGUub24oIm1vdXNlZG93biB0b3VjaHN0YXJ0Iix0aGlzLmJpbmQoZnVuY3Rpb24obil7aShlKSx0aGlzLmNvbnRhaW5lci5oYXNDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIil8fHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIodC5FdmVudCgic2VsZWN0Mi1mb2N1cyIpKSx0aGlzLm9wZW5lZCgpP3RoaXMuY2xvc2UoKTp0aGlzLmlzSW50ZXJmYWNlRW5hYmxlZCgpJiZ0aGlzLm9wZW4oKSxnKG4pfSkpLG8ub24oIm1vdXNlZG93biB0b3VjaHN0YXJ0Iix0aGlzLmJpbmQoZnVuY3Rpb24oKXt0aGlzLm9wdHMuc2hvdWxkRm9jdXNJbnB1dCh0aGlzKSYmdGhpcy5zZWFyY2guZm9jdXMoKX0pKSxlLm9uKCJmb2N1cyIsdGhpcy5iaW5kKGZ1bmN0aW9uKHQpe2codCl9KSksdGhpcy5mb2N1c3Nlci5vbigiZm9jdXMiLHRoaXMuYmluZChmdW5jdGlvbigpe3RoaXMuY29udGFpbmVyLmhhc0NsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKXx8dGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcih0LkV2ZW50KCJzZWxlY3QyLWZvY3VzIikpLHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKX0pKS5vbigiYmx1ciIsdGhpcy5iaW5kKGZ1bmN0aW9uKCl7dGhpcy5vcGVuZWQoKXx8KHRoaXMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKSx0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKHQuRXZlbnQoInNlbGVjdDItYmx1ciIpKSl9KSksdGhpcy5zZWFyY2gub24oImZvY3VzIix0aGlzLmJpbmQoZnVuY3Rpb24oKXt0aGlzLmNvbnRhaW5lci5oYXNDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIil8fHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIodC5FdmVudCgic2VsZWN0Mi1mb2N1cyIpKSx0aGlzLmNvbnRhaW5lci5hZGRDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIil9KSksdGhpcy5pbml0Q29udGFpbmVyV2lkdGgoKSx0aGlzLm9wdHMuZWxlbWVudC5hZGRDbGFzcygic2VsZWN0Mi1vZmZzY3JlZW4iKSx0aGlzLnNldFBsYWNlaG9sZGVyKCk7Cgl9LGNsZWFyOmZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMuc2VsZWN0aW9uLmRhdGEoInNlbGVjdDItZGF0YSIpO2lmKG4pe3ZhciBpPXQuRXZlbnQoInNlbGVjdDItY2xlYXJpbmciKTtpZih0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKGkpLGkuaXNEZWZhdWx0UHJldmVudGVkKCkpcmV0dXJuO3ZhciByPXRoaXMuZ2V0UGxhY2Vob2xkZXJPcHRpb24oKTt0aGlzLm9wdHMuZWxlbWVudC52YWwocj9yLnZhbCgpOiIiKSx0aGlzLnNlbGVjdGlvbi5maW5kKCIuc2VsZWN0Mi1jaG9zZW4iKS5lbXB0eSgpLHRoaXMuc2VsZWN0aW9uLnJlbW92ZURhdGEoInNlbGVjdDItZGF0YSIpLHRoaXMuc2V0UGxhY2Vob2xkZXIoKSxlIT09ITEmJih0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKHt0eXBlOiJzZWxlY3QyLXJlbW92ZWQiLHZhbDp0aGlzLmlkKG4pLGNob2ljZTpufSksdGhpcy50cmlnZ2VyQ2hhbmdlKHtyZW1vdmVkOm59KSl9fSxpbml0U2VsZWN0aW9uOmZ1bmN0aW9uKCl7aWYodGhpcy5pc1BsYWNlaG9sZGVyT3B0aW9uU2VsZWN0ZWQoKSl0aGlzLnVwZGF0ZVNlbGVjdGlvbihudWxsKSx0aGlzLmNsb3NlKCksdGhpcy5zZXRQbGFjZWhvbGRlcigpO2Vsc2V7dmFyIHQ9dGhpczt0aGlzLm9wdHMuaW5pdFNlbGVjdGlvbi5jYWxsKG51bGwsdGhpcy5vcHRzLmVsZW1lbnQsZnVuY3Rpb24oZSl7ZSE9PW4mJm51bGwhPT1lJiYodC51cGRhdGVTZWxlY3Rpb24oZSksdC5jbG9zZSgpLHQuc2V0UGxhY2Vob2xkZXIoKSx0Lm5leHRTZWFyY2hUZXJtPXQub3B0cy5uZXh0U2VhcmNoVGVybShlLHQuc2VhcmNoLnZhbCgpKSl9KX19LGlzUGxhY2Vob2xkZXJPcHRpb25TZWxlY3RlZDpmdW5jdGlvbigpe3ZhciB0O3JldHVybiB0aGlzLmdldFBsYWNlaG9sZGVyKCkhPT1uJiYoKHQ9dGhpcy5nZXRQbGFjZWhvbGRlck9wdGlvbigpKSE9PW4mJnQucHJvcCgic2VsZWN0ZWQiKXx8IiI9PT10aGlzLm9wdHMuZWxlbWVudC52YWwoKXx8dGhpcy5vcHRzLmVsZW1lbnQudmFsKCk9PT1ufHxudWxsPT09dGhpcy5vcHRzLmVsZW1lbnQudmFsKCkpfSxwcmVwYXJlT3B0czpmdW5jdGlvbigpe3ZhciBlPXRoaXMucGFyZW50LnByZXBhcmVPcHRzLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxuPXRoaXM7cmV0dXJuInNlbGVjdCI9PT1lLmVsZW1lbnQuZ2V0KDApLnRhZ05hbWUudG9Mb3dlckNhc2UoKT9lLmluaXRTZWxlY3Rpb249ZnVuY3Rpb24odCxlKXt2YXIgaT10LmZpbmQoIm9wdGlvbiIpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGVjdGVkJiYhdGhpcy5kaXNhYmxlZH0pO2Uobi5vcHRpb25Ub0RhdGEoaSkpfToiZGF0YSJpbiBlJiYoZS5pbml0U2VsZWN0aW9uPWUuaW5pdFNlbGVjdGlvbnx8ZnVuY3Rpb24obixpKXt2YXIgcj1uLnZhbCgpLG89bnVsbDtlLnF1ZXJ5KHttYXRjaGVyOmZ1bmN0aW9uKHQsbixpKXt2YXIgcz1sKHIsZS5pZChpKSk7cmV0dXJuIHMmJihvPWkpLHN9LGNhbGxiYWNrOnQuaXNGdW5jdGlvbihpKT9mdW5jdGlvbigpe2kobyl9OnQubm9vcH0pfSksZX0sZ2V0UGxhY2Vob2xkZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3QmJnRoaXMuZ2V0UGxhY2Vob2xkZXJPcHRpb24oKT09PW4/bjp0aGlzLnBhcmVudC5nZXRQbGFjZWhvbGRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHNldFBsYWNlaG9sZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRQbGFjZWhvbGRlcigpO2lmKHRoaXMuaXNQbGFjZWhvbGRlck9wdGlvblNlbGVjdGVkKCkmJnQhPT1uKXtpZih0aGlzLnNlbGVjdCYmdGhpcy5nZXRQbGFjZWhvbGRlck9wdGlvbigpPT09bilyZXR1cm47dGhpcy5zZWxlY3Rpb24uZmluZCgiLnNlbGVjdDItY2hvc2VuIikuaHRtbCh0aGlzLm9wdHMuZXNjYXBlTWFya3VwKHQpKSx0aGlzLnNlbGVjdGlvbi5hZGRDbGFzcygic2VsZWN0Mi1kZWZhdWx0IiksdGhpcy5jb250YWluZXIucmVtb3ZlQ2xhc3MoInNlbGVjdDItYWxsb3djbGVhciIpfX0scG9zdHByb2Nlc3NSZXN1bHRzOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT0wLHI9dGhpcztpZih0aGlzLmZpbmRIaWdobGlnaHRhYmxlQ2hvaWNlcygpLmVhY2gyKGZ1bmN0aW9uKHQsZSl7aWYobChyLmlkKGUuZGF0YSgic2VsZWN0Mi1kYXRhIikpLHIub3B0cy5lbGVtZW50LnZhbCgpKSlyZXR1cm4gaT10LCExfSksbiE9PSExJiYoZT09PSEwJiZpPj0wP3RoaXMuaGlnaGxpZ2h0KGkpOnRoaXMuaGlnaGxpZ2h0KDApKSxlPT09ITApe3ZhciBvPXRoaXMub3B0cy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaDtvPj0wJiZ0aGlzLnNob3dTZWFyY2goQSh0LnJlc3VsdHMpPj1vKX19LHNob3dTZWFyY2g6ZnVuY3Rpb24oZSl7dGhpcy5zaG93U2VhcmNoSW5wdXQhPT1lJiYodGhpcy5zaG93U2VhcmNoSW5wdXQ9ZSx0aGlzLmRyb3Bkb3duLmZpbmQoIi5zZWxlY3QyLXNlYXJjaCIpLnRvZ2dsZUNsYXNzKCJzZWxlY3QyLXNlYXJjaC1oaWRkZW4iLCFlKSx0aGlzLmRyb3Bkb3duLmZpbmQoIi5zZWxlY3QyLXNlYXJjaCIpLnRvZ2dsZUNsYXNzKCJzZWxlY3QyLW9mZnNjcmVlbiIsIWUpLHQodGhpcy5kcm9wZG93bix0aGlzLmNvbnRhaW5lcikudG9nZ2xlQ2xhc3MoInNlbGVjdDItd2l0aC1zZWFyY2hib3giLGUpKX0sb25TZWxlY3Q6ZnVuY3Rpb24odCxlKXtpZih0aGlzLnRyaWdnZXJTZWxlY3QodCkpe3ZhciBuPXRoaXMub3B0cy5lbGVtZW50LnZhbCgpLGk9dGhpcy5kYXRhKCk7dGhpcy5vcHRzLmVsZW1lbnQudmFsKHRoaXMuaWQodCkpLHRoaXMudXBkYXRlU2VsZWN0aW9uKHQpLHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoe3R5cGU6InNlbGVjdDItc2VsZWN0ZWQiLHZhbDp0aGlzLmlkKHQpLGNob2ljZTp0fSksdGhpcy5uZXh0U2VhcmNoVGVybT10aGlzLm9wdHMubmV4dFNlYXJjaFRlcm0odCx0aGlzLnNlYXJjaC52YWwoKSksdGhpcy5jbG9zZSgpLGUmJmUubm9Gb2N1c3x8IXRoaXMub3B0cy5zaG91bGRGb2N1c0lucHV0KHRoaXMpfHx0aGlzLmZvY3Vzc2VyLmZvY3VzKCksbChuLHRoaXMuaWQodCkpfHx0aGlzLnRyaWdnZXJDaGFuZ2Uoe2FkZGVkOnQscmVtb3ZlZDppfSl9fSx1cGRhdGVTZWxlY3Rpb246ZnVuY3Rpb24odCl7dmFyIGUsaSxyPXRoaXMuc2VsZWN0aW9uLmZpbmQoIi5zZWxlY3QyLWNob3NlbiIpO3RoaXMuc2VsZWN0aW9uLmRhdGEoInNlbGVjdDItZGF0YSIsdCksci5lbXB0eSgpLG51bGwhPT10JiYoZT10aGlzLm9wdHMuZm9ybWF0U2VsZWN0aW9uKHQscix0aGlzLm9wdHMuZXNjYXBlTWFya3VwKSksZSE9PW4mJnIuYXBwZW5kKGUpLGk9dGhpcy5vcHRzLmZvcm1hdFNlbGVjdGlvbkNzc0NsYXNzKHQsciksaSE9PW4mJnIuYWRkQ2xhc3MoaSksdGhpcy5zZWxlY3Rpb24ucmVtb3ZlQ2xhc3MoInNlbGVjdDItZGVmYXVsdCIpLHRoaXMub3B0cy5hbGxvd0NsZWFyJiZ0aGlzLmdldFBsYWNlaG9sZGVyKCkhPT1uJiZ0aGlzLmNvbnRhaW5lci5hZGRDbGFzcygic2VsZWN0Mi1hbGxvd2NsZWFyIil9LHZhbDpmdW5jdGlvbiBXKCl7dmFyIFcsdD0hMSxlPW51bGwsaT10aGlzLHI9dGhpcy5kYXRhKCk7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMub3B0cy5lbGVtZW50LnZhbCgpO2lmKFc9YXJndW1lbnRzWzBdLGFyZ3VtZW50cy5sZW5ndGg+MSYmKHQ9YXJndW1lbnRzWzFdKSx0aGlzLnNlbGVjdCl0aGlzLnNlbGVjdC52YWwoVykuZmluZCgib3B0aW9uIikuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWR9KS5lYWNoMihmdW5jdGlvbih0LG4pe3JldHVybiBlPWkub3B0aW9uVG9EYXRhKG4pLCExfSksdGhpcy51cGRhdGVTZWxlY3Rpb24oZSksdGhpcy5zZXRQbGFjZWhvbGRlcigpLHQmJnRoaXMudHJpZ2dlckNoYW5nZSh7YWRkZWQ6ZSxyZW1vdmVkOnJ9KTtlbHNle2lmKCFXJiYwIT09VylyZXR1cm4gdm9pZCB0aGlzLmNsZWFyKHQpO2lmKHRoaXMub3B0cy5pbml0U2VsZWN0aW9uPT09bil0aHJvdyBuZXcgRXJyb3IoImNhbm5vdCBjYWxsIHZhbCgpIGlmIGluaXRTZWxlY3Rpb24oKSBpcyBub3QgZGVmaW5lZCIpO3RoaXMub3B0cy5lbGVtZW50LnZhbChXKSx0aGlzLm9wdHMuaW5pdFNlbGVjdGlvbih0aGlzLm9wdHMuZWxlbWVudCxmdW5jdGlvbihlKXtpLm9wdHMuZWxlbWVudC52YWwoZT9pLmlkKGUpOiIiKSxpLnVwZGF0ZVNlbGVjdGlvbihlKSxpLnNldFBsYWNlaG9sZGVyKCksdCYmaS50cmlnZ2VyQ2hhbmdlKHthZGRlZDplLHJlbW92ZWQ6cn0pfSl9fSxjbGVhclNlYXJjaDpmdW5jdGlvbigpe3RoaXMuc2VhcmNoLnZhbCgiIiksdGhpcy5mb2N1c3Nlci52YWwoIiIpfSxkYXRhOmZ1bmN0aW9uIEIodCl7dmFyIEIsZT0hMTtyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/KEI9dGhpcy5zZWxlY3Rpb24uZGF0YSgic2VsZWN0Mi1kYXRhIiksQj09biYmKEI9bnVsbCksQik6KGFyZ3VtZW50cy5sZW5ndGg+MSYmKGU9YXJndW1lbnRzWzFdKSx2b2lkKHQ/KEI9dGhpcy5kYXRhKCksdGhpcy5vcHRzLmVsZW1lbnQudmFsKHQ/dGhpcy5pZCh0KToiIiksdGhpcy51cGRhdGVTZWxlY3Rpb24odCksZSYmdGhpcy50cmlnZ2VyQ2hhbmdlKHthZGRlZDp0LHJlbW92ZWQ6Qn0pKTp0aGlzLmNsZWFyKGUpKSl9fSksTj1DKE8se2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbigpe3ZhciBlPXQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpLmF0dHIoeyJjbGFzcyI6InNlbGVjdDItY29udGFpbmVyIHNlbGVjdDItY29udGFpbmVyLW11bHRpIn0pLmh0bWwoWyI8dWwgY2xhc3M9J3NlbGVjdDItY2hvaWNlcyc+IiwiICA8bGkgY2xhc3M9J3NlbGVjdDItc2VhcmNoLWZpZWxkJz4iLCIgICAgPGxhYmVsIGZvcj0nJyBjbGFzcz0nc2VsZWN0Mi1vZmZzY3JlZW4nPjwvbGFiZWw+IiwiICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBhdXRvY29tcGxldGU9J29mZicgYXV0b2NvcnJlY3Q9J29mZicgYXV0b2NhcGl0YWxpemU9J29mZicgc3BlbGxjaGVjaz0nZmFsc2UnIGNsYXNzPSdzZWxlY3QyLWlucHV0Jz4iLCIgIDwvbGk+IiwiPC91bD4iLCI8ZGl2IGNsYXNzPSdzZWxlY3QyLWRyb3Agc2VsZWN0Mi1kcm9wLW11bHRpIHNlbGVjdDItZGlzcGxheS1ub25lJz4iLCIgICA8dWwgY2xhc3M9J3NlbGVjdDItcmVzdWx0cyc+IiwiICAgPC91bD4iLCI8L2Rpdj4iXS5qb2luKCIiKSk7cmV0dXJuIGV9LHByZXBhcmVPcHRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wYXJlbnQucHJlcGFyZU9wdHMuYXBwbHkodGhpcyxhcmd1bWVudHMpLG49dGhpcztyZXR1cm4ic2VsZWN0Ij09PWUuZWxlbWVudC5nZXQoMCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpP2UuaW5pdFNlbGVjdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBpPVtdO3QuZmluZCgib3B0aW9uIikuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWQmJiF0aGlzLmRpc2FibGVkfSkuZWFjaDIoZnVuY3Rpb24odCxlKXtpLnB1c2gobi5vcHRpb25Ub0RhdGEoZSkpfSksZShpKX06ImRhdGEiaW4gZSYmKGUuaW5pdFNlbGVjdGlvbj1lLmluaXRTZWxlY3Rpb258fGZ1bmN0aW9uKG4saSl7dmFyIHI9YyhuLnZhbCgpLGUuc2VwYXJhdG9yKSxvPVtdO2UucXVlcnkoe21hdGNoZXI6ZnVuY3Rpb24obixpLHMpe3ZhciBhPXQuZ3JlcChyLGZ1bmN0aW9uKHQpe3JldHVybiBsKHQsZS5pZChzKSl9KS5sZW5ndGg7cmV0dXJuIGEmJm8ucHVzaChzKSxhfSxjYWxsYmFjazp0LmlzRnVuY3Rpb24oaSk/ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sbj0wO248ci5sZW5ndGg7bisrKWZvcih2YXIgcz1yW25dLGE9MDthPG8ubGVuZ3RoO2ErKyl7dmFyIGM9b1thXTtpZihsKHMsZS5pZChjKSkpe3QucHVzaChjKSxvLnNwbGljZShhLDEpO2JyZWFrfX1pKHQpfTp0Lm5vb3B9KX0pLGV9LHNlbGVjdENob2ljZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmNvbnRhaW5lci5maW5kKCIuc2VsZWN0Mi1zZWFyY2gtY2hvaWNlLWZvY3VzIik7ZS5sZW5ndGgmJnQmJnRbMF09PWVbMF18fChlLmxlbmd0aCYmdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcigiY2hvaWNlLWRlc2VsZWN0ZWQiLGUpLGUucmVtb3ZlQ2xhc3MoInNlbGVjdDItc2VhcmNoLWNob2ljZS1mb2N1cyIpLHQmJnQubGVuZ3RoJiYodGhpcy5jbG9zZSgpLHQuYWRkQ2xhc3MoInNlbGVjdDItc2VhcmNoLWNob2ljZS1mb2N1cyIpLHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIoImNob2ljZS1zZWxlY3RlZCIsdCkpKX0sZGVzdHJveTpmdW5jdGlvbigpe3QoImxhYmVsW2Zvcj0nIit0aGlzLnNlYXJjaC5hdHRyKCJpZCIpKyInXSIpLmF0dHIoImZvciIsdGhpcy5vcHRzLmVsZW1lbnQuYXR0cigiaWQiKSksdGhpcy5wYXJlbnQuZGVzdHJveS5hcHBseSh0aGlzLGFyZ3VtZW50cyksRC5jYWxsKHRoaXMsInNlYXJjaENvbnRhaW5lciIsInNlbGVjdGlvbiIpfSxpbml0Q29udGFpbmVyOmZ1bmN0aW9uKCl7dmFyIGUsbj0iLnNlbGVjdDItY2hvaWNlcyI7dGhpcy5zZWFyY2hDb250YWluZXI9dGhpcy5jb250YWluZXIuZmluZCgiLnNlbGVjdDItc2VhcmNoLWZpZWxkIiksdGhpcy5zZWxlY3Rpb249ZT10aGlzLmNvbnRhaW5lci5maW5kKG4pO3ZhciBpPXRoaXM7dGhpcy5zZWxlY3Rpb24ub24oImNsaWNrIiwiLnNlbGVjdDItY29udGFpbmVyOm5vdCguc2VsZWN0Mi1jb250YWluZXItZGlzYWJsZWQpIC5zZWxlY3QyLXNlYXJjaC1jaG9pY2U6bm90KC5zZWxlY3QyLWxvY2tlZCkiLGZ1bmN0aW9uKGUpe2kuc2VhcmNoWzBdLmZvY3VzKCksaS5zZWxlY3RDaG9pY2UodCh0aGlzKSl9KSx0aGlzLnNlYXJjaC5hdHRyKCJpZCIsInMyaWRfYXV0b2dlbiIrSSgpKSx0aGlzLnNlYXJjaC5wcmV2KCkudGV4dCh0KCJsYWJlbFtmb3I9JyIrdGhpcy5vcHRzLmVsZW1lbnQuYXR0cigiaWQiKSsiJ10iKS50ZXh0KCkpLmF0dHIoImZvciIsdGhpcy5zZWFyY2guYXR0cigiaWQiKSksdGhpcy5zZWFyY2gub24oImlucHV0IHBhc3RlIix0aGlzLmJpbmQoZnVuY3Rpb24oKXt0aGlzLnNlYXJjaC5hdHRyKCJwbGFjZWhvbGRlciIpJiYwPT10aGlzLnNlYXJjaC52YWwoKS5sZW5ndGh8fHRoaXMuaXNJbnRlcmZhY2VFbmFibGVkKCkmJih0aGlzLm9wZW5lZCgpfHx0aGlzLm9wZW4oKSl9KSksdGhpcy5zZWFyY2guYXR0cigidGFiaW5kZXgiLHRoaXMuZWxlbWVudFRhYkluZGV4KSx0aGlzLmtleWRvd25zPTAsdGhpcy5zZWFyY2gub24oImtleWRvd24iLHRoaXMuYmluZChmdW5jdGlvbih0KXtpZih0aGlzLmlzSW50ZXJmYWNlRW5hYmxlZCgpKXsrK3RoaXMua2V5ZG93bnM7dmFyIG49ZS5maW5kKCIuc2VsZWN0Mi1zZWFyY2gtY2hvaWNlLWZvY3VzIiksaT1uLnByZXYoIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2U6bm90KC5zZWxlY3QyLWxvY2tlZCkiKSxyPW4ubmV4dCgiLnNlbGVjdDItc2VhcmNoLWNob2ljZTpub3QoLnNlbGVjdDItbG9ja2VkKSIpLG89Xyh0aGlzLnNlYXJjaCk7aWYobi5sZW5ndGgmJih0LndoaWNoPT1ZLkxFRlR8fHQud2hpY2g9PVkuUklHSFR8fHQud2hpY2g9PVkuQkFDS1NQQUNFfHx0LndoaWNoPT1ZLkRFTEVURXx8dC53aGljaD09WS5FTlRFUikpe3ZhciBzPW47cmV0dXJuIHQud2hpY2g9PVkuTEVGVCYmaS5sZW5ndGg/cz1pOnQud2hpY2g9PVkuUklHSFQ/cz1yLmxlbmd0aD9yOm51bGw6dC53aGljaD09PVkuQkFDS1NQQUNFP3RoaXMudW5zZWxlY3Qobi5maXJzdCgpKSYmKHRoaXMuc2VhcmNoLndpZHRoKDEwKSxzPWkubGVuZ3RoP2k6cik6dC53aGljaD09WS5ERUxFVEU/dGhpcy51bnNlbGVjdChuLmZpcnN0KCkpJiYodGhpcy5zZWFyY2gud2lkdGgoMTApLHM9ci5sZW5ndGg/cjpudWxsKTp0LndoaWNoPT1ZLkVOVEVSJiYocz1udWxsKSx0aGlzLnNlbGVjdENob2ljZShzKSxnKHQpLHZvaWQocyYmcy5sZW5ndGh8fHRoaXMub3BlbigpKX1pZigodC53aGljaD09PVkuQkFDS1NQQUNFJiYxPT10aGlzLmtleWRvd25zfHx0LndoaWNoPT1ZLkxFRlQpJiYwPT1vLm9mZnNldCYmIW8ubGVuZ3RoKXJldHVybiB0aGlzLnNlbGVjdENob2ljZShlLmZpbmQoIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2U6bm90KC5zZWxlY3QyLWxvY2tlZCkiKS5sYXN0KCkpLHZvaWQgZyh0KTtpZih0aGlzLnNlbGVjdENob2ljZShudWxsKSx0aGlzLm9wZW5lZCgpKXN3aXRjaCh0LndoaWNoKXtjYXNlIFkuVVA6Y2FzZSBZLkRPV046cmV0dXJuIHRoaXMubW92ZUhpZ2hsaWdodCh0LndoaWNoPT09WS5VUD8tMToxKSx2b2lkIGcodCk7Y2FzZSBZLkVOVEVSOnJldHVybiB0aGlzLnNlbGVjdEhpZ2hsaWdodGVkKCksdm9pZCBnKHQpO2Nhc2UgWS5UQUI6cmV0dXJuIHRoaXMuc2VsZWN0SGlnaGxpZ2h0ZWQoe25vRm9jdXM6ITB9KSx2b2lkIHRoaXMuY2xvc2UoKTtjYXNlIFkuRVNDOnJldHVybiB0aGlzLmNhbmNlbCh0KSx2b2lkIGcodCl9aWYodC53aGljaCE9PVkuVEFCJiYhWS5pc0NvbnRyb2wodCkmJiFZLmlzRnVuY3Rpb25LZXkodCkmJnQud2hpY2ghPT1ZLkJBQ0tTUEFDRSYmdC53aGljaCE9PVkuRVNDKXtpZih0LndoaWNoPT09WS5FTlRFUil7aWYodGhpcy5vcHRzLm9wZW5PbkVudGVyPT09ITEpcmV0dXJuO2lmKHQuYWx0S2V5fHx0LmN0cmxLZXl8fHQuc2hpZnRLZXl8fHQubWV0YUtleSlyZXR1cm59dGhpcy5vcGVuKCksdC53aGljaCE9PVkuUEFHRV9VUCYmdC53aGljaCE9PVkuUEFHRV9ET1dOfHxnKHQpLHQud2hpY2g9PT1ZLkVOVEVSJiZnKHQpfX19KSksdGhpcy5zZWFyY2gub24oImtleXVwIix0aGlzLmJpbmQoZnVuY3Rpb24odCl7dGhpcy5rZXlkb3ducz0wLHRoaXMucmVzaXplU2VhcmNoKCl9KSksdGhpcy5zZWFyY2gub24oImJsdXIiLHRoaXMuYmluZChmdW5jdGlvbihlKXt0aGlzLmNvbnRhaW5lci5yZW1vdmVDbGFzcygic2VsZWN0Mi1jb250YWluZXItYWN0aXZlIiksdGhpcy5zZWFyY2gucmVtb3ZlQ2xhc3MoInNlbGVjdDItZm9jdXNlZCIpLHRoaXMuc2VsZWN0Q2hvaWNlKG51bGwpLHRoaXMub3BlbmVkKCl8fHRoaXMuY2xlYXJTZWFyY2goKSxlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIodC5FdmVudCgic2VsZWN0Mi1ibHVyIikpfSkpLHRoaXMuY29udGFpbmVyLm9uKCJjbGljayIsbix0aGlzLmJpbmQoZnVuY3Rpb24oZSl7dGhpcy5pc0ludGVyZmFjZUVuYWJsZWQoKSYmKHQoZS50YXJnZXQpLmNsb3Nlc3QoIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2UiKS5sZW5ndGg+MHx8KHRoaXMuc2VsZWN0Q2hvaWNlKG51bGwpLHRoaXMuY2xlYXJQbGFjZWhvbGRlcigpLHRoaXMuY29udGFpbmVyLmhhc0NsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKXx8dGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcih0LkV2ZW50KCJzZWxlY3QyLWZvY3VzIikpLHRoaXMub3BlbigpLHRoaXMuZm9jdXNTZWFyY2goKSxlLnByZXZlbnREZWZhdWx0KCkpKX0pKSx0aGlzLmNvbnRhaW5lci5vbigiZm9jdXMiLG4sdGhpcy5iaW5kKGZ1bmN0aW9uKCl7dGhpcy5pc0ludGVyZmFjZUVuYWJsZWQoKSYmKHRoaXMuY29udGFpbmVyLmhhc0NsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKXx8dGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcih0LkV2ZW50KCJzZWxlY3QyLWZvY3VzIikpLHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKSx0aGlzLmRyb3Bkb3duLmFkZENsYXNzKCJzZWxlY3QyLWRyb3AtYWN0aXZlIiksdGhpcy5jbGVhclBsYWNlaG9sZGVyKCkpfSkpLHRoaXMuaW5pdENvbnRhaW5lcldpZHRoKCksdGhpcy5vcHRzLmVsZW1lbnQuYWRkQ2xhc3MoInNlbGVjdDItb2Zmc2NyZWVuIiksdGhpcy5jbGVhclNlYXJjaCgpfSxlbmFibGVJbnRlcmZhY2U6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudC5lbmFibGVJbnRlcmZhY2UuYXBwbHkodGhpcyxhcmd1bWVudHMpJiZ0aGlzLnNlYXJjaC5wcm9wKCJkaXNhYmxlZCIsIXRoaXMuaXNJbnRlcmZhY2VFbmFibGVkKCkpfSxpbml0U2VsZWN0aW9uOmZ1bmN0aW9uKCl7aWYoIiI9PT10aGlzLm9wdHMuZWxlbWVudC52YWwoKSYmIiI9PT10aGlzLm9wdHMuZWxlbWVudC50ZXh0KCkmJih0aGlzLnVwZGF0ZVNlbGVjdGlvbihbXSksdGhpcy5jbG9zZSgpLHRoaXMuY2xlYXJTZWFyY2goKSksdGhpcy5zZWxlY3R8fCIiIT09dGhpcy5vcHRzLmVsZW1lbnQudmFsKCkpe3ZhciB0PXRoaXM7dGhpcy5vcHRzLmluaXRTZWxlY3Rpb24uY2FsbChudWxsLHRoaXMub3B0cy5lbGVtZW50LGZ1bmN0aW9uKGUpe2UhPT1uJiZudWxsIT09ZSYmKHQudXBkYXRlU2VsZWN0aW9uKGUpLHQuY2xvc2UoKSx0LmNsZWFyU2VhcmNoKCkpfSl9fSxjbGVhclNlYXJjaDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0UGxhY2Vob2xkZXIoKSxlPXRoaXMuZ2V0TWF4U2VhcmNoV2lkdGgoKTt0IT09biYmMD09PXRoaXMuZ2V0VmFsKCkubGVuZ3RoJiZ0aGlzLnNlYXJjaC5oYXNDbGFzcygic2VsZWN0Mi1mb2N1c2VkIik9PT0hMT8odGhpcy5zZWFyY2gudmFsKHQpLmFkZENsYXNzKCJzZWxlY3QyLWRlZmF1bHQiKSx0aGlzLnNlYXJjaC53aWR0aChlPjA/ZTp0aGlzLmNvbnRhaW5lci5jc3MoIndpZHRoIikpKTp0aGlzLnNlYXJjaC52YWwoIiIpLndpZHRoKDEwKX0sY2xlYXJQbGFjZWhvbGRlcjpmdW5jdGlvbigpe3RoaXMuc2VhcmNoLmhhc0NsYXNzKCJzZWxlY3QyLWRlZmF1bHQiKSYmdGhpcy5zZWFyY2gudmFsKCIiKS5yZW1vdmVDbGFzcygic2VsZWN0Mi1kZWZhdWx0Iil9LG9wZW5pbmc6ZnVuY3Rpb24oKXt0aGlzLmNsZWFyUGxhY2Vob2xkZXIoKSx0aGlzLnJlc2l6ZVNlYXJjaCgpLHRoaXMucGFyZW50Lm9wZW5pbmcuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuZm9jdXNTZWFyY2goKSwiIj09PXRoaXMuc2VhcmNoLnZhbCgpJiZ0aGlzLm5leHRTZWFyY2hUZXJtIT1uJiYodGhpcy5zZWFyY2gudmFsKHRoaXMubmV4dFNlYXJjaFRlcm0pLHRoaXMuc2VhcmNoLnNlbGVjdCgpKSx0aGlzLnVwZGF0ZVJlc3VsdHMoITApLHRoaXMub3B0cy5zaG91bGRGb2N1c0lucHV0KHRoaXMpJiZ0aGlzLnNlYXJjaC5mb2N1cygpLHRoaXMub3B0cy5lbGVtZW50LnRyaWdnZXIodC5FdmVudCgic2VsZWN0Mi1vcGVuIikpfSxjbG9zZTpmdW5jdGlvbigpe3RoaXMub3BlbmVkKCkmJnRoaXMucGFyZW50LmNsb3NlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZm9jdXM6ZnVuY3Rpb24oKXt0aGlzLmNsb3NlKCksdGhpcy5zZWFyY2guZm9jdXMoKX0saXNGb2N1c2VkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VhcmNoLmhhc0NsYXNzKCJzZWxlY3QyLWZvY3VzZWQiKX0sdXBkYXRlU2VsZWN0aW9uOmZ1bmN0aW9uKGUpe3ZhciBuPVtdLGk9W10scj10aGlzO3QoZSkuZWFjaChmdW5jdGlvbigpe3Moci5pZCh0aGlzKSxuKTwwJiYobi5wdXNoKHIuaWQodGhpcykpLGkucHVzaCh0aGlzKSl9KSxlPWksdGhpcy5zZWxlY3Rpb24uZmluZCgiLnNlbGVjdDItc2VhcmNoLWNob2ljZSIpLnJlbW92ZSgpLHQoZSkuZWFjaChmdW5jdGlvbigpe3IuYWRkU2VsZWN0ZWRDaG9pY2UodGhpcyl9KSxyLnBvc3Rwcm9jZXNzUmVzdWx0cygpfSx0b2tlbml6ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc2VhcmNoLnZhbCgpO3Q9dGhpcy5vcHRzLnRva2VuaXplci5jYWxsKHRoaXMsdCx0aGlzLmRhdGEoKSx0aGlzLmJpbmQodGhpcy5vblNlbGVjdCksdGhpcy5vcHRzKSxudWxsIT10JiZ0IT1uJiYodGhpcy5zZWFyY2gudmFsKHQpLHQubGVuZ3RoPjAmJnRoaXMub3BlbigpKX0sb25TZWxlY3Q6ZnVuY3Rpb24odCxlKXt0aGlzLnRyaWdnZXJTZWxlY3QodCkmJiIiIT09dC50ZXh0JiYodGhpcy5hZGRTZWxlY3RlZENob2ljZSh0KSx0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKHt0eXBlOiJzZWxlY3RlZCIsdmFsOnRoaXMuaWQodCksY2hvaWNlOnR9KSx0aGlzLm5leHRTZWFyY2hUZXJtPXRoaXMub3B0cy5uZXh0U2VhcmNoVGVybSh0LHRoaXMuc2VhcmNoLnZhbCgpKSx0aGlzLmNsZWFyU2VhcmNoKCksdGhpcy51cGRhdGVSZXN1bHRzKCksIXRoaXMuc2VsZWN0JiZ0aGlzLm9wdHMuY2xvc2VPblNlbGVjdHx8dGhpcy5wb3N0cHJvY2Vzc1Jlc3VsdHModCwhMSx0aGlzLm9wdHMuY2xvc2VPblNlbGVjdD09PSEwKSx0aGlzLm9wdHMuY2xvc2VPblNlbGVjdD8odGhpcy5jbG9zZSgpLHRoaXMuc2VhcmNoLndpZHRoKDEwKSk6dGhpcy5jb3VudFNlbGVjdGFibGVSZXN1bHRzKCk+MD8odGhpcy5zZWFyY2gud2lkdGgoMTApLHRoaXMucmVzaXplU2VhcmNoKCksdGhpcy5nZXRNYXhpbXVtU2VsZWN0aW9uU2l6ZSgpPjAmJnRoaXMudmFsKCkubGVuZ3RoPj10aGlzLmdldE1heGltdW1TZWxlY3Rpb25TaXplKCk/dGhpcy51cGRhdGVSZXN1bHRzKCEwKTp0aGlzLm5leHRTZWFyY2hUZXJtIT1uJiYodGhpcy5zZWFyY2gudmFsKHRoaXMubmV4dFNlYXJjaFRlcm0pLHRoaXMudXBkYXRlUmVzdWx0cygpLHRoaXMuc2VhcmNoLnNlbGVjdCgpKSx0aGlzLnBvc2l0aW9uRHJvcGRvd24oKSk6KHRoaXMuY2xvc2UoKSx0aGlzLnNlYXJjaC53aWR0aCgxMCkpLHRoaXMudHJpZ2dlckNoYW5nZSh7YWRkZWQ6dH0pLGUmJmUubm9Gb2N1c3x8dGhpcy5mb2N1c1NlYXJjaCgpKX0sY2FuY2VsOmZ1bmN0aW9uKCl7dGhpcy5jbG9zZSgpLHRoaXMuZm9jdXNTZWFyY2goKX0sYWRkU2VsZWN0ZWRDaG9pY2U6ZnVuY3Rpb24oZSl7dmFyIGkscixvPSFlLmxvY2tlZCxzPXQoIjxsaSBjbGFzcz0nc2VsZWN0Mi1zZWFyY2gtY2hvaWNlJz4gICAgPGRpdj48L2Rpdj4gICAgPGEgaHJlZj0nIycgY2xhc3M9J3NlbGVjdDItc2VhcmNoLWNob2ljZS1jbG9zZScgdGFiaW5kZXg9Jy0xJz48L2E+PC9saT4iKSxhPXQoIjxsaSBjbGFzcz0nc2VsZWN0Mi1zZWFyY2gtY2hvaWNlIHNlbGVjdDItbG9ja2VkJz48ZGl2PjwvZGl2PjwvbGk+IiksbD1vP3M6YSxjPXRoaXMuaWQoZSksdT10aGlzLmdldFZhbCgpO2k9dGhpcy5vcHRzLmZvcm1hdFNlbGVjdGlvbihlLGwuZmluZCgiZGl2IiksdGhpcy5vcHRzLmVzY2FwZU1hcmt1cCksaSE9biYmbC5maW5kKCJkaXYiKS5yZXBsYWNlV2l0aCgiPGRpdj4iK2krIjwvZGl2PiIpLHI9dGhpcy5vcHRzLmZvcm1hdFNlbGVjdGlvbkNzc0NsYXNzKGUsbC5maW5kKCJkaXYiKSksciE9biYmbC5hZGRDbGFzcyhyKSxvJiZsLmZpbmQoIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2UtY2xvc2UiKS5vbigibW91c2Vkb3duIixnKS5vbigiY2xpY2sgZGJsY2xpY2siLHRoaXMuYmluZChmdW5jdGlvbihlKXt0aGlzLmlzSW50ZXJmYWNlRW5hYmxlZCgpJiYodGhpcy51bnNlbGVjdCh0KGUudGFyZ2V0KSksdGhpcy5zZWxlY3Rpb24uZmluZCgiLnNlbGVjdDItc2VhcmNoLWNob2ljZS1mb2N1cyIpLnJlbW92ZUNsYXNzKCJzZWxlY3QyLXNlYXJjaC1jaG9pY2UtZm9jdXMiKSxnKGUpLHRoaXMuY2xvc2UoKSx0aGlzLmZvY3VzU2VhcmNoKCkpfSkpLm9uKCJmb2N1cyIsdGhpcy5iaW5kKGZ1bmN0aW9uKCl7dGhpcy5pc0ludGVyZmFjZUVuYWJsZWQoKSYmKHRoaXMuY29udGFpbmVyLmFkZENsYXNzKCJzZWxlY3QyLWNvbnRhaW5lci1hY3RpdmUiKSx0aGlzLmRyb3Bkb3duLmFkZENsYXNzKCJzZWxlY3QyLWRyb3AtYWN0aXZlIikpfSkpLGwuZGF0YSgic2VsZWN0Mi1kYXRhIixlKSxsLmluc2VydEJlZm9yZSh0aGlzLnNlYXJjaENvbnRhaW5lciksdS5wdXNoKGMpLHRoaXMuc2V0VmFsKHUpfSx1bnNlbGVjdDpmdW5jdGlvbihlKXt2YXIgbixpLHI9dGhpcy5nZXRWYWwoKTtpZihlPWUuY2xvc2VzdCgiLnNlbGVjdDItc2VhcmNoLWNob2ljZSIpLDA9PT1lLmxlbmd0aCl0aHJvdyJJbnZhbGlkIGFyZ3VtZW50OiAiK2UrIi4gTXVzdCBiZSAuc2VsZWN0Mi1zZWFyY2gtY2hvaWNlIjtpZihuPWUuZGF0YSgic2VsZWN0Mi1kYXRhIikpe3ZhciBvPXQuRXZlbnQoInNlbGVjdDItcmVtb3ZpbmciKTtpZihvLnZhbD10aGlzLmlkKG4pLG8uY2hvaWNlPW4sdGhpcy5vcHRzLmVsZW1lbnQudHJpZ2dlcihvKSxvLmlzRGVmYXVsdFByZXZlbnRlZCgpKXJldHVybiExO2Zvcig7KGk9cyh0aGlzLmlkKG4pLHIpKT49MDspci5zcGxpY2UoaSwxKSx0aGlzLnNldFZhbChyKSx0aGlzLnNlbGVjdCYmdGhpcy5wb3N0cHJvY2Vzc1Jlc3VsdHMoKTtyZXR1cm4gZS5yZW1vdmUoKSx0aGlzLm9wdHMuZWxlbWVudC50cmlnZ2VyKHt0eXBlOiJzZWxlY3QyLXJlbW92ZWQiLHZhbDp0aGlzLmlkKG4pLGNob2ljZTpufSksdGhpcy50cmlnZ2VyQ2hhbmdlKHtyZW1vdmVkOm59KSwhMH19LHBvc3Rwcm9jZXNzUmVzdWx0czpmdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcy5nZXRWYWwoKSxyPXRoaXMucmVzdWx0cy5maW5kKCIuc2VsZWN0Mi1yZXN1bHQiKSxvPXRoaXMucmVzdWx0cy5maW5kKCIuc2VsZWN0Mi1yZXN1bHQtd2l0aC1jaGlsZHJlbiIpLGE9dGhpcztyLmVhY2gyKGZ1bmN0aW9uKHQsZSl7dmFyIG49YS5pZChlLmRhdGEoInNlbGVjdDItZGF0YSIpKTtzKG4saSk+PTAmJihlLmFkZENsYXNzKCJzZWxlY3QyLXNlbGVjdGVkIiksZS5maW5kKCIuc2VsZWN0Mi1yZXN1bHQtc2VsZWN0YWJsZSIpLmFkZENsYXNzKCJzZWxlY3QyLXNlbGVjdGVkIikpfSksby5lYWNoMihmdW5jdGlvbih0LGUpe2UuaXMoIi5zZWxlY3QyLXJlc3VsdC1zZWxlY3RhYmxlIil8fDAhPT1lLmZpbmQoIi5zZWxlY3QyLXJlc3VsdC1zZWxlY3RhYmxlOm5vdCguc2VsZWN0Mi1zZWxlY3RlZCkiKS5sZW5ndGh8fGUuYWRkQ2xhc3MoInNlbGVjdDItc2VsZWN0ZWQiKX0pLHRoaXMuaGlnaGxpZ2h0KCk9PS0xJiZuIT09ITEmJmEuaGlnaGxpZ2h0KDApLCF0aGlzLm9wdHMuY3JlYXRlU2VhcmNoQ2hvaWNlJiYhci5maWx0ZXIoIi5zZWxlY3QyLXJlc3VsdDpub3QoLnNlbGVjdDItc2VsZWN0ZWQpIikubGVuZ3RoPjAmJighdHx8dCYmIXQubW9yZSYmMD09PXRoaXMucmVzdWx0cy5maW5kKCIuc2VsZWN0Mi1uby1yZXN1bHRzIikubGVuZ3RoKSYmTChhLm9wdHMuZm9ybWF0Tm9NYXRjaGVzLCJmb3JtYXROb01hdGNoZXMiKSYmdGhpcy5yZXN1bHRzLmFwcGVuZCgiPGxpIGNsYXNzPSdzZWxlY3QyLW5vLXJlc3VsdHMnPiIreChhLm9wdHMuZm9ybWF0Tm9NYXRjaGVzLGEub3B0cy5lbGVtZW50LGEuc2VhcmNoLnZhbCgpKSsiPC9saT4iKX0sZ2V0TWF4U2VhcmNoV2lkdGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zZWxlY3Rpb24ud2lkdGgoKS11KHRoaXMuc2VhcmNoKX0scmVzaXplU2VhcmNoOmZ1bmN0aW9uKCl7dmFyIHQsZSxuLGkscixvPXUodGhpcy5zZWFyY2gpO3Q9eSh0aGlzLnNlYXJjaCkrMTAsZT10aGlzLnNlYXJjaC5vZmZzZXQoKS5sZWZ0LG49dGhpcy5zZWxlY3Rpb24ud2lkdGgoKSxpPXRoaXMuc2VsZWN0aW9uLm9mZnNldCgpLmxlZnQscj1uLShlLWkpLW8scjx0JiYocj1uLW8pLHI8NDAmJihyPW4tbykscjw9MCYmKHI9dCksdGhpcy5zZWFyY2gud2lkdGgoTWF0aC5mbG9vcihyKSl9LGdldFZhbDpmdW5jdGlvbigpe3ZhciB0O3JldHVybiB0aGlzLnNlbGVjdD8odD10aGlzLnNlbGVjdC52YWwoKSxudWxsPT09dD9bXTp0KToodD10aGlzLm9wdHMuZWxlbWVudC52YWwoKSxjKHQsdGhpcy5vcHRzLnNlcGFyYXRvcikpfSxzZXRWYWw6ZnVuY3Rpb24oZSl7dmFyIG47dGhpcy5zZWxlY3Q/dGhpcy5zZWxlY3QudmFsKGUpOihuPVtdLHQoZSkuZWFjaChmdW5jdGlvbigpe3ModGhpcyxuKTwwJiZuLnB1c2godGhpcyl9KSx0aGlzLm9wdHMuZWxlbWVudC52YWwoMD09PW4ubGVuZ3RoPyIiOm4uam9pbih0aGlzLm9wdHMuc2VwYXJhdG9yKSkpfSxidWlsZENoYW5nZURldGFpbHM6ZnVuY3Rpb24odCxlKXtmb3IodmFyIGU9ZS5zbGljZSgwKSx0PXQuc2xpY2UoMCksbj0wO248ZS5sZW5ndGg7bisrKWZvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKWwodGhpcy5vcHRzLmlkKGVbbl0pLHRoaXMub3B0cy5pZCh0W2ldKSkmJihlLnNwbGljZShuLDEpLG4+MCYmbi0tLHQuc3BsaWNlKGksMSksaS0tKTtyZXR1cm57YWRkZWQ6ZSxyZW1vdmVkOnR9fSx2YWw6ZnVuY3Rpb24oZSxpKXt2YXIgcixvPXRoaXM7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuZ2V0VmFsKCk7aWYocj10aGlzLmRhdGEoKSxyLmxlbmd0aHx8KHI9W10pLCFlJiYwIT09ZSlyZXR1cm4gdGhpcy5vcHRzLmVsZW1lbnQudmFsKCIiKSx0aGlzLnVwZGF0ZVNlbGVjdGlvbihbXSksdGhpcy5jbGVhclNlYXJjaCgpLHZvaWQoaSYmdGhpcy50cmlnZ2VyQ2hhbmdlKHthZGRlZDp0aGlzLmRhdGEoKSxyZW1vdmVkOnJ9KSk7aWYodGhpcy5zZXRWYWwoZSksdGhpcy5zZWxlY3QpdGhpcy5vcHRzLmluaXRTZWxlY3Rpb24odGhpcy5zZWxlY3QsdGhpcy5iaW5kKHRoaXMudXBkYXRlU2VsZWN0aW9uKSksaSYmdGhpcy50cmlnZ2VyQ2hhbmdlKHRoaXMuYnVpbGRDaGFuZ2VEZXRhaWxzKHIsdGhpcy5kYXRhKCkpKTtlbHNle2lmKHRoaXMub3B0cy5pbml0U2VsZWN0aW9uPT09bil0aHJvdyBuZXcgRXJyb3IoInZhbCgpIGNhbm5vdCBiZSBjYWxsZWQgaWYgaW5pdFNlbGVjdGlvbigpIGlzIG5vdCBkZWZpbmVkIik7dGhpcy5vcHRzLmluaXRTZWxlY3Rpb24odGhpcy5vcHRzLmVsZW1lbnQsZnVuY3Rpb24oZSl7dmFyIG49dC5tYXAoZSxvLmlkKTtvLnNldFZhbChuKSxvLnVwZGF0ZVNlbGVjdGlvbihlKSxvLmNsZWFyU2VhcmNoKCksaSYmby50cmlnZ2VyQ2hhbmdlKG8uYnVpbGRDaGFuZ2VEZXRhaWxzKHIsby5kYXRhKCkpKX0pfXRoaXMuY2xlYXJTZWFyY2goKX0sb25Tb3J0U3RhcnQ6ZnVuY3Rpb24oKXtpZih0aGlzLnNlbGVjdCl0aHJvdyBuZXcgRXJyb3IoIlNvcnRpbmcgb2YgZWxlbWVudHMgaXMgbm90IHN1cHBvcnRlZCB3aGVuIGF0dGFjaGVkIHRvIDxzZWxlY3Q+LiBBdHRhY2ggdG8gPGlucHV0IHR5cGU9J2hpZGRlbicvPiBpbnN0ZWFkLiIpO3RoaXMuc2VhcmNoLndpZHRoKDApLHRoaXMuc2VhcmNoQ29udGFpbmVyLmhpZGUoKX0sb25Tb3J0RW5kOmZ1bmN0aW9uKCl7dmFyIGU9W10sbj10aGlzO3RoaXMuc2VhcmNoQ29udGFpbmVyLnNob3coKSx0aGlzLnNlYXJjaENvbnRhaW5lci5hcHBlbmRUbyh0aGlzLnNlYXJjaENvbnRhaW5lci5wYXJlbnQoKSksdGhpcy5yZXNpemVTZWFyY2goKSx0aGlzLnNlbGVjdGlvbi5maW5kKCIuc2VsZWN0Mi1zZWFyY2gtY2hvaWNlIikuZWFjaChmdW5jdGlvbigpe2UucHVzaChuLm9wdHMuaWQodCh0aGlzKS5kYXRhKCJzZWxlY3QyLWRhdGEiKSkpfSksdGhpcy5zZXRWYWwoZSksdGhpcy50cmlnZ2VyQ2hhbmdlKCl9LGRhdGE6ZnVuY3Rpb24oZSxuKXt2YXIgaSxyLG89dGhpcztyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5zZWxlY3Rpb24uY2hpbGRyZW4oIi5zZWxlY3QyLXNlYXJjaC1jaG9pY2UiKS5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzKS5kYXRhKCJzZWxlY3QyLWRhdGEiKX0pLmdldCgpOihyPXRoaXMuZGF0YSgpLGV8fChlPVtdKSxpPXQubWFwKGUsZnVuY3Rpb24odCl7cmV0dXJuIG8ub3B0cy5pZCh0KX0pLHRoaXMuc2V0VmFsKGkpLHRoaXMudXBkYXRlU2VsZWN0aW9uKGUpLHRoaXMuY2xlYXJTZWFyY2goKSxuJiZ0aGlzLnRyaWdnZXJDaGFuZ2UodGhpcy5idWlsZENoYW5nZURldGFpbHMocix0aGlzLmRhdGEoKSkpLHZvaWQgMCl9fSksdC5mbi5zZWxlY3QyPWZ1bmN0aW9uKCl7dmFyIGkscixhLGwsYyx1PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSxkPVsidmFsIiwiZGVzdHJveSIsIm9wZW5lZCIsIm9wZW4iLCJjbG9zZSIsImZvY3VzIiwiaXNGb2N1c2VkIiwiY29udGFpbmVyIiwiZHJvcGRvd24iLCJvblNvcnRTdGFydCIsIm9uU29ydEVuZCIsImVuYWJsZSIsImRpc2FibGUiLCJyZWFkb25seSIsInBvc2l0aW9uRHJvcGRvd24iLCJkYXRhIiwic2VhcmNoIl0saD1bIm9wZW5lZCIsImlzRm9jdXNlZCIsImNvbnRhaW5lciIsImRyb3Bkb3duIl0scD1bInZhbCIsImRhdGEiXSxmPXtzZWFyY2g6ImV4dGVybmFsU2VhcmNoIn07cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2lmKDA9PT11Lmxlbmd0aHx8Im9iamVjdCI9PT1vKHVbMF0pKWk9MD09PXUubGVuZ3RoP3t9OnQuZXh0ZW5kKHt9LHVbMF0pLGkuZWxlbWVudD10KHRoaXMpLCJzZWxlY3QiPT09aS5lbGVtZW50LmdldCgwKS50YWdOYW1lLnRvTG93ZXJDYXNlKCk/Yz1pLmVsZW1lbnQucHJvcCgibXVsdGlwbGUiKTooYz1pLm11bHRpcGxlfHwhMSwidGFncyJpbiBpJiYoaS5tdWx0aXBsZT1jPSEwKSkscj1jP25ldyBlWyJjbGFzcyJdLm11bHRpOm5ldyBlWyJjbGFzcyJdLnNpbmdsZSxyLmluaXQoaSk7ZWxzZXtpZigic3RyaW5nIiE9dHlwZW9mIHVbMF0pdGhyb3ciSW52YWxpZCBhcmd1bWVudHMgdG8gc2VsZWN0MiBwbHVnaW46ICIrdTtpZihzKHVbMF0sZCk8MCl0aHJvdyJVbmtub3duIG1ldGhvZDogIit1WzBdO2lmKGw9bixyPXQodGhpcykuZGF0YSgic2VsZWN0MiIpLHI9PT1uKXJldHVybjtpZihhPXVbMF0sImNvbnRhaW5lciI9PT1hP2w9ci5jb250YWluZXI6ImRyb3Bkb3duIj09PWE/bD1yLmRyb3Bkb3duOihmW2FdJiYoYT1mW2FdKSxsPXJbYV0uYXBwbHkocix1LnNsaWNlKDEpKSkscyh1WzBdLGgpPj0wfHxzKHVbMF0scCk+PTAmJjE9PXUubGVuZ3RoKXJldHVybiExfX0pLGw9PT1uP3RoaXM6bH0sdC5mbi5zZWxlY3QyLmRlZmF1bHRzPXt3aWR0aDoiY29weSIsbG9hZE1vcmVQYWRkaW5nOjAsY2xvc2VPblNlbGVjdDohMCxvcGVuT25FbnRlcjohMCxjb250YWluZXJDc3M6e30sZHJvcGRvd25Dc3M6e30sY29udGFpbmVyQ3NzQ2xhc3M6IiIsZHJvcGRvd25Dc3NDbGFzczoiIixmb3JtYXRSZXN1bHQ6ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9W107cmV0dXJuIHcodGhpcy50ZXh0KHQpLG4udGVybSxyLGkpLHIuam9pbigiIil9LGZvcm1hdFNlbGVjdGlvbjpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQ/aSh0aGlzLnRleHQodCkpOm59LHNvcnRSZXN1bHRzOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdH0sZm9ybWF0UmVzdWx0Q3NzQ2xhc3M6ZnVuY3Rpb24odCl7cmV0dXJuIHQuY3NzfSxmb3JtYXRTZWxlY3Rpb25Dc3NDbGFzczpmdW5jdGlvbih0LGUpe3JldHVybiBufSxtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaDowLG1pbmltdW1JbnB1dExlbmd0aDowLG1heGltdW1JbnB1dExlbmd0aDpudWxsLG1heGltdW1TZWxlY3Rpb25TaXplOjAsaWQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PW4/bnVsbDp0LmlkfSx0ZXh0OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZ0aGlzLmRhdGEmJnRoaXMuZGF0YS50ZXh0P3QuaXNGdW5jdGlvbih0aGlzLmRhdGEudGV4dCk/dGhpcy5kYXRhLnRleHQoZSk6ZVt0aGlzLmRhdGEudGV4dF06ZS50ZXh0fSxtYXRjaGVyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHIoIiIrZSkudG9VcHBlckNhc2UoKS5pbmRleE9mKHIoIiIrdCkudG9VcHBlckNhc2UoKSk+PTB9LHNlcGFyYXRvcjoiLCIsdG9rZW5TZXBhcmF0b3JzOltdLHRva2VuaXplcjpFLGVzY2FwZU1hcmt1cDpNLGJsdXJPbkNoYW5nZTohMSxzZWxlY3RPbkJsdXI6ITEsYWRhcHRDb250YWluZXJDc3NDbGFzczpmdW5jdGlvbih0KXtyZXR1cm4gdH0sYWRhcHREcm9wZG93bkNzc0NsYXNzOmZ1bmN0aW9uKHQpe3JldHVybiBudWxsfSxuZXh0U2VhcmNoVGVybTpmdW5jdGlvbih0LGUpe3JldHVybiBufSxzZWFyY2hJbnB1dFBsYWNlaG9sZGVyOiIiLGNyZWF0ZVNlYXJjaENob2ljZVBvc2l0aW9uOiJ0b3AiLHNob3VsZEZvY3VzSW5wdXQ6ZnVuY3Rpb24odCl7dmFyIGU9Im9udG91Y2hzdGFydCJpbiB3aW5kb3d8fG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzPjA7cmV0dXJuIWV8fCEodC5vcHRzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoPDApfX0sdC5mbi5zZWxlY3QyLmxvY2FsZXM9W10sdC5mbi5zZWxlY3QyLmxvY2FsZXMuZW49e2Zvcm1hdE1hdGNoZXM6ZnVuY3Rpb24odCl7cmV0dXJuIDE9PT10PyJPbmUgcmVzdWx0IGlzIGF2YWlsYWJsZSwgcHJlc3MgZW50ZXIgdG8gc2VsZWN0IGl0LiI6dCsiIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgdXNlIHVwIGFuZCBkb3duIGFycm93IGtleXMgdG8gbmF2aWdhdGUuIn0sZm9ybWF0Tm9NYXRjaGVzOmZ1bmN0aW9uKCl7cmV0dXJuIk5vIG1hdGNoZXMgZm91bmQifSxmb3JtYXRBamF4RXJyb3I6ZnVuY3Rpb24odCxlLG4pe3JldHVybiJMb2FkaW5nIGZhaWxlZCJ9LGZvcm1hdElucHV0VG9vU2hvcnQ6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLXQubGVuZ3RoO3JldHVybiJQbGVhc2UgZW50ZXIgIituKyIgb3IgbW9yZSBjaGFyYWN0ZXIiKygxPT1uPyIiOiJzIil9LGZvcm1hdElucHV0VG9vTG9uZzpmdW5jdGlvbih0LGUpe3ZhciBuPXQubGVuZ3RoLWU7cmV0dXJuIlBsZWFzZSBkZWxldGUgIituKyIgY2hhcmFjdGVyIisoMT09bj8iIjoicyIpfSxmb3JtYXRTZWxlY3Rpb25Ub29CaWc6ZnVuY3Rpb24odCl7cmV0dXJuIllvdSBjYW4gb25seSBzZWxlY3QgIit0KyIgaXRlbSIrKDE9PXQ/IiI6InMiKX0sZm9ybWF0TG9hZE1vcmU6ZnVuY3Rpb24odCl7cmV0dXJuIkxvYWRpbmcgbW9yZSByZXN1bHRz4oCmIn0sZm9ybWF0U2VhcmNoaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIlNlYXJjaGluZ+KApiJ9fSx0LmV4dGVuZCh0LmZuLnNlbGVjdDIuZGVmYXVsdHMsdC5mbi5zZWxlY3QyLmxvY2FsZXMuZW4pLHQuZm4uc2VsZWN0Mi5hamF4RGVmYXVsdHM9e3RyYW5zcG9ydDp0LmFqYXgscGFyYW1zOnt0eXBlOiJHRVQiLGNhY2hlOiExLGRhdGFUeXBlOiJqc29uIn19LGU9e3F1ZXJ5OnthamF4OlMsbG9jYWw6VCx0YWdzOmt9LHV0aWw6e2RlYm91bmNlOnAsbWFya01hdGNoOncsZXNjYXBlTWFya3VwOk0sc3RyaXBEaWFjcml0aWNzOnJ9LCJjbGFzcyI6eyJhYnN0cmFjdCI6TyxzaW5nbGU6UCxtdWx0aTpOfX19fSh0KSxlfS5hcHBseShlLGkpLC8qCgkJQ29weXJpZ2h0IDIwMTIgSWdvciBWYXluYmVyZwoKCQlWZXJzaW9uOiBAQHZlckBAIFRpbWVzdGFtcDogQEB0aW1lc3RhbXBAQAoKCQlUaGlzIHNvZnR3YXJlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiQXBhY2hlIExpY2Vuc2UiKSBvciB0aGUgR05VCgkJR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9uIDIgKHRoZSAiR1BMIExpY2Vuc2UiKS4gWW91IG1heSBjaG9vc2UgZWl0aGVyIGxpY2Vuc2UgdG8gZ292ZXJuIHlvdXIKCQl1c2Ugb2YgdGhpcyBzb2Z0d2FyZSBvbmx5IHVwb24gdGhlIGNvbmRpdGlvbiB0aGF0IHlvdSBhY2NlcHQgYWxsIG9mIHRoZSB0ZXJtcyBvZiBlaXRoZXIgdGhlIEFwYWNoZQoJCUxpY2Vuc2Ugb3IgdGhlIEdQTCBMaWNlbnNlLgoKCQlZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIEFwYWNoZSBMaWNlbnNlIGFuZCB0aGUgR1BMIExpY2Vuc2UgYXQ6CgoJCSAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCQkgICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC0yLjAuaHRtbAoKCQlVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZQoJCUFwYWNoZSBMaWNlbnNlIG9yIHRoZSBHUEwgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IKCQlDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIEFwYWNoZSBMaWNlbnNlIGFuZCB0aGUgR1BMIExpY2Vuc2UgZm9yCgkJdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlIGFuZCB0aGUgR1BMIExpY2Vuc2UuCgkJKi8KCSEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSl7fSxmdW5jdGlvbih0LGUpe30sZnVuY3Rpb24odCxlKXt9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oNTA5KSxuKDUwOCldLHI9ZnVuY3Rpb24odCxlKXtyZXR1cm57VGFiOnQsVGFiczplfX0uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbih0LGUsbil7dmFyIGkscjtpPVtuKDYxMyksbig2MTQpLG4oNjE1KV0scj1mdW5jdGlvbih0LGUsbil7cmV0dXJue0ZpbGVVcGxvYWQ6dCxVcGxvYWRlcjplLFVwbG9hZElmcmFtZTpufX0uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbih0LGUsbil7dmFyIGkscjtpPVtuKDMzMSksbig0NzEpLG4oNDcwKV0scj1mdW5jdGlvbih0LGUsbil7dmFyIGk9ZS50cGwoJ1x0ICAgIDxpbnB1dCB0eXBlPSJmaWxlIiBuYW1lPSJmaWxlIiBjbGFzcz0ibS1maWxlIj5cdCAgICA8ZGl2IGNsYXNzPSJmYWNhZGUiPlx0ICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJ0ZXh0LWZpZWxkLWRlZmF1bHQiIGRpc2FibGVkPlx0ICAgICAge3t7aW1nIHNyYz0iL2ltZy91aS9idXR0b24vZmlsZS1icm93c2UtMDEucG5nIiBhbHQ9IkJyb3dzZSBmaWxlcy4uLiIgY2xhc3M9ImJyb3dzZSJ9fX1cdCAgICA8L2Rpdj5cdCAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBjbGFzcz0iaGlkZSIgbmFtZT0iX3hzcmZUb2tlbiIgdmFsdWU9Int7dG9rZW59fSI+XHQgICcpLHI9bi5leHRlbmQoe3RlbXBsYXRlOmksY2xhc3NOYW1lOiJmaWxlLWlucHV0LWZhY2FkZSBtYXJnaW4tdG9wLTEwIG1hcmdpbi1idG0tMTAgY2xlYXJmaXgiLGV2ZW50czp7ImNoYW5nZSAubS1maWxlIjoidXBkYXRlRGlzcGxheVZhbCJ9LHVwZGF0ZURpc3BsYXlWYWw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldEZpbGVuYW1lKCk7dC5tYXRjaCgvXkM6XFxmYWtlcGF0aC8pJiYodD10LnJlcGxhY2UoIkM6XFxmYWtlcGF0aFxcIiwiIikpLHRoaXMudXBkYXRlRGlzcGxheSh0KX0sdXBkYXRlRGlzcGxheTpmdW5jdGlvbih0KXt0aGlzLiQoIi50ZXh0LWZpZWxkLWRlZmF1bHQiKS52YWwodCl9LGdldEZpbGVuYW1lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJCgiLm0tZmlsZSIpLnZhbCgpfSxyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgZT10KCIjX3hzcmZUb2tlbiIpLnRleHQoKTtyZXR1cm4gdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKHt0b2tlbjplfSkpLHRoaXN9fSk7cmV0dXJuIHJ9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7aT1bbig0OTQpLG4oNDcwKSxuKDYxNSksbig2MTYpXSxyPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPWUuZXh0ZW5kKHtjbGFzc05hbWU6InVwbG9hZC1ob2xkZXIiLGluaXRpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZnJhbWU9bmV3IG4oe25hbWU6dGhpcy5jaWR9KSx0aGlzLmFkZCh0aGlzLmlmcmFtZSxudWxsLCEwKSx0aGlzLnVwbG9hZEZvcm09bmV3IGkoe3RhcmdldDp0aGlzLmNpZCxlbmRwb2ludDp0aGlzLm9wdGlvbnMuZW5kcG9pbnR9KSx0aGlzLmFkZCh0aGlzLnVwbG9hZEZvcm0sbnVsbCwhMCksdGhpcy5saXN0ZW5Ubyh0aGlzLmlmcmFtZSx0LlVQTE9BRF9ET05FLGZ1bmN0aW9uKCl7dGhpcy51cGxvYWRGb3JtLnVwbG9hZERvbmUoKX0pLHRoaXN9fSk7cmV0dXJuIHJ9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7aT1bbig0OTQpLG4oNDcwKSxuKDUwNildLHI9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmV4dGVuZCh7dGFnTmFtZToiaWZyYW1lIixjbGFzc05hbWU6ImhpZGUiLGF0dHJpYnV0ZXM6ZnVuY3Rpb24oKXtyZXR1cm57bmFtZTp0aGlzLm9wdGlvbnMubmFtZSxpZDp0aGlzLm9wdGlvbnMubmFtZX19LGV2ZW50czp7bG9hZDpmdW5jdGlvbigpe3RyeXt2YXIgZT10aGlzLiRlbC5jb250ZW50cygpLnRleHQoKTtpZihlKXJldHVybiB2b2lkIHRoaXMudHJpZ2dlcih0LlVQTE9BRF9ET05FLEpTT04ucGFyc2UoZSkpfWNhdGNoKG4pe310aGlzLnRyaWdnZXIodC5VUExPQURfRU1QVFlfQ09OVEVOVCl9fX0pO3JldHVybiBufS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oNDcwKSxuKDYxMyksbig2MTcpXSxyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LmV4dGVuZCh7dGFnTmFtZToiZm9ybSIsY2xhc3NOYW1lOiJjbGVhcmZpeCBwYWRkaW5nLWJ0bS0xMCIsYXR0cmlidXRlczpmdW5jdGlvbigpe3JldHVybnttZXRob2Q6InBvc3QiLGVuY3R5cGU6Im11bHRpcGFydC9mb3JtLWRhdGEiLGFjdGlvbjp0aGlzLm9wdGlvbnMuZW5kcG9pbnQsdGFyZ2V0OnRoaXMub3B0aW9ucy50YXJnZXR9fSxldmVudHM6e3N1Ym1pdDpmdW5jdGlvbigpe3RoaXMuc3VibWl0QnRuLmRpc2FibGUoITApfX0saW5pdGlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbGVVcGxvYWQ9bmV3IGUsdGhpcy5hZGQodGhpcy5maWxlVXBsb2FkKSx0aGlzLnN1Ym1pdEJ0bj1uZXcgbix0aGlzLmFkZCh0aGlzLnN1Ym1pdEJ0biksdGhpc30sdXBsb2FkRG9uZTpmdW5jdGlvbigpe3RoaXMuc3VibWl0QnRuLmRpc2FibGUoITEpfX0pO3JldHVybiBpfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oNDcwKV0scj1mdW5jdGlvbih0KXt2YXIgZT10LmV4dGVuZCh7dGFnTmFtZToiaW5wdXQiLGNsYXNzTmFtZToiYnV0dG9uIixhdHRyaWJ1dGVzOnt0eXBlOiJzdWJtaXQiLHZhbHVlOiJVcGxvYWQgTG9nbyJ9LGRpc2FibGU6ZnVuY3Rpb24odCl7dGhpcy4kZWwucHJvcCgiZGlzYWJsZWQiLHQpfX0pO3JldHVybiBlfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oNjMxKSxuKDY4OCksbig2NDIpLG4oNjQ1KSxuKDY1OCksbig2NjIpLG4oNjY0KSxuKDY2Nyksbig2NjkpLG4oNjcwKSxuKDY3MSksbig2NzMpLG4oNjc0KSxuKDY3NSksbig2NzYpLG4oNjc5KSxuKDY4MCksbig2ODEpLG4oNjgyKSxuKDY4NCksbig2ODYpLG4oNjE5KSxuKDY5NCksbig2OTUpLG4oNjk4KSxuKDY5OSksbig3MDEpLG4oNzAyKSxuKDcwMyksbig3MDQpLG4oNzA1KSxuKDcwNiksbig3MDcpLG4oNzA4KSxuKDYzMyksbig3MDkpLG4oNzE1KSxuKDcxNiksbig2MzgpLG4oNzE5KSxuKDcyMildLHI9ZnVuY3Rpb24odCxlLG4saSxyLG8scyxhLGwsYyx1LGQsaCxwLGYsbSxfLGcsdix5LGIsdyxNLFMsVCxrLEwseCxBLEUsRCxDLFksTyxQLE4sSSxSLGosSCxGKXtyZXR1cm4gdC5leHRlbmQoe3JvdXRlczp7IiI6InByaW1hcnlBdXRoIixzaWduaW46InByaW1hcnlBdXRoIiwic2lnbmluL3ZlcmlmeS9kdW8vd2ViIjoidmVyaWZ5RHVvIiwic2lnbmluL3ZlcmlmeS9maWRvL3dlYmF1dGhuIjoidmVyaWZ5V2luZG93c0hlbGxvIiwic2lnbmluL3ZlcmlmeS9maWRvL3UyZiI6InZlcmlmeVUyRiIsInNpZ25pbi92ZXJpZnkvOnByb3ZpZGVyLzpmYWN0b3JUeXBlIjoidmVyaWZ5Iiwic2lnbmluL2Vucm9sbCI6ImVucm9sbENob2ljZXMiLCJzaWduaW4vZW5yb2xsL2R1by93ZWIiOiJlbnJvbGxEdW8iLCJzaWduaW4vZW5yb2xsL29rdGEvcXVlc3Rpb24iOiJlbnJvbGxRdWVzdGlvbiIsInNpZ25pbi9lbnJvbGwvb2t0YS9zbXMiOiJlbnJvbGxTbXMiLCJzaWduaW4vZW5yb2xsL29rdGEvY2FsbCI6ImVucm9sbENhbGwiLCJzaWduaW4vZW5yb2xsLWFjdGl2YXRlL29rdGEvc21zIjoiZW5yb2xsU21zIiwic2lnbmluL2Vucm9sbC9yc2EvdG9rZW4iOiJlbnJvbGxSc2EiLCJzaWduaW4vZW5yb2xsL2RlbF9vYXRoL3Rva2VuIjoiZW5yb2xsT25QcmVtIiwic2lnbmluL2Vucm9sbC9zeW1hbnRlYy90b2tlbiI6ImVucm9sbFN5bWFudGVjVmlwIiwic2lnbmluL2Vucm9sbC95dWJpY28vdG9rZW46aGFyZHdhcmUiOiJlbnJvbGxZdWJpa2V5Iiwic2lnbmluL2Vucm9sbC9maWRvL3dlYmF1dGhuIjoiZW5yb2xsV2luZG93c0hlbGxvIiwic2lnbmluL2Vucm9sbC9maWRvL3UyZiI6ImVucm9sbFUyRiIsInNpZ25pbi9lbnJvbGwvOnByb3ZpZGVyLzpmYWN0b3JUeXBlIjoiZW5yb2xsVG90cEZhY3RvciIsInNpZ25pbi9lbnJvbGwtYWN0aXZhdGUvb2t0YS9wdXNoIjoic2NhbkJhcmNvZGVQdXNoRmFjdG9yIiwic2lnbmluL2Vucm9sbC1hY3RpdmF0ZS9va3RhL3B1c2gvbWFudWFsIjoibWFudWFsU2V0dXBQdXNoRmFjdG9yIiwic2lnbmluL2Vucm9sbC1hY3RpdmF0ZS9va3RhL3B1c2gvc2VudCI6ImFjdGl2YXRpb25MaW5rU2VudCIsInNpZ25pbi9lbnJvbGwtYWN0aXZhdGUvb2t0YS90b2tlbjpzb2Z0d2FyZTp0b3RwL3Bhc3Njb2RlIjoiZW50ZXJQYXNzY29kZUluUHVzaEVucm9sbG1lbnRGbG93Iiwic2lnbmluL2Vucm9sbC1hY3RpdmF0ZS86cHJvdmlkZXIvOmZhY3RvclR5cGUiOiJzY2FuQmFyY29kZVRvdHBGYWN0b3IiLCJzaWduaW4vZW5yb2xsLWFjdGl2YXRlLzpwcm92aWRlci86ZmFjdG9yVHlwZS9hY3RpdmF0ZSI6ImFjdGl2YXRlVG90cEZhY3RvciIsInNpZ25pbi9lbnJvbGwtYWN0aXZhdGUvOnByb3ZpZGVyLzpmYWN0b3JUeXBlL21hbnVhbCI6Im1hbnVhbFNldHVwVG90cEZhY3RvciIsInNpZ25pbi9wYXNzd29yZC1leHBpcmVkIjoicGFzc3dvcmRFeHBpcmVkIiwic2lnbmluL2N1c3RvbS1wYXNzd29yZC1leHBpcmVkIjoiY3VzdG9tUGFzc3dvcmRFeHBpcmVkIiwic2lnbmluL2ZvcmdvdC1wYXNzd29yZCI6ImZvcmdvdFBhc3N3b3JkIiwic2lnbmluL3JlY292ZXJ5LWNoYWxsZW5nZSI6InJlY292ZXJ5Q2hhbGxlbmdlIiwic2lnbmluL3JlY292ZXJ5LWVtYWlsZWQiOiJyZWNvdmVyeUVtYWlsU2VudCIsInNpZ25pbi9yZWNvdmVyeS1xdWVzdGlvbiI6InJlY292ZXJ5UXVlc3Rpb24iLCJzaWduaW4vcGFzc3dvcmQtcmVzZXQiOiJwYXNzd29yZFJlc2V0Iiwic2lnbmluL3Jlc2V0LXBhc3N3b3JkLzp0b2tlbiI6InJlY292ZXJ5TG9hZGluZyIsInNpZ25pbi91c2VyLXVubG9jay86dG9rZW4iOiJyZWNvdmVyeUxvYWRpbmciLCJzaWduaW4vcmVjb3ZlcnkvOnRva2VuIjoicmVjb3ZlcnlMb2FkaW5nIiwic2lnbmluL3VubG9jay1lbWFpbGVkIjoidW5sb2NrRW1haWxTZW50Iiwic2lnbmluL3VubG9jayI6InVubG9ja0FjY291bnQiLCJzaWduaW4vYWNjb3VudC11bmxvY2tlZCI6ImFjY291bnRVbmxvY2tlZCIsInNpZ25pbi9yZWZyZXNoLWF1dGgtc3RhdGUoLzp0b2tlbikiOiJyZWZyZXNoQXV0aFN0YXRlIiwic2lnbmluL3JlZ2lzdGVyIjoicmVnaXN0ZXIiLCJzaWduaW4vcmVnaXN0ZXItY29tcGxldGUiOiJyZWdpc3RlckNvbXBsZXRlIiwic2lnbmluL2NvbnNlbnQiOiJjb25zZW50UmVxdWlyZWQiLCIqd2lsZGNhcmQiOiJwcmltYXJ5QXV0aCJ9LHN0YXRlTGVzc1JvdXRlSGFuZGxlcnM6WyJwcmltYXJ5QXV0aCIsImZvcmdvdFBhc3N3b3JkIiwicmVjb3ZlcnlMb2FkaW5nIiwidW5sb2NrQWNjb3VudCIsInJlZnJlc2hBdXRoU3RhdGUiLCJyZWdpc3RlciIsInJlZ2lzdGVyQ29tcGxldGUiXSxwcmltYXJ5QXV0aDpmdW5jdGlvbigpe3RoaXMucmVuZGVyKGUse0JlYWNvbjpqfSl9LHZlcmlmeUR1bzpmdW5jdGlvbigpe3RoaXMucmVuZGVyKG4se3Byb3ZpZGVyOiJEVU8iLGZhY3RvclR5cGU6IndlYiIsQmVhY29uOkh9KX0sdmVyaWZ5V2luZG93c0hlbGxvOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIocix7cHJvdmlkZXI6IkZJRE8iLGZhY3RvclR5cGU6IndlYmF1dGhuIixCZWFjb246SH0pfSx2ZXJpZnlVMkY6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihvLHtwcm92aWRlcjoiRklETyIsZmFjdG9yVHlwZToidTJmIixCZWFjb246SH0pfSx2ZXJpZnk6ZnVuY3Rpb24odCxlKXt0aGlzLnJlbmRlcihpLHtwcm92aWRlcjp0LnRvVXBwZXJDYXNlKCksZmFjdG9yVHlwZTplLEJlYWNvbjpIfSl9LGVucm9sbENob2ljZXM6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihzLHtCZWFjb246an0pfSxlbnJvbGxEdW86ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihhLHtwcm92aWRlcjoiRFVPIixmYWN0b3JUeXBlOiJ3ZWIiLEJlYWNvbjpIfSl9LGVucm9sbFF1ZXN0aW9uOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIobCx7cHJvdmlkZXI6Ik9LVEEiLGZhY3RvclR5cGU6InF1ZXN0aW9uIixCZWFjb246SH0pfSxlbnJvbGxTbXM6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcih1LHtwcm92aWRlcjoiT0tUQSIsZmFjdG9yVHlwZToic21zIixCZWFjb246SH0pfSxlbnJvbGxDYWxsOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIodSx7cHJvdmlkZXI6Ik9LVEEiLGZhY3RvclR5cGU6ImNhbGwiLEJlYWNvbjpIfSl9LGVucm9sbFJzYTpmdW5jdGlvbigpe3RoaXMucmVuZGVyKGQse3Byb3ZpZGVyOiJSU0EiLGZhY3RvclR5cGU6InRva2VuIixCZWFjb246SH0pfSxlbnJvbGxPblByZW06ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihkLHtwcm92aWRlcjoiREVMX09BVEgiLGZhY3RvclR5cGU6InRva2VuIixCZWFjb246SH0pfSxlbnJvbGxTeW1hbnRlY1ZpcDpmdW5jdGlvbigpe3RoaXMucmVuZGVyKGgse3Byb3ZpZGVyOiJTWU1BTlRFQyIsZmFjdG9yVHlwZToidG9rZW4iLEJlYWNvbjpIfSl9LGVucm9sbFl1YmlrZXk6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihwLHtwcm92aWRlcjoiWVVCSUNPIixmYWN0b3JUeXBlOiJ0b2tlbjpoYXJkd2FyZSIsQmVhY29uOkh9KX0sZW5yb2xsVG90cEZhY3RvcjpmdW5jdGlvbih0LGUpe3RoaXMucmVuZGVyKGYse3Byb3ZpZGVyOnQudG9VcHBlckNhc2UoKSxmYWN0b3JUeXBlOmUsQmVhY29uOkh9KX0sZW5yb2xsV2luZG93c0hlbGxvOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIoYyx7cHJvdmlkZXI6IkZJRE8iLGZhY3RvclR5cGU6IndlYmF1dGhuIixCZWFjb246SH0pfSxlbnJvbGxVMkY6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihtLHtwcm92aWRlcjoiRklETyIsZmFjdG9yVHlwZToidTJmIixCZWFjb246SH0pfSxzY2FuQmFyY29kZVRvdHBGYWN0b3I6ZnVuY3Rpb24odCxlKXt0aGlzLnJlbmRlcihfLHtwcm92aWRlcjp0LnRvVXBwZXJDYXNlKCksZmFjdG9yVHlwZTplLEJlYWNvbjpIfSl9LHNjYW5CYXJjb2RlUHVzaEZhY3RvcjpmdW5jdGlvbigpe3RoaXMucmVuZGVyKGcse3Byb3ZpZGVyOiJPS1RBIixmYWN0b3JUeXBlOiJwdXNoIixCZWFjb246SH0pfSxhY3RpdmF0ZVRvdHBGYWN0b3I6ZnVuY3Rpb24odCxlKXt0aGlzLnJlbmRlcih2LHtwcm92aWRlcjp0LnRvVXBwZXJDYXNlKCksZmFjdG9yVHlwZTplLEJlYWNvbjpIfSl9LG1hbnVhbFNldHVwVG90cEZhY3RvcjpmdW5jdGlvbih0LGUpe3RoaXMucmVuZGVyKHkse3Byb3ZpZGVyOnQudG9VcHBlckNhc2UoKSxmYWN0b3JUeXBlOmUsQmVhY29uOkh9KX0sbWFudWFsU2V0dXBQdXNoRmFjdG9yOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIoYix7cHJvdmlkZXI6Ik9LVEEiLGZhY3RvclR5cGU6InB1c2giLEJlYWNvbjpIfSl9LGFjdGl2YXRpb25MaW5rU2VudDpmdW5jdGlvbigpe3RoaXMucmVuZGVyKHcse3Byb3ZpZGVyOiJPS1RBIixmYWN0b3JUeXBlOiJwdXNoIixCZWFjb246SH0pfSxlbnRlclBhc3Njb2RlSW5QdXNoRW5yb2xsbWVudEZsb3c6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihNLHtwcm92aWRlcjoiT0tUQSIsZmFjdG9yVHlwZToidG9rZW46c29mdHdhcmU6dG90cCIsQmVhY29uOkh9KX0scGFzc3dvcmRFeHBpcmVkOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIoUyx7QmVhY29uOmp9KX0sY3VzdG9tUGFzc3dvcmRFeHBpcmVkOmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIoVCx7QmVhY29uOmp9KX0sZm9yZ290UGFzc3dvcmQ6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihrKX0scmVjb3ZlcnlDaGFsbGVuZ2U6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihMLHtCZWFjb246an0pfSxyZWNvdmVyeUVtYWlsU2VudDpmdW5jdGlvbigpe3RoaXMucmVuZGVyKHgse0JlYWNvbjpqfSl9LHVubG9ja0VtYWlsU2VudDpmdW5jdGlvbigpe3RoaXMucmVuZGVyKE8se0JlYWNvbjpqfSl9LHJlY292ZXJ5UXVlc3Rpb246ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihBLHtCZWFjb246an0pfSxwYXNzd29yZFJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5yZW5kZXIoRSx7QmVhY29uOmp9KX0scmVjb3ZlcnlMb2FkaW5nOmZ1bmN0aW9uKHQpe3RoaXMucmVuZGVyKEQse3Rva2VuOnQsQmVhY29uOmp9KX0sdW5sb2NrQWNjb3VudDpmdW5jdGlvbigpe3RoaXMucmVuZGVyKEMpfSxhY2NvdW50VW5sb2NrZWQ6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihZLHtCZWFjb246an0pfSxyZWZyZXNoQXV0aFN0YXRlOmZ1bmN0aW9uKHQpe3RoaXMucmVuZGVyKFAse3Rva2VuOnQsQmVhY29uOmp9KX0scmVnaXN0ZXI6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihOKX0scmVnaXN0ZXJDb21wbGV0ZTpmdW5jdGlvbigpe3RoaXMucmVuZGVyKEkpfSxjb25zZW50UmVxdWlyZWQ6ZnVuY3Rpb24oKXt0aGlzLnJlbmRlcihSLHtCZWFjb246Rn0pfX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzU3KSxuKDYyMCksbig2MjIpLG4oNjIzKSxuKDYyNildLHI9ZnVuY3Rpb24odCxlLG4saSxyKXt2YXIgbz10Ll8scz02ZTMsYT10LlZpZXcuZXh0ZW5kKHt0ZW1wbGF0ZTonXHQgICAgICA8YSBocmVmPSIjIiBjbGFzcz0ibGluayBoZWxwIGpzLWJhY2siIGRhdGEtc2U9ImJhY2stbGluayI+XHQgICAgICAgIHt7aTE4biBjb2RlPSJvZm9ybS5iYWNrIiBidW5kbGU9ImxvZ2luIn19XHQgICAgICA8L2E+XHQgICAgJyxjbGFzc05hbWU6ImF1dGgtZm9vdGVyIixldmVudHM6eyJjbGljayAuanMtYmFjayI6ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuYmFjaygpfX0sYmFjazpmdW5jdGlvbigpe3ZhciB0PXIuY3JlYXRlQWN0aXZhdGVGYWN0b3JVcmwodGhpcy5vcHRpb25zLmFwcFN0YXRlLmdldCgiYWN0aXZhdGVkRmFjdG9yUHJvdmlkZXIiKSx0aGlzLm9wdGlvbnMuYXBwU3RhdGUuZ2V0KCJhY3RpdmF0ZWRGYWN0b3JUeXBlIiksIm1hbnVhbCIpO3RoaXMub3B0aW9ucy5hcHBTdGF0ZS50cmlnZ2VyKCJuYXZpZ2F0ZSIsdCl9fSksbD17dGl0bGU6by5wYXJ0aWFsKHQubG9jLCJlbnJvbGwudG90cC5lbnJvbGxWaWFFbWFpbC50aXRsZSIsImxvZ2luIiksbm9CdXR0b25CYXI6ITAsYXR0cmlidXRlczp7ImRhdGEtc2UiOiJzZW50LWVtYWlsLWFjdGl2YXRpb24tbGluayJ9LGZvcm1DaGlsZHJlbjpbaS5WaWV3KHtWaWV3OnQuVmlldy5leHRlbmQoe3RlbXBsYXRlOidcdCAgICAgICAgICAgIDxwPnt7aTE4biBjb2RlPSJlbnJvbGwudG90cC5lbnJvbGxWaWFFbWFpbC5tc2ciIGJ1bmRsZT0ibG9naW4ifX08L3A+XHQgICAgICAgICAgICA8cCBjbGFzcz0iZW1haWwtYWRkcmVzcyI+e3tlbWFpbH19PC9wPlx0ICAgICAgICAgICcsZ2V0VGVtcGxhdGVEYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2VtYWlsOnRoaXMub3B0aW9ucy5hcHBTdGF0ZS5nZXQoInVzZXJFbWFpbCIpfX19KX0pXX0sYz17dGl0bGU6by5wYXJ0aWFsKHQubG9jLCJlbnJvbGwudG90cC5lbnJvbGxWaWFTbXMudGl0bGUiLCJsb2dpbiIpLG5vQnV0dG9uQmFyOiEwLGF0dHJpYnV0ZXM6eyJkYXRhLXNlIjoic2VudC1zbXMtYWN0aXZhdGlvbi1saW5rIn0sZm9ybUNoaWxkcmVuOltpLlZpZXcoe1ZpZXc6dC5WaWV3LmV4dGVuZCh7dGVtcGxhdGU6J1x0ICAgICAgICAgICAgPHA+e3tpMThuIGNvZGU9ImVucm9sbC50b3RwLmVucm9sbFZpYVNtcy5tc2ciIGJ1bmRsZT0ibG9naW4ifX08L3A+XHQgICAgICAgICAgICA8cCBjbGFzcz0icGhvbmUtbnVtYmVyIj57e3Bob25lTnVtYmVyfX08L3A+XHQgICAgICAgICAgJyxnZXRUZW1wbGF0ZURhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cGhvbmVOdW1iZXI6dGhpcy5tb2RlbC5nZXQoImZ1bGxQaG9uZU51bWJlciIpfX19KX0pXX07cmV0dXJuIG4uZXh0ZW5kKHtjbGFzc05hbWU6ImVucm9sbC1hY3RpdmF0aW9uLWxpbmstc2VudCIsTW9kZWw6ZnVuY3Rpb24oKXtyZXR1cm57bG9jYWw6e2NvdW50cnlDb2RlOlsic3RyaW5nIiwhMSx0aGlzLm9wdGlvbnMuYXBwU3RhdGUuZ2V0KCJ1c2VyQ291bnRyeUNvZGUiKV0scGhvbmVOdW1iZXI6WyJzdHJpbmciLCExLHRoaXMub3B0aW9ucy5hcHBTdGF0ZS5nZXQoInVzZXJQaG9uZU51bWJlciIpXSxfX2ZhY3RvclR5cGVfXzpbInN0cmluZyIsITEsdGhpcy5vcHRpb25zLmZhY3RvclR5cGVdLF9fcHJvdmlkZXJfXzpbInN0cmluZyIsITEsdGhpcy5vcHRpb25zLnByb3ZpZGVyXX0sZGVyaXZlZDp7Y291bnRyeUNhbGxpbmdDb2RlOntkZXBzOlsiY291bnRyeUNvZGUiXSxmbjpmdW5jdGlvbih0KXtyZXR1cm4iKyIrZS5nZXRDYWxsaW5nQ29kZUZvckNvdW50cnkodCl9fSxmdWxsUGhvbmVOdW1iZXI6e2RlcHM6WyJjb3VudHJ5Q2FsbGluZ0NvZGUiLCJwaG9uZU51bWJlciJdLGZuOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX19fX19LEZvcm06ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMuYXBwU3RhdGUuZ2V0KCJmYWN0b3JBY3RpdmF0aW9uVHlwZSIpO3N3aXRjaCh0KXtjYXNlIlNNUyI6cmV0dXJuIGM7Y2FzZSJFTUFJTCI6cmV0dXJuIGw7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gYWN0aXZhdGlvbiBvcHRpb246ICIrdCl9fSxGb290ZXI6YSxpbml0aWFsaXplOmZ1bmN0aW9uKCl7dGhpcy5wb2xsRm9yRW5yb2xsbWVudCgpfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gbi5wcm90b3R5cGUucmVtb3ZlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0scG9sbEZvckVucm9sbG1lbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb2RlbC5kb1RyYW5zYWN0aW9uKGZ1bmN0aW9uKHQpe3JldHVybiB0LnBvbGwocyl9KX0sdHJhcEF1dGhSZXNwb25zZTpmdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5hcHBTdGF0ZS5nZXQoImlzV2FpdGluZ0ZvckFjdGl2YXRpb24iKSlyZXR1cm4gdGhpcy5wb2xsRm9yRW5yb2xsbWVudCgpLCEwfX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzI4KSxuKDUwMSksbig2MjEpXSxyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT17fTtyZXR1cm4gaS5nZXRDb3VudHJpZXM9ZnVuY3Rpb24oKXt2YXIgbj10Lm9taXQoZS5jb3VudHJ5LCJITSIsIkJWIiwiVEYiKSxpPXQubWFwKG4sZnVuY3Rpb24odCxlKXtyZXR1cm57bmFtZTp0LGNvZGU6ZX19KTtpPXQuc29ydEJ5KGksIm5hbWUiKTt2YXIgcj17fTtyZXR1cm4gdC5lYWNoKGksZnVuY3Rpb24odCl7clt0LmNvZGVdPXQubmFtZX0pLHJ9LGkuZ2V0Q2FsbGluZ0NvZGVGb3JDb3VudHJ5PWZ1bmN0aW9uKHQpe3JldHVybiBuW3RdfSxpfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXsidXNlIHN0cmljdCI7ISh0LmV4cG9ydHM9e1VTOiIxIixBRzoiMSIsQUk6IjEiLEFTOiIxIixCQjoiMSIsQk06IjEiLEJTOiIxIixDQToiMSIsRE06IjEiLERPOiIxIixHRDoiMSIsR1U6IjEiLEpNOiIxIixLTjoiMSIsS1k6IjEiLExDOiIxIixNUDoiMSIsTVM6IjEiLFBSOiIxIixTWDoiMSIsVEM6IjEiLFRUOiIxIixWQzoiMSIsVkc6IjEiLFZJOiIxIixSVToiNyIsS1o6IjciLEVHOiIyMCIsWkE6IjI3IixHUjoiMzAiLE5MOiIzMSIsQkU6IjMyIixGUjoiMzMiLEVTOiIzNCIsSFU6IjM2IixJVDoiMzkiLFJPOiI0MCIsQ0g6IjQxIixBVDoiNDMiLEdCOiI0NCIsR0c6IjQ0IixJTToiNDQiLEpFOiI0NCIsREs6IjQ1IixTRToiNDYiLE5POiI0NyIsU0o6IjQ3IixQTDoiNDgiLERFOiI0OSIsUEU6IjUxIixNWDoiNTIiLENVOiI1MyIsQVI6IjU0IixCUjoiNTUiLENMOiI1NiIsQ086IjU3IixWRToiNTgiLE1ZOiI2MCIsQVU6IjYxIixDQzoiNjEiLENYOiI2MSIsSUQ6IjYyIixQSDoiNjMiLE5aOiI2NCIsU0c6IjY1IixUSDoiNjYiLEpQOiI4MSIsS1I6IjgyIixWTjoiODQiLENOOiI4NiIsVFI6IjkwIixJTjoiOTEiLFBLOiI5MiIsQUY6IjkzIixMSzoiOTQiLE1NOiI5NSIsSVI6Ijk4IixTUzoiMjExIixNQToiMjEyIixFSDoiMjEyIixEWjoiMjEzIixUTjoiMjE2IixMWToiMjE4IixHTToiMjIwIixTTjoiMjIxIixNUjoiMjIyIixNTDoiMjIzIixHTjoiMjI0IixDSToiMjI1IixCRjoiMjI2IixORToiMjI3IixURzoiMjI4IixCSjoiMjI5IixNVToiMjMwIixMUjoiMjMxIixTTDoiMjMyIixHSDoiMjMzIixORzoiMjM0IixURDoiMjM1IixDRjoiMjM2IixDTToiMjM3IixDVjoiMjM4IixTVDoiMjM5IixHUToiMjQwIixHQToiMjQxIixDRzoiMjQyIixDRDoiMjQzIixBTzoiMjQ0IixHVzoiMjQ1IixJTzoiMjQ2IixBQzoiMjQ3IixTQzoiMjQ4IixTRDoiMjQ5IixSVzoiMjUwIixFVDoiMjUxIixTTzoiMjUyIixESjoiMjUzIixLRToiMjU0IixUWjoiMjU1IixVRzoiMjU2IixCSToiMjU3IixNWjoiMjU4IixaTToiMjYwIixNRzoiMjYxIixSRToiMjYyIixZVDoiMjYyIixaVzoiMjYzIixOQToiMjY0IixNVzoiMjY1IixMUzoiMjY2IixCVzoiMjY3IixTWjoiMjY4IixLTToiMjY5IixTSDoiMjkwIixUQToiMjkwIixFUjoiMjkxIixBVzoiMjk3IixGTzoiMjk4IixHTDoiMjk5IixHSToiMzUwIixQVDoiMzUxIixMVToiMzUyIixJRToiMzUzIixJUzoiMzU0IixBTDoiMzU1IixNVDoiMzU2IixDWToiMzU3IixGSToiMzU4IixBWDoiMzU4IixCRzoiMzU5IixMVDoiMzcwIixMVjoiMzcxIixFRToiMzcyIixNRDoiMzczIixBTToiMzc0IixCWToiMzc1IixBRDoiMzc2IixNQzoiMzc3IixTTToiMzc4IixWQToiMzc5IixVQToiMzgwIixSUzoiMzgxIixNRToiMzgyIixIUjoiMzg1IixTSToiMzg2IixCQToiMzg3IixNSzoiMzg5IixDWjoiNDIwIixTSzoiNDIxIixMSToiNDIzIixGSzoiNTAwIixCWjoiNTAxIixHVDoiNTAyIixTVjoiNTAzIixITjoiNTA0IixOSToiNTA1IixDUjoiNTA2IixQQToiNTA3IixQTToiNTA4IixIVDoiNTA5IixHUDoiNTkwIixCTDoiNTkwIixNRjoiNTkwIixCTzoiNTkxIixHWToiNTkyIixFQzoiNTkzIixHRjoiNTk0IixQWToiNTk1IixNUToiNTk2IixTUjoiNTk3IixVWToiNTk4IixDVzoiNTk5IixCUToiNTk5IixUTDoiNjcwIixORjoiNjcyIixCTjoiNjczIixOUjoiNjc0IixQRzoiNjc1IixUTzoiNjc2IixTQjoiNjc3IixWVToiNjc4IixGSjoiNjc5IixQVzoiNjgwIixXRjoiNjgxIixDSzoiNjgyIixOVToiNjgzIixXUzoiNjg1IixLSToiNjg2IixOQzoiNjg3IixUVjoiNjg4IixQRjoiNjg5IixUSzoiNjkwIixGTToiNjkxIixNSDoiNjkyIiwiMDAxIjoiOTc5IixLUDoiODUwIixISzoiODUyIixNTzoiODUzIixLSDoiODU1IixMQToiODU2IixCRDoiODgwIixUVzoiODg2IixNVjoiOTYwIixMQjoiOTYxIixKTzoiOTYyIixTWToiOTYzIixJUToiOTY0IixLVzoiOTY1IixTQToiOTY2IixZRToiOTY3IixPTToiOTY4IixQUzoiOTcwIixBRToiOTcxIixJTDoiOTcyIixCSDoiOTczIixRQToiOTc0IixCVDoiOTc1IixNTjoiOTc2IixOUDoiOTc3IixUSjoiOTkyIixUTToiOTkzIixBWjoiOTk0IixHRToiOTk1IixLRzoiOTk2IixVWjoiOTk4IixHUzo1MDAsUE46NjQsQVE6NjcyLFVNOjEsQU46NTk5fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzU3KSxuKDYyMyksbig1NjIpLG4oNTU5KSxuKDYyNCksbig2MjUpXSxyPWZ1bmN0aW9uKHQsZSxuLGkscixvKXt2YXIgcz10Ll8sYT10LkZvcm0uZXh0ZW5kKHtsYXlvdXQ6Im8tZm9ybS10aGVtZSIsbm9DYW5jZWxCdXR0b246ITAsY29uc3RydWN0b3I6ZnVuY3Rpb24ocil7dC5Gb3JtLmNhbGwodGhpcyxyKSxzLmVhY2gocy5yZXN1bHQodGhpcywiZm9ybUNoaWxkcmVuIil8fFtdLGZ1bmN0aW9uKHIpe3N3aXRjaChyLnR5cGUpe2Nhc2UgZS5JTlBVVDp0aGlzLmFkZElucHV0KHMuZXh0ZW5kKHtsYWJlbDohMSwibGFiZWwtdG9wIjohMH0sci52aWV3T3B0aW9ucykpO2JyZWFrO2Nhc2UgZS5CVVRUT046dGhpcy5hZGQodC5jcmVhdGVCdXR0b24ocy5leHRlbmQoe21vZGVsOnRoaXMubW9kZWx9LHIudmlld09wdGlvbnMpKSxyLmFkZE9wdGlvbnMpLGkuYXBwbHlTaG93V2hlbih0aGlzLmxhc3QoKSxyLnZpZXdPcHRpb25zJiZyLnZpZXdPcHRpb25zLnNob3dXaGVuKTticmVhaztjYXNlIGUuRElWSURFUjp0aGlzLmFkZERpdmlkZXIoci52aWV3T3B0aW9ucyk7YnJlYWs7Y2FzZSBlLlRPT0xCQVI6dGhpcy5hZGQobix7b3B0aW9uczpyLnZpZXdPcHRpb25zfSksaS5hcHBseVNob3dXaGVuKHRoaXMubGFzdCgpLHIudmlld09wdGlvbnMmJnIudmlld09wdGlvbnMuc2hvd1doZW4pO2JyZWFrO2Nhc2UgZS5WSUVXOnRoaXMuYWRkKHIudmlld09wdGlvbnMuVmlldyxyLmFkZE9wdGlvbnMpLGkuYXBwbHlTaG93V2hlbih0aGlzLmxhc3QoKSxyLnZpZXdPcHRpb25zLnNob3dXaGVuKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcigiVW5yZWNvZ25pemVkIGNoaWxkIHR5cGU6ICIrci50eXBlKX19LHRoaXMpfX0pO3JldHVybiByLmV4dGVuZCh7Y29uc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmluaXRpYWxpemU7aWYodGhpcy5pbml0aWFsaXplPWZ1bmN0aW9uKCl7fSxyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLk1vZGVsJiZ0aGlzLkZvcm0pe3ZhciBlPW8uZXh0ZW5kKHMuZXh0ZW5kKHtwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zZXR0aW5ncz10LnNldHRpbmdzLHRoaXMuYXBwU3RhdGU9dC5hcHBTdGF0ZSxzLm9taXQodCxbInNldHRpbmdzIiwiYXBwU3RhdGUiXSl9fSxzLnJlc3VsdCh0aGlzLCJNb2RlbCIpKSk7dGhpcy5tb2RlbD1uZXcgZSh7c2V0dGluZ3M6dGhpcy5zZXR0aW5ncyxhcHBTdGF0ZTp0aGlzLm9wdGlvbnMuYXBwU3RhdGV9LHtwYXJzZTohMH0pO3ZhciBuPWEuZXh0ZW5kKHMucmVzdWx0KHRoaXMsIkZvcm0iLHRoaXMpKTt0aGlzLmZvcm09bmV3IG4odGhpcy50b0pTT04oKSksdGhpcy5hZGQodGhpcy5mb3JtKX10aGlzLkZvb3RlciYmKHRoaXMuZm9vdGVyPW5ldyB0aGlzLkZvb3Rlcih0aGlzLnRvSlNPTigpKSx0aGlzLmFkZCh0aGlzLmZvb3RlcikpLHRoaXMuYWRkTGlzdGVuZXJzKCksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHRvSlNPTjpmdW5jdGlvbigpe3ZhciB0PXIucHJvdG90eXBlLnRvSlNPTi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIHMuZXh0ZW5kKHMucGljayh0aGlzLm9wdGlvbnMsImFwcFN0YXRlIiksdCl9LGJhY2s6ZnVuY3Rpb24oKXt0aGlzLmZvb3RlciYmdGhpcy5mb290ZXIuYmFjayYmdGhpcy5mb290ZXIuYmFjaygpfX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaTtpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gZnVuY3Rpb24oZSxuKXtyZXR1cm57dHlwZTp0LHZpZXdPcHRpb25zOmUsYWRkT3B0aW9uczpufX19dmFyIGU9IklOUFVUIixuPSJCVVRUT04iLGk9IkRJVklERVIiLHI9IlRPT0xCQVIiLG89IlZJRVciO3JldHVybntJbnB1dDp0KGUpLEJ1dHRvbjp0KG4pLERpdmlkZXI6dChpKSxUb29sYmFyOnQociksVmlldzp0KG8pLElOUFVUOmUsQlVUVE9OOm4sRElWSURFUjppLFRPT0xCQVI6cixWSUVXOm99fS5jYWxsKGUsbixlLHQpLCEodm9pZCAwIT09aSYmKHQuZXhwb3J0cz1pKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzU3KSxuKDM0NildLHI9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKGUpe3JldHVybiBpLmZpbmQoZS5nZXRDaGlsZHJlbigpLGZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgdC5Gb3JtfSl9dmFyIGk9dC5fO3JldHVybiB0LkNvbnRyb2xsZXIuZXh0ZW5kKHthZGRMaXN0ZW5lcnM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm1vZGVsLmdldCgiYmFja3VwRmFjdG9yIik7dGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCJzYXZlIixmdW5jdGlvbigpe3ZhciB0PW4odGhpcyksZT10LmRpc2FibGVTdWJtaXRCdXR0b247ZSYmIXQuZGlzYWJsZVN1Ym1pdEJ1dHRvbigpfHx0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCEwKX0pLHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwiZXJyb3IiLGZ1bmN0aW9uKCl7dGhpcy50b2dnbGVCdXR0b25TdGF0ZSghMSl9KTt2YXIgZT1pLmJpbmQoZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zLmFwcFN0YXRlLnNldCgidHJhbnNhY3Rpb24iLHQpfSx0aGlzKSxyPWkuYmluZChmdW5jdGlvbih0KXt0aGlzLm9wdGlvbnMuYXBwU3RhdGUuc2V0KCJ0cmFuc2FjdGlvbkVycm9yIix0KX0sdGhpcyk7dGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCJzZXRUcmFuc2FjdGlvbiIsZSksdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCJzZXRUcmFuc2FjdGlvbkVycm9yIixyKSx0JiYodGhpcy5saXN0ZW5Ubyh0LCJzZXRUcmFuc2FjdGlvbiIsZSksdGhpcy5saXN0ZW5Ubyh0LCJzZXRUcmFuc2FjdGlvbkVycm9yIixyKSl9LGZldGNoSW5pdGlhbERhdGE6ZnVuY3Rpb24oKXtyZXR1cm4gZSgpfSx0cmFwQXV0aFJlc3BvbnNlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHRvSlNPTjpmdW5jdGlvbigpe3ZhciBlPXQuQ29udHJvbGxlci5wcm90b3R5cGUudG9KU09OLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gaS5leHRlbmQoaS5waWNrKHRoaXMub3B0aW9ucywiYXBwU3RhdGUiKSxlKX0sdG9nZ2xlQnV0dG9uU3RhdGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy4kZWwuZmluZCgiLmJ1dHRvbiIpO2UudG9nZ2xlQ2xhc3MoImxpbmstYnV0dG9uLWRpc2FibGVkIix0KS5wcm9wKCJkaXNhYmxlZCIsdCl9LHBvc3RSZW5kZXJBbmltYXRpb246ZnVuY3Rpb24oKXt0aGlzLnRyaWdnZXIoInBhZ2VSZW5kZXJlZCIse3BhZ2U6dGhpcy5jbGFzc05hbWV9KX19KX0uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbih0LGUsbil7dmFyIGkscjtpPVtuKDM1NyksbigzNDYpXSxyPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5fLGk9WyJPQXV0aEVycm9yIiwiQXV0aFNka0Vycm9yIiwiQXV0aFBvbGxTdG9wRXJyb3IiLCJBdXRoQXBpRXJyb3IiXTtyZXR1cm4gdC5Nb2RlbC5leHRlbmQoe2RvVHJhbnNhY3Rpb246ZnVuY3Rpb24odCxlKXt2YXIgcj10aGlzO3JldHVybiB0LmNhbGwodGhpcyx0aGlzLmFwcFN0YXRlLmdldCgidHJhbnNhY3Rpb24iKSkudGhlbihmdW5jdGlvbih0KXtyZXR1cm4gci50cmlnZ2VyKCJzZXRUcmFuc2FjdGlvbiIsdCksdH0pLmZhaWwoZnVuY3Rpb24odCl7aWYoIkF1dGhQb2xsU3RvcEVycm9yIiE9PXQubmFtZSYmKHIudHJpZ2dlcigic2V0VHJhbnNhY3Rpb25FcnJvciIsdCksci50cmlnZ2VyKCJlcnJvciIscix0LnhociksZXx8bi5pbmRleE9mKGksdC5uYW1lKT09PS0xKSl0aHJvdyB0fSl9LG1hbmFnZVRyYW5zYWN0aW9uOmZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMscj10LmNhbGwodGhpcyx0aGlzLmFwcFN0YXRlLmdldCgidHJhbnNhY3Rpb24iKSxuLmJpbmQodGhpcy5zZXRUcmFuc2FjdGlvbix0aGlzKSk7cmV0dXJuIGUuaXNQcm9taXNlKHIpJiZyLmZhaWwoZnVuY3Rpb24odCl7IkF1dGhQb2xsU3RvcEVycm9yIiE9PXQubmFtZSYmKGkudHJpZ2dlcigic2V0VHJhbnNhY3Rpb25FcnJvciIsdCksaS50cmlnZ2VyKCJlcnJvciIsaSx0LnhocikpfSksZS5yZXNvbHZlKHIpfSxzdGFydFRyYW5zYWN0aW9uOmZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMsaT10LmNhbGwodGhpcyx0aGlzLnNldHRpbmdzLmdldEF1dGhDbGllbnQoKSk7cmV0dXJuIGUuaXNQcm9taXNlKGkpP2kudGhlbihmdW5jdGlvbih0KXtyZXR1cm4gbi50cmlnZ2VyKCJzZXRUcmFuc2FjdGlvbiIsdCksdH0pLmZhaWwoZnVuY3Rpb24odCl7dGhyb3cgbi50cmlnZ2VyKCJzZXRUcmFuc2FjdGlvbkVycm9yIix0KSxuLnRyaWdnZXIoImVycm9yIixuLHQueGhyKSx0fSk6ZS5yZXNvbHZlKGkpfSxzZXRUcmFuc2FjdGlvbjpmdW5jdGlvbih0KXt0aGlzLmFwcFN0YXRlLnNldCgidHJhbnNhY3Rpb24iLHQpfX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzU3KSxuKDUxNCksbig2MjcpLG4oNjI4KSxuKDUwNSksbig2MjkpLG4oNjMwKV0scj1mdW5jdGlvbih0LGUsbixpLHIsbyxzKXt2YXIgYT17fSxsPXQudHBsKCJzaWduaW4vdmVyaWZ5L3t7cHJvdmlkZXJ9fS97e2ZhY3RvclR5cGV9fSIpLGM9dC50cGwoInNpZ25pbi9lbnJvbGwve3twcm92aWRlcn19L3t7ZmFjdG9yVHlwZX19IiksdT10LnRwbCgic2lnbmluL2Vucm9sbC1hY3RpdmF0ZS97e3Byb3ZpZGVyfX0ve3tmYWN0b3JUeXBlfX17eyNpZiBzdGVwfX0ve3tzdGVwfX17ey9pZn19IiksZD10LnRwbCgic2lnbmluL3JlY292ZXJ5L3t7cmVjb3ZlcnlUb2tlbn19IiksaD10LnRwbCgic2lnbmluL3JlZnJlc2gtYXV0aC1zdGF0ZXt7I2lmIHRva2VufX0ve3t0b2tlbn19e3svaWZ9fSIpLHA9dC50cGwoInt7YmFzZVVybH19L2xvZ2luL3Nlc3Npb25Db29raWVSZWRpcmVjdD9jaGVja0FjY291bnRTZXR1cENvbXBsZXRlPXRydWUmdG9rZW49e3t7dG9rZW59fX0mcmVkaXJlY3RVcmw9e3t7cmVkaXJlY3RVcmx9fX0iKTtyZXR1cm4gYS5jcmVhdGVWZXJpZnlVcmw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbCh7cHJvdmlkZXI6ZW5jb2RlVVJJQ29tcG9uZW50KHQudG9Mb3dlckNhc2UoKSksZmFjdG9yVHlwZTplbmNvZGVVUklDb21wb25lbnQoZSl9KX0sYS5jcmVhdGVFbnJvbGxGYWN0b3JVcmw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gYyh7cHJvdmlkZXI6ZW5jb2RlVVJJQ29tcG9uZW50KHQudG9Mb3dlckNhc2UoKSksZmFjdG9yVHlwZTplbmNvZGVVUklDb21wb25lbnQoZSl9KX0sYS5jcmVhdGVBY3RpdmF0ZUZhY3RvclVybD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHUoe3Byb3ZpZGVyOmVuY29kZVVSSUNvbXBvbmVudCh0LnRvTG93ZXJDYXNlKCkpLGZhY3RvclR5cGU6ZW5jb2RlVVJJQ29tcG9uZW50KGUpLHN0ZXA6ISFuJiZlbmNvZGVVUklDb21wb25lbnQobil9KX0sYS5jcmVhdGVSZWNvdmVyeVVybD1mdW5jdGlvbih0KXtyZXR1cm4gZCh7cmVjb3ZlcnlUb2tlbjplbmNvZGVVUklDb21wb25lbnQodCl9KX0sYS5jcmVhdGVSZWZyZXNoVXJsPWZ1bmN0aW9uKHQpe3ZhciBlPXQ/ZW5jb2RlVVJJQ29tcG9uZW50KHQpOm51bGw7cmV0dXJuIGgoe3Rva2VuOmV9KX0sYS5yb3V0ZUFmdGVyQXV0aFN0YXR1c0NoYW5nZT1mdW5jdGlvbihsLGMsdSl7aWYoYyYmYy54aHImJnIuY29yc0lzTm90RW5hYmxlZChjLnhocikpcmV0dXJuIHZvaWQgbC5zZXR0aW5ncy5jYWxsR2xvYmFsRXJyb3IobmV3IG8uVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IodC5sb2MoImVycm9yLmVuYWJsZWQuY29ycyIpKSk7aWYoYyYmYy5lcnJvckNvZGU9PT1zLklOVkFMSURfVE9LRU5fRVhDRVBUSU9OKXJldHVybiBsLmFwcFN0YXRlLnNldCgiZmxhc2hFcnJvciIsdC5sb2MoImVycm9yLmV4cGlyZWQuc2Vzc2lvbiIpKSxsLmNvbnRyb2xsZXIuc3RhdGUuc2V0KCJuYXZpZ2F0ZURpciIsaS5ESVJFQ1RJT05fQkFDSyksdm9pZCBsLm5hdmlnYXRlKCIiLHt0cmlnZ2VyOiEwfSk7aWYoIWMmJnUmJnUuc3RhdHVzJiYobC5hcHBTdGF0ZS5zZXRBdXRoUmVzcG9uc2UodSksIWwuY29udHJvbGxlcnx8IWwuY29udHJvbGxlci50cmFwQXV0aFJlc3BvbnNlKHUpKSlzd2l0Y2godS5zdGF0dXMpe2Nhc2UiU1VDQ0VTUyI6aWYodS5yZWNvdmVyeVR5cGU9PT1pLlJFQ09WRVJZX1RZUEVfVU5MT0NLKXJldHVybiB2b2lkIGwubmF2aWdhdGUoInNpZ25pbi9hY2NvdW50LXVubG9ja2VkIix7dHJpZ2dlcjohMH0pO2lmKGwuc2V0dGluZ3MuZ2V0KCJvYXV0aDJFbmFibGVkIikpcmV0dXJuIHZvaWQgbi5nZXRUb2tlbnMobC5zZXR0aW5ncyx7c2Vzc2lvblRva2VuOnUuc2Vzc2lvblRva2VufSxsLmNvbnRyb2xsZXIpO3ZhciBkPXt1c2VyOnUuX2VtYmVkZGVkLnVzZXIsdHlwZTp1LnR5cGV9O2lmKHUudHlwZT09PWkuU0VTU0lPTl9TVEVQX1VQKXt2YXIgaD11Ll9saW5rcyYmdS5fbGlua3MubmV4dCYmdS5fbGlua3MubmV4dC5ocmVmO2Quc3RlcFVwPXt1cmw6aCxmaW5pc2g6ZnVuY3Rpb24oKXtlLnJlZGlyZWN0KGgpfX19ZWxzZSBkLnR5cGU9aS5TRVNTSU9OX1NTTyxkLnNlc3Npb249e3Rva2VuOnUuc2Vzc2lvblRva2VuLHNldENvb2tpZUFuZFJlZGlyZWN0OmZ1bmN0aW9uKHQpe2UucmVkaXJlY3QocCh7YmFzZVVybDpsLnNldHRpbmdzLmdldCgiYmFzZVVybCIpLHRva2VuOmVuY29kZVVSSUNvbXBvbmVudCh1LnNlc3Npb25Ub2tlbikscmVkaXJlY3RVcmw6ZW5jb2RlVVJJQ29tcG9uZW50KHQpfSkpfX07cmV0dXJuIHZvaWQgbC5zZXR0aW5ncy5jYWxsR2xvYmFsU3VjY2VzcyhpLlNVQ0NFU1MsZCk7Y2FzZSJDT05TRU5UX1JFUVVJUkVEIjpyZXR1cm4gdm9pZChsLnNldHRpbmdzLmdldCgiZmVhdHVyZXMuY29uc2VudCIpJiZsLm5hdmlnYXRlKCJzaWduaW4vY29uc2VudCIse3RyaWdnZXI6ITB9KSk7Y2FzZSJNRkFfUkVRVUlSRUQiOnZhciBmPWwuYXBwU3RhdGUuZ2V0KCJmYWN0b3JzIikuZ2V0RGVmYXVsdEZhY3RvcigpLG09YS5jcmVhdGVWZXJpZnlVcmwoZi5nZXQoInByb3ZpZGVyIiksZi5nZXQoImZhY3RvclR5cGUiKSk7cmV0dXJuIHZvaWQgbC5uYXZpZ2F0ZShtLHt0cmlnZ2VyOiEwfSk7Y2FzZSJNRkFfQ0hBTExFTkdFIjpyZXR1cm4gdm9pZCBsLmFwcFN0YXRlLmdldCgidHJhbnNhY3Rpb24iKS5wcmV2KCkudGhlbihmdW5jdGlvbih0KXtsLmFwcFN0YXRlLnNldCgidHJhbnNhY3Rpb24iLHQpfSkuZG9uZSgpO2Nhc2UiTUZBX0VOUk9MTCI6cmV0dXJuIHZvaWQgbC5uYXZpZ2F0ZSgic2lnbmluL2Vucm9sbCIse3RyaWdnZXI6ITB9KTtjYXNlIk1GQV9FTlJPTExfQUNUSVZBVEUiOnZhciBfPWEuY3JlYXRlQWN0aXZhdGVGYWN0b3JVcmwobC5hcHBTdGF0ZS5nZXQoImFjdGl2YXRlZEZhY3RvclByb3ZpZGVyIiksbC5hcHBTdGF0ZS5nZXQoImFjdGl2YXRlZEZhY3RvclR5cGUiKSk7cmV0dXJuIHZvaWQgbC5uYXZpZ2F0ZShfLHt0cmlnZ2VyOiEwfSk7Y2FzZSJQQVNTV09SRF9XQVJOIjpjYXNlIlBBU1NXT1JEX0VYUElSRUQiOnJldHVybiB2b2lkKGwuc2V0dGluZ3MuZ2V0KCJmZWF0dXJlcy5jdXN0b21FeHBpcmVkUGFzc3dvcmQiKSYmIWwuYXBwU3RhdGUuZ2V0KCJpc1B3ZE1hbmFnZWRCeU9rdGEiKT9sLm5hdmlnYXRlKCJzaWduaW4vY3VzdG9tLXBhc3N3b3JkLWV4cGlyZWQiLHt0cmlnZ2VyOiEwfSk6bC5uYXZpZ2F0ZSgic2lnbmluL3Bhc3N3b3JkLWV4cGlyZWQiLHt0cmlnZ2VyOiEwfSkpO2Nhc2UiUkVDT1ZFUllfQ0hBTExFTkdFIjp2YXIgZz11LmZhY3RvclR5cGUudG9Mb3dlckNhc2UoKT09PWkuUkVDT1ZFUllfRkFDVE9SX1RZUEVfRU1BSUwudG9Mb3dlckNhc2UoKSx2PXUucmVjb3ZlcnlUeXBlPT09aS5SRUNPVkVSWV9UWVBFX1BBU1NXT1JELHk9dS5yZWNvdmVyeVR5cGU9PT1pLlJFQ09WRVJZX1RZUEVfVU5MT0NLO3JldHVybiB2b2lkKHYmJmc/bC5uYXZpZ2F0ZSgic2lnbmluL3JlY292ZXJ5LWVtYWlsZWQiLHt0cmlnZ2VyOiEwfSk6eSYmZz9sLm5hdmlnYXRlKCJzaWduaW4vdW5sb2NrLWVtYWlsZWQiLHt0cmlnZ2VyOiEwfSk6bC5uYXZpZ2F0ZSgic2lnbmluL3JlY292ZXJ5LWNoYWxsZW5nZSIse3RyaWdnZXI6ITB9KSk7Y2FzZSJSRUNPVkVSWSI6cmV0dXJuIHZvaWQgbC5uYXZpZ2F0ZSgic2lnbmluL3JlY292ZXJ5LXF1ZXN0aW9uIix7dHJpZ2dlcjohMH0pO2Nhc2UiUEFTU1dPUkRfUkVTRVQiOnJldHVybiB2b2lkIGwubmF2aWdhdGUoInNpZ25pbi9wYXNzd29yZC1yZXNldCIse3RyaWdnZXI6ITB9KTtjYXNlIkxPQ0tFRF9PVVQiOnJldHVybiB2b2lkKGwuc2V0dGluZ3MuZ2V0KCJmZWF0dXJlcy5zZWxmU2VydmljZVVubG9jayIpP2wubmF2aWdhdGUoInNpZ25pbi91bmxvY2siLHt0cmlnZ2VyOiEwfSk6bC5jb250cm9sbGVyLm1vZGVsLnRyaWdnZXIoImVycm9yIixsLmNvbnRyb2xsZXIubW9kZWwse3Jlc3BvbnNlSlNPTjp7ZXJyb3JDYXVzZXM6W10sZXJyb3JTdW1tYXJ5OnQubG9jKCJlcnJvci5hdXRoLmxvY2tlZE91dCIsImxvZ2luIil9fSkpO2Nhc2UiVU5BVVRIRU5USUNBVEVEIjpyZXR1cm4gdm9pZCBsLm5hdmlnYXRlKCJzaWduaW4iLHt0cmlnZ2VyOiEwfSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gc3RhdHVzOiAiK3Uuc3RhdHVzKX19LGF9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pew==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("cjoiX3N0b3BFbnJvbGxtZW50In0sZm9ybUNoaWxkcmVuOmZ1bmN0aW9uKCl7dmFyIGU9W107aWYod2luZG93Lmhhc093blByb3BlcnR5KCJ1MmYiKSllLnB1c2gobi5WaWV3KHtWaWV3OidcdCAgICAgICAgICAgIDxkaXYgY2xhc3M9InUyZi12ZXJpZnktdGV4dCI+XHQgICAgICAgICAgICAgIDxwPnt7aTE4biBjb2RlPSJ2ZXJpZnkudTJmLmluc3RydWN0aW9ucyIgYnVuZGxlPSJsb2dpbiJ9fTwvcD5cdCAgICAgICAgICAgICAgPHA+e3tpMThuIGNvZGU9InZlcmlmeS51MmYuaW5zdHJ1Y3Rpb25zQmx1ZXRvb3RoIiBidW5kbGU9ImxvZ2luIn19PC9wPlx0ICAgICAgICAgICAgICA8ZGl2IGRhdGEtc2U9InUyZi13YWl0aW5nIiBjbGFzcz0ib2t0YS13YWl0aW5nLXNwaW5uZXIiPjwvZGl2Plx0ICAgICAgICAgICAgPC9kaXY+J30pKTtlbHNle3ZhciBpPSJ1MmYuZXJyb3Iubm90U3VwcG9ydGVkQnJvd3NlciI7cy5pc0ZpcmVmb3goKT9pPSJ1MmYuZXJyb3Iubm9GaXJlZm94RXh0ZW5zaW9uIjoxPT09dGhpcy5vcHRpb25zLmFwcFN0YXRlLmdldCgiZmFjdG9ycyIpLmxlbmd0aCYmKGk9InUyZi5lcnJvci5ub3RTdXBwb3J0ZWRCcm93c2VyLm9uZUZhY3RvciIpLGUucHVzaChuLlZpZXcoe1ZpZXc6bmV3IG8oe21lc3NhZ2U6dC5sb2MoaSwibG9naW4iKX0pfSx7c2VsZWN0b3I6Ii5vLWZvcm0tZXJyb3ItY29udGFpbmVyIn0pKX1yZXR1cm4gZX0scG9zdFJlbmRlcjpmdW5jdGlvbigpe2wuZGVmZXIobC5iaW5kKGZ1bmN0aW9uKCl7d2luZG93Lmhhc093blByb3BlcnR5KCJ1MmYiKT90aGlzLm1vZGVsLnNhdmUoKTp0aGlzLiQoJ1tkYXRhLXNlPSJ1MmYtd2FpdGluZyJdJykuYWRkQ2xhc3MoImhpZGUiKX0sdGhpcykpfSxfc3RhcnRFbnJvbGxtZW50OmZ1bmN0aW9uKCl7dGhpcy4kKCIub2t0YS13YWl0aW5nLXNwaW5uZXIiKS5yZW1vdmVDbGFzcygiaGlkZSIpLHRoaXMuJCgiLm8tZm9ybS1idXR0b24tYmFyIikuaGlkZSgpfSxfc3RvcEVucm9sbG1lbnQ6ZnVuY3Rpb24oKXt0aGlzLiQoIi5va3RhLXdhaXRpbmctc3Bpbm5lciIpLmFkZENsYXNzKCJoaWRlIiksdGhpcy4kKCIuby1mb3JtLWJ1dHRvbi1iYXIiKS5zaG93KCl9fSxiYWNrOmZ1bmN0aW9uKCl7fSxGb290ZXI6aX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSl7CgkvL0NvcHlyaWdodCAyMDE0LTIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KCS8vbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0CgkvL2h0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL29wZW4tc291cmNlL2xpY2Vuc2VzL2JzZAoJInVzZSBzdHJpY3QiOyFmdW5jdGlvbigpe2lmKCEoInUyZiJpbiB3aW5kb3cpJiYiY2hyb21lImluIHdpbmRvdyl7dmFyIHQsZT13aW5kb3cudTJmPXt9O2UuRVhURU5TSU9OX0lEPSJrbWVuZGZhcGdnamVob2RuZGZsbW1nYWdkYmFtaG5mZCIsZS5NZXNzYWdlVHlwZXM9e1UyRl9SRUdJU1RFUl9SRVFVRVNUOiJ1MmZfcmVnaXN0ZXJfcmVxdWVzdCIsVTJGX1JFR0lTVEVSX1JFU1BPTlNFOiJ1MmZfcmVnaXN0ZXJfcmVzcG9uc2UiLFUyRl9TSUdOX1JFUVVFU1Q6InUyZl9zaWduX3JlcXVlc3QiLFUyRl9TSUdOX1JFU1BPTlNFOiJ1MmZfc2lnbl9yZXNwb25zZSIsVTJGX0dFVF9BUElfVkVSU0lPTl9SRVFVRVNUOiJ1MmZfZ2V0X2FwaV92ZXJzaW9uX3JlcXVlc3QiLFUyRl9HRVRfQVBJX1ZFUlNJT05fUkVTUE9OU0U6InUyZl9nZXRfYXBpX3ZlcnNpb25fcmVzcG9uc2UifSxlLkVycm9yQ29kZXM9e09LOjAsT1RIRVJfRVJST1I6MSxCQURfUkVRVUVTVDoyLENPTkZJR1VSQVRJT05fVU5TVVBQT1JURUQ6MyxERVZJQ0VfSU5FTElHSUJMRTo0LFRJTUVPVVQ6NX0sZS5VMmZSZXF1ZXN0LGUuVTJmUmVzcG9uc2UsZS5FcnJvcixlLlRyYW5zcG9ydCxlLlRyYW5zcG9ydHMsZS5TaWduUmVxdWVzdCxlLlNpZ25SZXNwb25zZSxlLlJlZ2lzdGVyUmVxdWVzdCxlLlJlZ2lzdGVyUmVzcG9uc2UsZS5SZWdpc3RlcmVkS2V5LGUuR2V0SnNBcGlWZXJzaW9uUmVzcG9uc2UsZS5nZXRNZXNzYWdlUG9ydD1mdW5jdGlvbih0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIGNocm9tZSYmY2hyb21lLnJ1bnRpbWUpe3ZhciBuPXt0eXBlOmUuTWVzc2FnZVR5cGVzLlUyRl9TSUdOX1JFUVVFU1Qsc2lnblJlcXVlc3RzOltdfTtjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZShlLkVYVEVOU0lPTl9JRCxuLGZ1bmN0aW9uKCl7Y2hyb21lLnJ1bnRpbWUubGFzdEVycm9yP2UuZ2V0SWZyYW1lUG9ydF8odCk6ZS5nZXRDaHJvbWVSdW50aW1lUG9ydF8odCl9KX1lbHNlIGUuaXNBbmRyb2lkQ2hyb21lXygpP2UuZ2V0QXV0aGVudGljYXRvclBvcnRfKHQpOmUuaXNJb3NDaHJvbWVfKCk/ZS5nZXRJb3NQb3J0Xyh0KTplLmdldElmcmFtZVBvcnRfKHQpfSxlLmlzQW5kcm9pZENocm9tZV89ZnVuY3Rpb24oKXt2YXIgdD1uYXZpZ2F0b3IudXNlckFnZW50O3JldHVybiB0LmluZGV4T2YoIkNocm9tZSIpIT0tMSYmdC5pbmRleE9mKCJBbmRyb2lkIikhPS0xfSxlLmlzSW9zQ2hyb21lXz1mdW5jdGlvbigpe3JldHVybiAkLmluQXJyYXkobmF2aWdhdG9yLnBsYXRmb3JtLFsiaVBob25lIiwiaVBhZCIsImlQb2QiXSk+LTF9LGUuZ2V0Q2hyb21lUnVudGltZVBvcnRfPWZ1bmN0aW9uKHQpe3ZhciBuPWNocm9tZS5ydW50aW1lLmNvbm5lY3QoZS5FWFRFTlNJT05fSUQse2luY2x1ZGVUbHNDaGFubmVsSWQ6ITB9KTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dChuZXcgZS5XcmFwcGVkQ2hyb21lUnVudGltZVBvcnRfKG4pKX0sMCl9LGUuZ2V0QXV0aGVudGljYXRvclBvcnRfPWZ1bmN0aW9uKHQpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0KG5ldyBlLldyYXBwZWRBdXRoZW50aWNhdG9yUG9ydF8pfSwwKX0sZS5nZXRJb3NQb3J0Xz1mdW5jdGlvbih0KXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dChuZXcgZS5XcmFwcGVkSW9zUG9ydF8pfSwwKX0sZS5XcmFwcGVkQ2hyb21lUnVudGltZVBvcnRfPWZ1bmN0aW9uKHQpe3RoaXMucG9ydF89dH0sZS5mb3JtYXRTaWduUmVxdWVzdF89ZnVuY3Rpb24obixpLHIsbyxzKXtpZih2b2lkIDA9PT10fHx0PDEuMSl7Zm9yKHZhciBhPVtdLGw9MDtsPHIubGVuZ3RoO2wrKylhW2xdPXt2ZXJzaW9uOnJbbF0udmVyc2lvbixjaGFsbGVuZ2U6aSxrZXlIYW5kbGU6cltsXS5rZXlIYW5kbGUsYXBwSWQ6bn07cmV0dXJue3R5cGU6ZS5NZXNzYWdlVHlwZXMuVTJGX1NJR05fUkVRVUVTVCxzaWduUmVxdWVzdHM6YSx0aW1lb3V0U2Vjb25kczpvLHJlcXVlc3RJZDpzfX1yZXR1cm57dHlwZTplLk1lc3NhZ2VUeXBlcy5VMkZfU0lHTl9SRVFVRVNULGFwcElkOm4sY2hhbGxlbmdlOmkscmVnaXN0ZXJlZEtleXM6cix0aW1lb3V0U2Vjb25kczpvLHJlcXVlc3RJZDpzfX0sZS5mb3JtYXRSZWdpc3RlclJlcXVlc3RfPWZ1bmN0aW9uKG4saSxyLG8scyl7aWYodm9pZCAwPT09dHx8dDwxLjEpe2Zvcih2YXIgYT0wO2E8ci5sZW5ndGg7YSsrKXJbYV0uYXBwSWQ9bjtmb3IodmFyIGw9W10sYT0wO2E8aS5sZW5ndGg7YSsrKWxbYV09e3ZlcnNpb246aVthXS52ZXJzaW9uLGNoYWxsZW5nZTpyWzBdLGtleUhhbmRsZTppW2FdLmtleUhhbmRsZSxhcHBJZDpufTtyZXR1cm57dHlwZTplLk1lc3NhZ2VUeXBlcy5VMkZfUkVHSVNURVJfUkVRVUVTVCxzaWduUmVxdWVzdHM6bCxyZWdpc3RlclJlcXVlc3RzOnIsdGltZW91dFNlY29uZHM6byxyZXF1ZXN0SWQ6c319cmV0dXJue3R5cGU6ZS5NZXNzYWdlVHlwZXMuVTJGX1JFR0lTVEVSX1JFUVVFU1QsYXBwSWQ6bixyZWdpc3RlclJlcXVlc3RzOnIscmVnaXN0ZXJlZEtleXM6aSx0aW1lb3V0U2Vjb25kczpvLHJlcXVlc3RJZDpzfX0sZS5XcmFwcGVkQ2hyb21lUnVudGltZVBvcnRfLnByb3RvdHlwZS5wb3N0TWVzc2FnZT1mdW5jdGlvbih0KXt0aGlzLnBvcnRfLnBvc3RNZXNzYWdlKHQpfSxlLldyYXBwZWRDaHJvbWVSdW50aW1lUG9ydF8ucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24odCxlKXt2YXIgbj10LnRvTG93ZXJDYXNlKCk7Im1lc3NhZ2UiPT1ufHwib25tZXNzYWdlIj09bj90aGlzLnBvcnRfLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihmdW5jdGlvbih0KXtlKHtkYXRhOnR9KX0pOmNvbnNvbGUuZXJyb3IoIldyYXBwZWRDaHJvbWVSdW50aW1lUG9ydCBvbmx5IHN1cHBvcnRzIG9uTWVzc2FnZSIpfSxlLldyYXBwZWRBdXRoZW50aWNhdG9yUG9ydF89ZnVuY3Rpb24oKXt0aGlzLnJlcXVlc3RJZF89LTEsdGhpcy5yZXF1ZXN0T2JqZWN0Xz1udWxsfSxlLldyYXBwZWRBdXRoZW50aWNhdG9yUG9ydF8ucHJvdG90eXBlLnBvc3RNZXNzYWdlPWZ1bmN0aW9uKHQpe3ZhciBu", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("fX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzU3KSxuKDYyMiksbig2ODMpLG4oNjY4KV0scj1mdW5jdGlvbih0LGUsbixpKXtyZXR1cm4gZS5leHRlbmQoe2NsYXNzTmFtZToiYWN0aXZhdGUtdG90cCIsTW9kZWw6ZnVuY3Rpb24oKXtyZXR1cm57cHJvcHM6e2ZhY3RvcklkOlsic3RyaW5nIiwhMCx0aGlzLm9wdGlvbnMuYXBwU3RhdGUuZ2V0KCJhY3RpdmF0ZWRGYWN0b3JJZCIpXSxwYXNzQ29kZTpbInN0cmluZyIsITBdfSxsb2NhbDp7X19mYWN0b3JUeXBlX186WyJzdHJpbmciLCExLHRoaXMub3B0aW9ucy5mYWN0b3JUeXBlXSxfX3Byb3ZpZGVyX186WyJzdHJpbmciLCExLHRoaXMub3B0aW9ucy5wcm92aWRlcl19LHNhdmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb1RyYW5zYWN0aW9uKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFjdGl2YXRlKHtwYXNzQ29kZTp0aGlzLmdldCgicGFzc0NvZGUiKX0pfSl9fX0sRm9ybTpuLEZvb3RlcjppfSl9LmFwcGx5KGUsaSksISh2b2lkIDAhPT1yJiYodC5leHBvcnRzPXIpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLHI7aT1bbigzNTcpLG4oNjQxKSxuKDYyMyksbig2NDgpXSxyPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciByPXQuXyxvPXt0aXRsZTpmdW5jdGlvbigpe3ZhciBuPWUuZ2V0RmFjdG9yTGFiZWwodGhpcy5tb2RlbC5nZXQoIl9fcHJvdmlkZXJfXyIpLHRoaXMubW9kZWwuZ2V0KCJfX2ZhY3RvclR5cGVfXyIpKTtyZXR1cm4gdC5sb2MoImVucm9sbC50b3RwLnRpdGxlIiwibG9naW4iLFtuXSl9LHN1YnRpdGxlOnIucGFydGlhbCh0LmxvYywiZW5yb2xsLnRvdHAuZW50ZXJDb2RlIiwibG9naW4iKSxhdXRvU2F2ZTohMCxub0J1dHRvbkJhcjohMCxhdHRyaWJ1dGVzOnsiZGF0YS1zZSI6InN0ZXAtc2VuZGNvZGUifSxmb3JtQ2hpbGRyZW46ZnVuY3Rpb24oKXtyZXR1cm5bbi5JbnB1dCh7bmFtZToicGFzc0NvZGUiLGlucHV0OmksdHlwZToibnVtYmVyIixwbGFjZWhvbGRlcjp0LmxvYygibWZhLmNoYWxsZW5nZS5lbnRlckNvZGUucGxhY2Vob2xkZXIiLCJsb2dpbiIpLHBhcmFtczp7aW5uZXJUb29sdGlwOnQubG9jKCJtZmEuY2hhbGxlbmdlLmVudGVyQ29kZS50b29sdGlwIiwibG9naW4iKX19KSxuLlRvb2xiYXIoe25vQ2FuY2VsQnV0dG9uOiEwLHNhdmU6dC5sb2MoIm9mb3JtLnZlcmlmeSIsImxvZ2luIil9KV19fTtyZXR1cm4gb30uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbih0LGUsbil7dmFyIGkscjtpPVtuKDM1Nyksbig2NDEpLG4oNjIyKSxuKDYyMyksbig2MjYpLG4oNjg1KSxuKDY0OCldLHI9ZnVuY3Rpb24odCxlLG4saSxyLG8scyl7dmFyIGE9dC5fO3JldHVybiBuLmV4dGVuZCh7Y2xhc3NOYW1lOiJlbnJvbGwtbWFudWFsLXRvdHAiLE1vZGVsOmZ1bmN0aW9uKCl7cmV0dXJue2xvY2FsOntzaGFyZWRTZWNyZXQ6WyJzdHJpbmciLCExLHRoaXMub3B0aW9ucy5hcHBTdGF0ZS5nZXQoInNoYXJlZFNlY3JldCIpXSxfX2ZhY3RvclR5cGVfXzpbInN0cmluZyIsITEsdGhpcy5vcHRpb25zLmZhY3RvclR5cGVdLF9fcHJvdmlkZXJfXzpbInN0cmluZyIsITEsdGhpcy5vcHRpb25zLnByb3ZpZGVyXX19fSxGb3JtOnt0aXRsZTpmdW5jdGlvbigpe3ZhciBuPWUuZ2V0RmFjdG9yTGFiZWwodGhpcy5tb2RlbC5nZXQoIl9fcHJvdmlkZXJfXyIpLHRoaXMubW9kZWwuZ2V0KCJfX2ZhY3RvclR5cGVfXyIpKTtyZXR1cm4gdC5sb2MoImVucm9sbC50b3RwLnRpdGxlIiwibG9naW4iLFtuXSl9LHN1YnRpdGxlOmEucGFydGlhbCh0LmxvYywiZW5yb2xsLnRvdHAuY2Fubm90U2NhbkJhcmNvZGUiLCJsb2dpbiIpLG5vQnV0dG9uQmFyOiEwLGF0dHJpYnV0ZXM6eyJkYXRhLXNlIjoic3RlcC1tYW51YWwtc2V0dXAifSxmb3JtQ2hpbGRyZW46ZnVuY3Rpb24oKXtyZXR1cm5baS5WaWV3KHtWaWV3OidcdCAgICAgICAgICAgIDxwIGNsYXNzPSJva3RhLWZvcm0tc3VidGl0bGUgby1mb3JtLWV4cGxhaW4gdGV4dC1hbGlnbi1jIj5cdCAgICAgICAgICAgICAge3tpMThuIGNvZGU9ImVucm9sbC50b3RwLm1hbnVhbFNldHVwSW5zdHJ1Y3Rpb25zIiBidW5kbGU9ImxvZ2luIn19XHQgICAgICAgICAgICA8L3A+XHQgICAgICAgICAgJ30pLGkuSW5wdXQoe25hbWU6InNoYXJlZFNlY3JldCIsaW5wdXQ6cyx0eXBlOiJ0ZXh0IixkaXNhYmxlZDohMH0pLGkuVG9vbGJhcih7bm9DYW5jZWxCdXR0b246ITAsc2F2ZTp0LmxvYygib2Zvcm0ubmV4dCIsImxvZ2luIil9KV19fSxGb290ZXI6byxpbml0aWFsaXplOmZ1bmN0aW9uKCl7dGhpcy5saXN0ZW5Ubyh0aGlzLmZvcm0sInNhdmUiLGZ1bmN0aW9uKCl7dmFyIHQ9ci5jcmVhdGVBY3RpdmF0ZUZhY3RvclVybCh0aGlzLm1vZGVsLmdldCgiX19wcm92aWRlcl9fIiksdGhpcy5tb2RlbC5nZXQoIl9fZmFjdG9yVHlwZV9fIiksImFjdGl2YXRlIik7dGhpcy5vcHRpb25zLmFwcFN0YXRlLnRyaWdnZXIoIm5hdmlnYXRlIix0KX0pfX0pfS5hcHBseShlLGkpLCEodm9pZCAwIT09ciYmKHQuZXhwb3J0cz1yKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxyO2k9W24oMzU3KSxuKDYyNiksbig2MjgpXSxyPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdC5WaWV3LmV4dGVuZCh7dGVtcGxhdGU6J1x0ICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImxpbmsgaGVscCBqcy1iYWNrIiBkYXRhLXNlPSJiYWNrLWxpbmsiPlx0ICAgICAgICB7e2kxOG4gY29kZT0ibWZhLmJhY2tUb0ZhY3RvcnMiIGJ1bmRsZT0ibG9naW4ifX1cdCAgICAgIDwvYT5cdCAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJsaW5rIGhlbHAgZ290byBqcy1nb3RvIiBkYXRhLXNlPSJnb3RvLWxpbmsiPlx0ICAgICAgICB7e2kxOG4gY29kZT0ibWZhLnNjYW5CYXJjb2RlIiBidW5kbGU9ImxvZ2luIn19XHQgICAgICA8L2E+XHQgICAgJyxjbGFzc05hbWU6ImF1dGgtZm9vdGVyIixldmVudHM6eyJjbGljayAuanMtYmFjayI6ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuYmFjaygpfSwiY2xpY2sgLmpzLWdvdG8iOmZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0aGlzLm1vZGVsLnN0YXJ0VHJhbnNhY3Rpb24oZnVuY3Rpb24odCl7cmV0dXJuIHQudHgucmVzdW1lKCl9KX19LGJhY2s6ZnVuY3Rpb24oKXt0aGlzLnN0YXRlLnNldCgibmF2aWdhdGVEaXIiLG4uRElSRUNUSU9OX0JBQ0spLHRoaXMub3B0aW9ucy5hcHBTdGF0ZS5nZXQoInByZXZMaW5rIik/dGhpcy5tb2RlbC5kb1RyYW5zYWN0aW9uKGZ1bmN0aW9uKHQpe3JldHVybiB0LnByZXYoKX0pOnRoaXMub3B0aW9ucy5hcHBTdGF0ZS50cmlnZ2VyKCJuYXZpZ2F0ZSIsInNpZ25pbi9lbnJvbGwiKX19KX0uYXBwbHkoZSxpKSwhKHZvaWQgMCE9PXImJih0LmV4cG9ydHM9cikpfSxmdW5jdGlvbih0LGUsbil7dmFyIGkscjtpPVtuKDM1Nyksbig2MjApLG4oNjQxKSxuKDYyMiksbig2MjMpLG4oNjI2KSxuKDY4Nyksbig2NzIpLG4oNjQ4KV0scj1mdW5jdGlvbih0LGUsbixpLHIsbyxzLGEsbCl7ZnVuY3Rpb24gYyh0LGUpe3ZhciBuPW8uY3JlYXRlQWN0aXZhdGVGYWN0b3JVcmwodC5vcHRpb25zLmFwcFN0YXRlLmdldCgiYWN0aXZhdGVkRmFjdG9yUHJvdmlkZXIiKSx0Lm9wdGlvbnMuYXBwU3RhdGUuZ2V0KCJhY3RpdmF0ZWRGYWN0b3JUeXBlIiksZSk7dC5vcHRpb25zLmFwcFN0YXRlLnRyaWdnZXIoIm5hdmlnYXRlIixuKX1mdW5jdGlvbiB1KHQpe3ZhciBlLG47IlNNUyI9PT10Lm1vZGVsLmdldCgiYWN0aXZhdGlvblR5cGUiKSYmKG49dC5tb2RlbC5nZXQoImNvdW50cnlDb2RlIiksZT10Lm1vZGVsLmdldCgicGhvbmVOdW1iZXIiKSksdC5vcHRpb25zLmFwcFN0YXRlLnNldCh7ZmFjdG9yQWN0aXZhdGlvblR5cGU6dC5tb2RlbC5nZXQoImFjdGl2YXRpb25UeXBlIiksdXNlckNvdW50cnlDb2RlOm4sdXNlclBob25lTnVtYmVyOmV9KX1mdW5jdGlvbiBkKHQsZSl7cmV0dXJuIHQubW9kZWwuZG9UcmFuc2FjdGlvbihmdW5jdGlvbihuKXtyZXR1cm4gbi5wcmV2KCkudGhlbihmdW5jdGlvbih0KXt2YXIgbj1oLmZpbmRXaGVyZSh0LmZhY3RvcnMse2ZhY3RvclR5cGU6ZSxwcm92aWRlcjoiT0tUQSJ9KTtyZXR1cm4gbi5lbnJvbGwoKX0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIG4saSxyLG89ZS5kYXRhO2lmKG8mJm8uX2VtYmVkZGVkJiZvLl9lbWJlZGRlZC5mYWN0b3ImJm8uX2VtYmVkZGVkLmZhY3Rvci5fZW1iZWRkZWQmJm8uX2VtYmVkZGVkLmZhY3Rvci5fZW1iZWRkZWQuYWN0aXZhdGlvbil7dmFyIHM9by5fZW1iZWRkZWQuZmFjdG9yO2lmKHI9cy5fZW1iZWRkZWQuYWN0aXZhdGlvbi5zaGFyZWRTZWNyZXQscy5fZW1iZWRkZWQuYWN0aXZhdGlvbi5fbGlua3MmJnMuX2VtYmVkZGVkLmFjdGl2YXRpb24uX2xpbmtzLnNlbmQpe3ZhciBhPXMuX2VtYmVkZGVkLmFjdGl2YXRpb24uX2xpbmtzLnNlbmQsbD1oLmZpbmRXaGVyZShhLHtuYW1lOiJzbXMifSk7bj1sP2wuaHJlZjpudWxsO3ZhciBjPWguZmluZFdoZXJlKGEse25hbWU6ImVtYWlsIn0pO2k9Yz9jLmhyZWY6bnVsbH19cmV0dXJuIHQubW9kZWwuc2V0KHtTTVM6bixFTUFJTDppLHNoYXJlZFNlY3JldDpyfSksZX0pfSl9dmFyIGg9dC5fO3JldHVybiBpLmV4dGVuZCh7Y2xhc3NOYW1lOiJlbnJvbGwtbWFudWFsLXB1c2giLE1vZGVsOmZ1bmN0aW9uKCl7cmV0dXJue2xvY2FsOnthY3RpdmF0aW9uVHlwZTpbInN0cmluZyIsITAsdGhpcy5vcHRpb25zLmFwcFN0YXRlLmdldCgiZmFjdG9yQWN0aXZhdGlvblR5cGUiKXx8IlNNUyJdLGNvdW50cnlDb2RlOlsic3RyaW5nIiwhMSwiVVMiXSxwaG9uZU51bWJlcjoic3RyaW5nIixTTVM6WyJzdHJpbmciLCExLHRoaXMub3B0aW9ucy5hcHBTdGF0ZS5nZXQoInRleHRBY3RpdmF0aW9uTGlua1VybCIpXSxFTUFJTDpbInN0cmluZyIsITEsdGhpcy5vcHRpb25zLmFwcFN0YXRlLmdldCgiZW1haWxBY3RpdmF0aW9uTGlua1VybCIpXSxzaGFyZWRTZWNyZXQ6WyJzdHJpbmciLCExLHRoaXMub3B0aW9ucy5hcHBTdGF0ZS5nZXQoInNoYXJlZFNlY3JldCIpXSxfX2ZhY3RvclR5cGVfXzpbInN0cmluZyIsITEsdGhpcy5vcHRpb25zLmZhY3RvclR5cGVdLF9fcHJvdmlkZXJfXzpbInN0cmluZyIsITEsdGhpcy5vcHRpb25zLnByb3ZpZGVyXX0sZGVyaXZlZDp7Y291bnRyeUNhbGxpbmdDb2RlOntkZXBzOlsiY291bnRyeUNvZGUiXSxmbjpmdW5jdGlvbih0KXtyZXR1cm4iKyIrZS5nZXRDYWxsaW5nQ29kZUZvckNvdW50cnkodCl9fSxmdWxsUGhvbmVOdW1iZXI6e2RlcHM6WyJjb3VudHJ5Q2FsbGluZ0NvZGUiLCJwaG9uZU51bWJlciJdLGZuOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX19fX19LEZvcm06e3RpdGxlOmZ1bmN0aW9uKCl7dmFyIGU9bi5nZXRGYWN0b3JMYWJlbCh0aGlzLm1vZGVsLmdldCgiX19wcm92aWRlcl9fIiksdGhpcy5tb2RlbC5nZXQoIl9fZmFjdG9yVHlwZV9fIikpO3JldHVybiB0LmxvYygiZW5yb2xsLnRvdHAudGl0bGUiLCJsb2dpbiIsW2VdKX0sc3VidGl0bGU6aC5wYXJ0aWFsKHQubG9jLCJlbnJvbGwudG90cC5jYW5ub3RTY2FuQmFyY29kZSIsImxvZ2luIiksbm9CdXR0b25CYXI6ITAsYXR0cmlidXRlczp7ImRhdGEtc2UiOiJzdGVwLW1hbnVhbC1zZXR1cCJ9LGZvcm1DaGlsZHJlbjpmdW5jdGlvbigpe3ZhciBuPVtyLklucHV0KHtuYW1lOiJhY3RpdmF0aW9uVHlwZSIsdHlwZToic2VsZWN0Iix3aWRlOiEwLG9wdGlvbnM6e1NNUzp0LmxvYygiZW5yb2xsLnRvdHAuc2VuZFNtcyIsImxvZ2luIiksRU1BSUw6dC5sb2MoImVucm9sbC50b3RwLnNlbmRFbWFpbCIsImxvZ2luIiksTUE=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("Im5hdmlnYXRlRGlyIixuLkRJUkVDVElPTl9CQUNLKSx0aGlzLm9wdGlvbnMuYXBwU3RhdGUudHJpZ2dlcigibmF2aWdhdGUiLCIiKX19KTtyZXR1cm4gZS5leHRlbmQoe2NsYXNzTmFtZToiZm9yZ290LXBhc3N3b3JkIixNb2RlbDp7cHJvcHM6e3VzZXJuYW1lOlsic3RyaW5nIiwhMF0sZmFjdG9yVHlwZTpbInN0cmluZyIsITBdfSx2YWxpZGF0ZTpmdW5jdGlvbigpe3JldHVybiByLnZhbGlkYXRlVXNlcm5hbWUodGhpcyl9LHNhdmU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuc3RhcnRUcmFuc2FjdGlvbihmdW5jdGlvbihlKXsKCXJldHVybiBlLmZvcmdvdFBhc3N3b3JkKHt1c2VybmFtZTp0LnNldHRpbmdzLnRyYW5zZm9ybVVzZXJuYW1lKHQuZ2V0KCJ1c2VybmFtZSIpLG4uRk9SR09UX1BBU1NXT1JEKSxmYWN0b3JUeXBlOnQuZ2V0KCJmYWN0b3JUeXBlIil9KX0pLmZhaWwoZnVuY3Rpb24oKXt9KX19LEZvcm06e25vQnV0dG9uQmFyOiEwLHRpdGxlOmEucGFydGlhbCh0LmxvYywicGFzc3dvcmQucmVzZXQiLCJsb2dpbiIpLGZvcm1DaGlsZHJlbjpmdW5jdGlvbiB1KCl7dmFyIGU9dGhpcy5zZXR0aW5ncy5nZXQoImZlYXR1cmVzLnNtc1JlY292ZXJ5Iikscj10aGlzLnNldHRpbmdzLmdldCgiZmVhdHVyZXMuY2FsbFJlY292ZXJ5Iiksbz10aGlzLnNldHRpbmdzLmdldCgiZmVhdHVyZXMuZW1haWxSZWNvdmVyeSIpLGE9IShlfHxyfHxvKSx1PVtdO3JldHVybiBhP3RoaXMuYWRkKGwsIi5vLWZvcm0tZXJyb3ItY29udGFpbmVyIik6KHUucHVzaChpLklucHV0KHtwbGFjZWhvbGRlcjp0LmxvYygicGFzc3dvcmQuZm9yZ290LmVtYWlsLm9yLnVzZXJuYW1lLnBsYWNlaG9sZGVyIiwibG9naW4iKSxuYW1lOiJ1c2VybmFtZSIsaW5wdXQ6cyx0eXBlOiJ0ZXh0IixwYXJhbXM6e2lubmVyVG9vbHRpcDp0LmxvYygicGFzc3dvcmQuZm9yZ290LmVtYWlsLm9yLnVzZXJuYW1lLnRvb2x0aXAiLCJsb2dpbiIpLGljb246InBlcnNvbi0xNi1ncmF5In19KSksKGV8fHIpJiZ1LnB1c2goaS5WaWV3KHtWaWV3OnQuVmlldy5leHRlbmQoe3RlbXBsYXRlOidcdCAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtb2JpbGUtcmVjb3ZlcnktaGludCI+XHQgICAgICAgICAgICAgICAgICAgIHt7aTE4biBjb2RlPSJyZWNvdmVyeS5tb2JpbGUuaGludCIgYnVuZGxlPSJsb2dpbiIgYXJndW1lbnRzPSJtb2JpbGVGYWN0b3JzIn19XHQgICAgICAgICAgICAgICAgICA8L3A+JyxnZXRUZW1wbGF0ZURhdGE6ZnVuY3Rpb24oKXt2YXIgbjtyZXR1cm4gbj1lJiZyP3QubG9jKCJyZWNvdmVyeS5zbXNPckNhbGwiKTpyP3QubG9jKCJyZWNvdmVyeS5jYWxsIik6dC5sb2MoInJlY292ZXJ5LnNtcyIpLHttb2JpbGVGYWN0b3JzOm59fX0pfSkpLGUmJih0aGlzLiRlbC5hZGRDbGFzcygiZm9yZ290LXBhc3N3b3JkLXNtcy1lbmFibGVkIiksdS5wdXNoKHRoaXMuY3JlYXRlUmVjb3Zlcnk=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("IGNhbGxiYWNrICkgewoJCQlyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7CgkJfSwKCgkJbWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7CgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7CgkJCQlyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApOwoJCQl9ICkgKTsKCQl9LAoKCQlzbGljZTogZnVuY3Rpb24oKSB7CgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7CgkJfSwKCgkJZmlyc3Q6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5lcSggMCApOwoJCX0sCgoJCWxhc3Q6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5lcSggLTEgKTsKCQl9LAoKCQllcTogZnVuY3Rpb24oIGkgKSB7CgkJCXZhciBsZW4gPSB0aGlzLmxlbmd0aCwKCQkJCWogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7CgkJCXJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTsKCQl9LAoKCQllbmQ6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTsKCQl9LAoKCQkvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuCgkJLy8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuCgkJcHVzaDogcHVzaCwKCQlzb3J0OiBkZWxldGVkSWRzLnNvcnQsCgkJc3BsaWNlOiBkZWxldGVkSWRzLnNwbGljZQoJfTsKCglqUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkgewoJCXZhciBzcmMsIGNvcHlJc0FycmF5LCBjb3B5LCBuYW1lLCBvcHRpb25zLCBjbG9uZSwKCQkJdGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sCgkJCWkgPSAxLAoJCQlsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLAoJCQlkZWVwID0gZmFsc2U7CgoJCS8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb24KCQlpZiAoIHR5cGVvZiB0YXJnZXQgPT09ICJib29sZWFuIiApIHsKCQkJZGVlcCA9IHRhcmdldDsKCgkJCS8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXQKCQkJdGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307CgkJCWkrKzsKCQl9CgoJCS8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KQoJCWlmICggdHlwZW9mIHRhcmdldCAhPT0gIm9iamVjdCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHsKCQkJdGFyZ2V0ID0ge307CgkJfQoKCQkvLyBleHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWQKCQlpZiAoIGkgPT09IGxlbmd0aCApIHsKCQkJdGFyZ2V0ID0gdGhpczsKCQkJaS0tOwoJCX0KCgkJZm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7CgoJCQkvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzCgkJCWlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkgewoKCQkJCS8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3QKCQkJCWZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHsKCQkJCQlzcmMgPSB0YXJnZXRbIG5hbWUgXTsKCQkJCQljb3B5ID0gb3B0aW9uc1sgbmFtZSBdOwoKCQkJCQkvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wCgkJCQkJaWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7CgkJCQkJCWNvbnRpbnVlOwoJCQkJCX0KCgkJCQkJLy8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzCgkJCQkJaWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8CgkJCQkJCSggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHsKCgkJCQkJCWlmICggY29weUlzQXJyYXkgKSB7CgkJCQkJCQljb3B5SXNBcnJheSA9IGZhbHNlOwoJCQkJCQkJY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107CgoJCQkJCQl9IGVsc2UgewoJCQkJCQkJY2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307CgkJCQkJCX0KCgkJCQkJCS8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbQoJCQkJCQl0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7CgoJCQkJCS8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXMKCQkJCQl9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJCXRhcmdldFsgbmFtZSBdID0gY29weTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCS8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0CgkJcmV0dXJuIHRhcmdldDsKCX07CgoJalF1ZXJ5LmV4dGVuZCggewoKCQkvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2UKCQlleHBhbmRvOiAialF1ZXJ5IiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXEQvZywgIiIgKSwKCgkJLy8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGUKCQlpc1JlYWR5OiB0cnVlLAoKCQllcnJvcjogZnVuY3Rpb24oIG1zZyApIHsKCQkJdGhyb3cgbmV3IEVycm9yKCBtc2cgKTsKCQl9LAoKCQlub29wOiBmdW5jdGlvbigpIHt9LAoKCQkvLyBTZWUgdGVzdC91bml0L2NvcmUuanMgZm9yIGRldGFpbHMgY29uY2VybmluZyBpc0Z1bmN0aW9uLgoJCS8vIFNpbmNlIHZlcnNpb24gMS4zLCBET00gbWV0aG9kcyBhbmQgZnVuY3Rpb25zIGxpa2UgYWxlcnQKCQkvLyBhcmVuJ3Qgc3VwcG9ydGVkLiBUaGV5IA==", "base64"));
  res.write(new Buffer("cmV0dXJuIGZhbHNlIG9uIElFICgjMjk2OCkuCgkJaXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHsKCQkJcmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gImZ1bmN0aW9uIjsKCQl9LAoKCQlpc0FycmF5OiBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKCBvYmogKSB7CgkJCXJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09ICJhcnJheSI7CgkJfSwKCgkJaXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7CgkJCS8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovCgkJCXJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT0gb2JqLndpbmRvdzsKCQl9LAoKCQlpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7CgoJCQkvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAobnVsbHx0cnVlfGZhbHNlfCIiKQoJCQkvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzICgiMHguLi4iKQoJCQkvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU4KCQkJLy8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApCgkJCXZhciByZWFsU3RyaW5nT2JqID0gb2JqICYmIG9iai50b1N0cmluZygpOwoJCQlyZXR1cm4gIWpRdWVyeS5pc0FycmF5KCBvYmogKSAmJiAoIHJlYWxTdHJpbmdPYmogLSBwYXJzZUZsb2F0KCByZWFsU3RyaW5nT2JqICkgKyAxICkgPj0gMDsKCQl9LAoKCQlpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkgewoJCQl2YXIgbmFtZTsKCQkJZm9yICggbmFtZSBpbiBvYmogKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJcmV0dXJuIHRydWU7CgkJfSwKCgkJaXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHsKCQkJdmFyIGtleTsKCgkJCS8vIE11c3QgYmUgYW4gT2JqZWN0LgoJCQkvLyBCZWNhdXNlIG9mIElFLCB3ZSBhbHNvIGhhdmUgdG8gY2hlY2sgdGhlIHByZXNlbmNlIG9mIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS4KCQkJLy8gTWFrZSBzdXJlIHRoYXQgRE9NIG5vZGVzIGFuZCB3aW5kb3cgb2JqZWN0cyBkb24ndCBwYXNzIHRocm91Z2gsIGFzIHdlbGwKCQkJaWYgKCAhb2JqIHx8IGpRdWVyeS50eXBlKCBvYmogKSAhPT0gIm9iamVjdCIgfHwgb2JqLm5vZGVUeXBlIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCXRyeSB7CgoJCQkJLy8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdAoJCQkJaWYgKCBvYmouY29uc3RydWN0b3IgJiYKCQkJCQkhaGFzT3duLmNhbGwoIG9iaiwgImNvbnN0cnVjdG9yIiApICYmCgkJCQkJIWhhc093bi5jYWxsKCBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCAiaXNQcm90b3R5cGVPZiIgKSApIHsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0gY2F0Y2ggKCBlICkgewoKCQkJCS8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5NwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQkvLyBTdXBwb3J0OiBJRTw5CgkJCS8vIEhhbmRsZSBpdGVyYXRpb24gb3ZlciBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWZvcmUgb3duIHByb3BlcnRpZXMuCgkJCWlmICggIXN1cHBvcnQub3duRmlyc3QgKSB7CgkJCQlmb3IgKCBrZXkgaW4gb2JqICkgewoJCQkJCXJldHVybiBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTsKCQkJCX0KCQkJfQoKCQkJLy8gT3duIHByb3BlcnRpZXMgYXJlIGVudW1lcmF0ZWQgZmlyc3RseSwgc28gdG8gc3BlZWQgdXAsCgkJCS8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLgoJCQlmb3IgKCBrZXkgaW4gb2JqICkge30KCgkJCXJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbCggb2JqLCBrZXkgKTsKCQl9LAoKCQl0eXBlOiBmdW5jdGlvbiggb2JqICkgewoJCQlpZiAoIG9iaiA9PSBudWxsICkgewoJCQkJcmV0dXJuIG9iaiArICIiOwoJCQl9CgkJCXJldHVybiB0eXBlb2Ygb2JqID09PSAib2JqZWN0IiB8fCB0eXBlb2Ygb2JqID09PSAiZnVuY3Rpb24iID8KCQkJCWNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgIm9iamVjdCIgOgoJCQkJdHlwZW9mIG9iajsKCQl9LAoKCQkvLyBXb3JrYXJvdW5kcyBiYXNlZCBvbiBmaW5kaW5ncyBieSBKaW0gRHJpc2NvbGwKCQkvLyBodHRwOi8vd2VibG9ncy5qYXZhLm5ldC9ibG9nL2RyaXNjb2xsL2FyY2hpdmUvMjAwOS8wOS8wOC9ldmFsLWphdmFzY3JpcHQtZ2xvYmFsLWNvbnRleHQKCQlnbG9iYWxFdmFsOiBmdW5jdGlvbiggZGF0YSApIHsKCQkJaWYgKCBkYXRhICYmIGpRdWVyeS50cmltKCBkYXRhICkgKSB7CgoJCQkJLy8gV2UgdXNlIGV4ZWNTY3JpcHQgb24gSW50ZXJuZXQgRXhwbG9yZXIKCQkJCS8vIFdlIHVzZSBhbiBhbm9ueW1vdXMgZnVuY3Rpb24gc28gdGhhdCBjb250ZXh0IGlzIHdpbmRvdwoJCQkJLy8gcmF0aGVyIHRoYW4galF1ZXJ5IGluIEZpcmVmb3gKCQkJCSggd2luZG93LmV4ZWNTY3JpcHQgfHwgZnVuY3Rpb24oIGRhdGEgKSB7CgkJCQkJd2luZG93WyAiZXZhbCIgXS5jYWxsKCB3aW5kb3csIGRhdGEgKTsgLy8ganNjczppZ25vcmUgcmVxdWlyZURvdE5vdGF0aW9uCgkJCQl9ICkoIGRhdGEgKTsKCQkJfQoJCX0sCgoJCS8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXMKCQkvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpCgkJY2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkgewoJCQlyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgIm1zLSIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7CgkJfSwKCgkJbm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJCQlyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTsKCQl9LAoKCQllYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHsKCQkJdmFyIGxlbmd0aCwgaSA9IDA7CgoJCQlpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHsKCQkJCWxlbmd0aCA9IG9iai5sZW5ndGg7CgkJCQlmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkJCQlpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHsKCQkJCQkJYnJlYWs7CgkJCQkJfQoJCQkJfQoJCQl9IGVsc2UgewoJCQkJZm9yICggaSBpbiBvYmogKSB7CgkJCQkJaWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJcmV0dXJuIG9iajsKCQl9LAoKCQkvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMSwgSUU8OQoJCXRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkgewoJCQlyZXR1cm4gdGV4dCA9PSBudWxsID8KCQkJCSIiIDoKCQkJCSggdGV4dCArICIiICkucmVwbGFjZSggcnRyaW0sICIiICk7CgkJfSwKCgkJLy8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seQoJCW1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHsKCQkJdmFyIHJldCA9IHJlc3VsdHMgfHwgW107CgoJCQlpZiAoIGFyciAhPSBudWxsICkgewoJCQkJaWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkgewoJCQkJCWpRdWVyeS5tZXJnZSggcmV0LAoJCQkJCQl0eXBlb2YgYXJyID09PSAic3RyaW5nIiA/CgkJCQkJCVsgYXJyIF0gOiBhcnIKCQkJCQkpOwoJCQkJfSBlbHNlIHsKCQkJCQlwdXNoLmNhbGwoIHJldCwgYXJyICk7CgkJCQl9CgkJCX0KCgkJCXJldHVybiByZXQ7CgkJfSwKCgkJaW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHsKCQkJdmFyIGxlbjsKCgkJCWlmICggYXJyICkgewoJCQkJaWYgKCBpbmRleE9mICkgewoJCQkJCXJldHVybiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApOwoJCQkJfQoKCQkJCWxlbiA9IGFyci5sZW5ndGg7CgkJCQlpID0gaSA/IGkgPCAwID8gTWF0aC5tYXgoIDAsIGxlbiArIGkgKSA6IGkgOiAwOwoKCQkJCWZvciAoIDsgaSA8IGxlbjsgaSsrICkgewoKCQkJCQkvLyBTa2lwIGFjY2Vzc2luZyBpbiBzcGFyc2UgYXJyYXlzCgkJCQkJaWYgKCBpIGluIGFyciAmJiBhcnJbIGkgXSA9PT0gZWxlbSApIHsKCQkJCQkJcmV0dXJuIGk7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gLTE7CgkJfSwKCgkJbWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkgewoJCQl2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsCgkJCQlqID0gMCwKCQkJCWkgPSBmaXJzdC5sZW5ndGg7CgoJCQl3aGlsZSAoIGogPCBsZW4gKSB7CgkJCQlmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdOwoJCQl9CgoJCQkvLyBTdXBwb3J0OiBJRTw5CgkJCS8vIFdvcmthcm91bmQgY2FzdGluZyBvZiAubGVuZ3RoIHRvIE5hTiBvbiBvdGhlcndpc2UgYXJyYXlsaWtlIG9iamVjdHMgKGUuZy4sIE5vZGVMaXN0cykKCQkJaWYgKCBsZW4gIT09IGxlbiApIHsKCQkJCXdoaWxlICggc2Vjb25kWyBqIF0gIT09IHVuZGVmaW5lZCApIHsKCQkJCQlmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdOwoJCQkJfQoJCQl9CgoJCQlmaXJzdC5sZW5ndGggPSBpOwoKCQkJcmV0dXJuIGZpcnN0OwoJCX0sCgoJCWdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHsKCQkJdmFyIGNhbGxiYWNrSW52ZXJzZSwKCQkJCW1hdGNoZXMgPSBbXSwKCQkJCWkgPSAwLAoJCQkJbGVuZ3RoID0gZWxlbXMubGVuZ3RoLAoJCQkJY2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0OwoKCQkJLy8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtcwoJCQkvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvbgoJCQlmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHsKCQkJCWNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApOwoJCQkJaWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkgewoJCQkJCW1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApOwoJCQkJfQoJCQl9CgoJCQlyZXR1cm4gbWF0Y2hlczsKCQl9LAoKCQkvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHkKCQltYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHsKCQkJdmFyIGxlbmd0aCwgdmFsdWUsCgkJCQlpID0gMCwKCQkJCXJldCA9IFtdOwoKCQkJLy8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXMKCQkJaWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHsKCQkJCWxlbmd0aCA9IGVsZW1zLmxlbmd0aDsKCQkJCWZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkgewoJCQkJCXZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApOwoKCQkJCQlpZiAoIHZhbHVlICE9IG51bGwgKSB7CgkJCQkJCXJldC5wdXNoKCB2YWx1ZSApOwoJCQkJCX0KCQkJCX0KCgkJCS8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsCgkJCX0gZWxzZSB7CgkJCQlmb3IgKCBpIGluIGVsZW1zICkgewoJCQkJCXZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApOwoKCQkJCQlpZiAoIHZhbHVlICE9IG51bGwgKSB7CgkJCQkJCXJldC5wdXNoKCB2YWx1ZSApOwoJCQkJCX0KCQkJCX0KCQkJfQoKCQk=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("cmUgYWxyZWFkeSByZWFkeQoJCQlpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5CgkJCWpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTsKCgkJCS8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlCgkJCWlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlCgkJCXJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTsKCgkJCS8vIFRyaWdnZXIgYW55IGJvdW5kIHJlYWR5IGV2ZW50cwoJCQlpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHsKCQkJCWpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggInJlYWR5IiApOwoJCQkJalF1ZXJ5KCBkb2N1bWVudCApLm9mZiggInJlYWR5IiApOwoJCQl9CgkJfQoJfSApOwoKCS8qKgoJICogQ2xlYW4tdXAgbWV0aG9kIGZvciBkb20gcmVhZHkgZXZlbnRzCgkgKi8KCWZ1bmN0aW9uIGRldGFjaCgpIHsKCQlpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7CgkJCWRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICJET01Db250ZW50TG9hZGVkIiwgY29tcGxldGVkICk7CgkJCXdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAibG9hZCIsIGNvbXBsZXRlZCApOwoKCQl9IGVsc2UgewoJCQlkb2N1bWVudC5kZXRhY2hFdmVudCggIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIGNvbXBsZXRlZCApOwoJCQl3aW5kb3cuZGV0YWNoRXZlbnQoICJvbmxvYWQiLCBjb21wbGV0ZWQgKTsKCQl9Cgl9CgoJLyoqCgkgKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZAoJICovCglmdW5jdGlvbiBjb21wbGV0ZWQoKSB7CgoJCS8vIHJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgaXMgZ29vZCBlbm91Z2ggZm9yIHVzIHRvIGNhbGwgdGhlIGRvbSByZWFkeSBpbiBvbGRJRQoJCWlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciB8fAoJCQl3aW5kb3cuZXZlbnQudHlwZSA9PT0gImxvYWQiIHx8CgkJCWRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgKSB7CgoJCQlkZXRhY2goKTsKCQkJalF1ZXJ5LnJlYWR5KCk7CgkJfQoJfQoKCWpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHsKCQlpZiAoICFyZWFkeUxpc3QgKSB7CgoJCQlyZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTsKCgkJCS8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkCgkJCS8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLgoJCQkvLyBTdXBwb3J0OiBJRTYtMTAKCQkJLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgImludGVyYWN0aXZlIiB0b28gc29vbgoJCQlpZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICJjb21wbGV0ZSIgfHwKCQkJCSggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gImxvYWRpbmciICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHsKCgkJCQkvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHkKCQkJCXdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTsKCgkJCS8vIFN0YW5kYXJkcy1iYXNlZCBicm93c2VycyBzdXBwb3J0IERPTUNvbnRlbnRMb2FkZWQKCQkJfSBlbHNlIGlmICggZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciApIHsKCgkJCQkvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrCgkJCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAiRE9NQ29udGVudExvYWRlZCIsIGNvbXBsZXRlZCApOwoKCQkJCS8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrCgkJCQl3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggImxvYWQiLCBjb21wbGV0ZWQgKTsKCgkJCS8vIElmIElFIGV2ZW50IG1vZGVsIGlzIHVzZWQKCQkJfSBlbHNlIHsKCgkJCQkvLyBFbnN1cmUgZmlyaW5nIGJlZm9yZSBvbmxvYWQsIG1heWJlIGxhdGUgYnV0IHNhZmUgYWxzbyBmb3IgaWZyYW1lcwoJCQkJZG9jdW1lbnQuYXR0YWNoRXZlbnQoICJvbnJlYWR5c3RhdGVjaGFuZ2UiLCBjb21wbGV0ZWQgKTsKCgkJCQkvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29yawoJCQkJd2luZG93LmF0dGFjaEV2ZW50KCAib25sb2FkIiwgY29tcGxldGVkICk7CgoJCQkJLy8gSWYgSUUgYW5kIG5vdCBhIGZyYW1lCgkJCQkvLyBjb250aW51YWxseSBjaGVjayB0byBzZWUgaWYgdGhlIGRvY3VtZW50IGlzIHJlYWR5CgkJCQl2YXIgdG9wID0gZmFsc2U7CgoJCQkJdHJ5IHsKCQkJCQl0b3AgPSB3aW5kb3cuZnJhbWVFbGVtZW50ID09IG51bGwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwoJCQkJfSBjYXRjaCAoIGUgKSB7fQoKCQkJCWlmICggdG9wICYmIHRvcC5kb1Njcm9sbCApIHsKCQkJCQkoIGZ1bmN0aW9uIGRvU2Nyb2xsQ2hlY2soKSB7CgkJCQkJCWlmICggIWpRdWVyeS5pc1JlYWR5ICkgewoKCQkJCQkJCXRyeSB7CgoJCQkJCQkJCS8vIFVzZSB0aGUgdHJpY2sgYnkgRGllZ28gUGVyaW5pCgkJCQkJCQkJLy8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC8KCQkJCQkJCQl0b3AuZG9TY3JvbGwoICJsZWZ0IiApOwoJCQkJCQkJfSBjYXRjaCAoIGUgKSB7CgkJCQkJCQkJcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KCBkb1Njcm9sbENoZWNrLCA1MCApOwoJCQkJCQkJfQoKCQkJCQkJCS8vIGRldGFjaCBhbGwgZG9tIHJlYWR5IGV2ZW50cwoJCQkJCQkJZGV0YWNoKCk7CgoJCQkJCQkJLy8gYW5kIGV4ZWN1dGUgYW55IHdhaXRpbmcgZnVuY3Rpb25zCgkJCQkJCQlqUXVlcnkucmVhZHkoKTsKCQkJCQkJfQoJCQkJCX0gKSgpOwoJCQkJfQoJCQl9CgkJfQoJCXJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7Cgl9OwoKCS8vIEtpY2sgb2ZmIHRoZSBET00gcmVhZHkgY2hlY2sgZXZlbiBpZiB0aGUgdXNlciBkb2VzIG5vdAoJalF1ZXJ5LnJlYWR5LnByb21pc2UoKTsKCgoKCgkvLyBTdXBwb3J0OiBJRTw5CgkvLyBJdGVyYXRpb24gb3ZlciBvYmplY3QncyBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWZvcmUgaXRzIG93bgoJdmFyIGk7Cglmb3IgKCBpIGluIGpRdWVyeSggc3VwcG9ydCApICkgewoJCWJyZWFrOwoJfQoJc3VwcG9ydC5vd25GaXJzdCA9IGkgPT09ICIwIjsKCgkvLyBOb3RlOiBtb3N0IHN1cHBvcnQgdGVzdHMgYXJlIGRlZmluZWQgaW4gdGhlaXIgcmVzcGVjdGl2ZSBtb2R1bGVzLgoJLy8gZmFsc2UgdW50aWwgdGhlIHRlc3QgaXMgcnVuCglzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgPSBmYWxzZTsKCgkvLyBFeGVjdXRlIEFTQVAgaW4gY2FzZSB3ZSBuZWVkIHRvIHNldCBib2R5LnN0eWxlLnpvb20KCWpRdWVyeSggZnVuY3Rpb24oKSB7CgoJCS8vIE1pbmlmaWVkOiB2YXIgYSxiLGMsZAoJCXZhciB2YWwsIGRpdiwgYm9keSwgY29udGFpbmVyOwoKCQlib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICJib2R5IiApWyAwIF07CgkJaWYgKCAhYm9keSB8fCAhYm9keS5zdHlsZSApIHsKCgkJCS8vIFJldHVybiBmb3IgZnJhbWVzZXQgZG9jcyB0aGF0IGRvbid0IGhhdmUgYSBib2R5CgkJCXJldHVybjsKCQl9CgoJCS8vIFNldHVwCgkJZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggImRpdiIgKTsKCQljb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoJCWNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4IjsKCQlib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7CgoJCWlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSAidW5kZWZpbmVkIiApIHsKCgkJCS8vIFN1cHBvcnQ6IElFPDgKCQkJLy8gQ2hlY2sgaWYgbmF0aXZlbHkgYmxvY2stbGV2ZWwgZWxlbWVudHMgYWN0IGxpa2UgaW5saW5lLWJsb2NrCgkJCS8vIGVsZW1lbnRzIHdoZW4gc2V0dGluZyB0aGVpciBkaXNwbGF5IHRvICdpbmxpbmUnIGFuZCBnaXZpbmcKCQkJLy8gdGhlbSBsYXlvdXQKCQkJZGl2LnN0eWxlLmNzc1RleHQgPSAiZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7Ym9y", "base64"));
  res.write(new Buffer("ZGVyOjA7cGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MSI7CgoJCQlzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgPSB2YWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDM7CgkJCWlmICggdmFsICkgewoKCQkJCS8vIFByZXZlbnQgSUUgNiBmcm9tIGFmZmVjdGluZyBsYXlvdXQgZm9yIHBvc2l0aW9uZWQgZWxlbWVudHMgIzExMDQ4CgkJCQkvLyBQcmV2ZW50IElFIGZyb20gc2hyaW5raW5nIHRoZSBib2R5IGluIElFIDcgbW9kZSAjMTI4NjkKCQkJCS8vIFN1cHBvcnQ6IElFPDgKCQkJCWJvZHkuc3R5bGUuem9vbSA9IDE7CgkJCX0KCQl9CgoJCWJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApOwoJfSApOwoKCgkoIGZ1bmN0aW9uKCkgewoJCXZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAiZGl2IiApOwoKCQkvLyBTdXBwb3J0OiBJRTw5CgkJc3VwcG9ydC5kZWxldGVFeHBhbmRvID0gdHJ1ZTsKCQl0cnkgewoJCQlkZWxldGUgZGl2LnRlc3Q7CgkJfSBjYXRjaCAoIGUgKSB7CgkJCXN1cHBvcnQuZGVsZXRlRXhwYW5kbyA9IGZhbHNlOwoJCX0KCgkJLy8gTnVsbCBlbGVtZW50cyB0byBhdm9pZCBsZWFrcyBpbiBJRS4KCQlkaXYgPSBudWxsOwoJfSApKCk7Cgl2YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkgewoJCXZhciBub0RhdGEgPSBqUXVlcnkubm9EYXRhWyAoIGVsZW0ubm9kZU5hbWUgKyAiICIgKS50b0xvd2VyQ2FzZSgpIF0sCgkJCW5vZGVUeXBlID0gK2VsZW0ubm9kZVR5cGUgfHwgMTsKCgkJLy8gRG8gbm90IHNldCBkYXRhIG9uIG5vbi1lbGVtZW50IERPTSBub2RlcyBiZWNhdXNlIGl0IHdpbGwgbm90IGJlIGNsZWFyZWQgKCM4MzM1KS4KCQlyZXR1cm4gbm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgPwoJCQlmYWxzZSA6CgoJCQkvLyBOb2RlcyBhY2NlcHQgZGF0YSB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZDsgcmVqZWN0aW9uIGNhbiBiZSBjb25kaXRpb25hbAoJCQkhbm9EYXRhIHx8IG5vRGF0YSAhPT0gdHJ1ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggImNsYXNzaWQiICkgPT09IG5vRGF0YTsKCX07CgoKCgoJdmFyIHJicmFjZSA9IC9eKD86XHtbXHdcV10qXH18XFtbXHdcV10qXF0pJC8sCgkJcm11bHRpRGFzaCA9IC8oW0EtWl0pL2c7CgoJZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHsKCgkJLy8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueQoJCS8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZQoJCWlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7CgoJCQl2YXIgbmFtZSA9ICJkYXRhLSIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgIi0kMSIgKS50b0xvd2VyQ2FzZSgpOwoKCQkJZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7CgoJCQlpZiAoIHR5cGVvZiBkYXRhID09PSAic3RyaW5nIiApIHsKCQkJCXRyeSB7CgkJCQkJZGF0YSA9IGRhdGEgPT09ICJ0cnVlIiA/IHRydWUgOgoJCQkJCQlkYXRhID09PSAiZmFsc2UiID8gZmFsc2UgOgoJCQkJCQlkYXRhID09PSAibnVsbCIgPyBudWxsIDoKCgkJCQkJCS8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nCgkJCQkJCStkYXRhICsgIiIgPT09IGRhdGEgPyArZGF0YSA6CgkJCQkJCXJicmFjZS50ZXN0KCBkYXRhICkgPyBqUXVlcnkucGFyc2VKU09OKCBkYXRhICkgOgoJCQkJCQlkYXRhOwoJCQkJfSBjYXRjaCAoIGUgKSB7fQoKCQkJCS8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlcgoJCQkJalF1ZXJ5LmRhdGEoIGVsZW0sIGtleSwgZGF0YSApOwoKCQkJfSBlbHNlIHsKCQkJCWRhdGEgPSB1bmRlZmluZWQ7CgkJCX0KCQl9CgoJCXJldHVybiBkYXRhOwoJfQoKCS8vIGNoZWNrcyBhIGNhY2hlIG9iamVjdCBmb3IgZW1wdGluZXNzCglmdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkgewoJCXZhciBuYW1lOwoJCWZvciAoIG5hbWUgaW4gb2JqICkgewoKCQkJLy8gaWYgdGhlIHB1YmxpYyBkYXRhIG9iamVjdCBpcyBlbXB0eSwgdGhlIHByaXZhdGUgaXMgc3RpbGwgZW1wdHkKCQkJaWYgKCBuYW1lID09PSAiZGF0YSIgJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9ialsgbmFtZSBdICkgKSB7CgkJCQljb250aW51ZTsKCQkJfQoJCQlpZiAoIG5hbWUgIT09ICJ0b0pTT04iICkgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfQoKCQlyZXR1cm4gdHJ1ZTsKCX0KCglmdW5jdGlvbiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEsIHB2dCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHsKCQlpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7CgkJCXJldHVybjsKCQl9CgoJCXZhciByZXQsIHRoaXNDYWNoZSwKCQkJaW50ZXJuYWxLZXkgPSBqUXVlcnkuZXhwYW5kbywKCgkJCS8vIFdlIGhhdmUgdG8gaGFuZGxlIERPTSBub2RlcyBhbmQgSlMgb2JqZWN0cyBkaWZmZXJlbnRseSBiZWNhdXNlIElFNi03CgkJCS8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5CgkJCWlzTm9kZSA9IGVsZW0ubm9kZVR5cGUsCgoJCQkvLyBPbmx5IERPTSBub2RlcyBuZWVkIHRoZSBnbG9iYWwgalF1ZXJ5IGNhY2hlOyBKUyBvYmplY3QgZGF0YSBpcwoJCQkvLyBhdHRhY2hlZCBkaXJlY3RseSB0byB0aGUgb2JqZWN0IHNvIEdDIGNhbiBvY2N1ciBhdXRvbWF0aWNhbGx5CgkJCWNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSwKCgkJCS8vIE9ubHkgZGVmaW5pbmcgYW4gSUQgZm9yIEpTIG9iamVjdHMgaWYgaXRzIGNhY2hlIGFscmVhZHkgZXhpc3RzIGFsbG93cwoJCQkvLw==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("cGFjZXMuam9pbiggIlxcLig/Oi4qXFwufCkiICkgKyAiKFxcLnwkKSIgKTsKCgkJCQkvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzCgkJCQlvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoOwoJCQkJd2hpbGUgKCBqLS0gKSB7CgkJCQkJaGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTsKCgkJCQkJaWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJgoJCQkJCQkoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJgoJCQkJCQkoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmCgkJCQkJCSggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHwKCQkJCQkJCXNlbGVjdG9yID09PSAiKioiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkgewoJCQkJCQloYW5kbGVycy5zcGxpY2UoIGosIDEgKTsKCgkJCQkJCWlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkgewoJCQkJCQkJaGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tOwoJCQkJCQl9CgkJCQkJCWlmICggc3BlY2lhbC5yZW1vdmUgKSB7CgkJCQkJCQlzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCgkJCQkvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0CgkJCQkvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycykKCQkJCWlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7CgkJCQkJaWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fAoJCQkJCQlzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHsKCgkJCQkJCWpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7CgkJCQkJfQoKCQkJCQlkZWxldGUgZXZlbnRzWyB0eXBlIF07CgkJCQl9CgkJCX0KCgkJCS8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkCgkJCWlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkgewoJCQkJZGVsZXRlIGVsZW1EYXRhLmhhbmRsZTsKCgkJCQkvLyByZW1vdmVEYXRhIGFsc28gY2hlY2tzIGZvciBlbXB0aW5lc3MgYW5kIGNsZWFycyB0aGUgZXhwYW5kbyBpZiBlbXB0eQoJCQkJLy8gc28gdXNlIGl0IGluc3RlYWQgb2YgZGVsZXRlCgkJCQlqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sICJldmVudHMiICk7CgkJCX0KCQl9LAoKCQl0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHsKCQkJdmFyIGhhbmRsZSwgb250eXBlLCBjdXIsCgkJCQlidWJibGVUeXBlLCBzcGVjaWFsLCB0bXAsIGksCgkJCQlldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSwKCQkJCXR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsICJ0eXBlIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LAoJCQkJbmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgIm5hbWVzcGFjZSIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggIi4iICkgOiBbXTsKCgkJCWN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50OwoKCQkJLy8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXMKCQkJaWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCS8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vdwoJCQlpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCWlmICggdHlwZS5pbmRleE9mKCAiLiIgKSA+IC0xICkgewoKCQkJCS8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKCkKCQkJCW5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCAiLiIgKTsKCQkJCXR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7CgkJCQluYW1lc3BhY2VzLnNvcnQoKTsKCQkJfQoJCQlvbnR5cGUgPSB0eXBlLmluZGV4T2YoICI6IiApIDwgMCAmJiAib24iICsgdHlwZTsKCgkJCS8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZwoJCQlldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID8KCQkJCWV2ZW50IDoKCQkJCW5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gIm9iamVjdCIgJiYgZXZlbnQgKTsKCgkJCS8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSkKCQkJZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7CgkJCWV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggIi4iICk7CgkJCWV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgPwoJCQkJbmV3IFJlZ0V4cCggIihefFxcLikiICsgbmFtZXNwYWNlcy5qb2luKCAiXFwuKD86LipcXC58KSIgKSArICIoXFwufCQpIiApIDoKCQkJCW51bGw7CgoJCQkvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWQKCQkJZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkOwoJCQlpZiAoICFldmVudC50YXJnZXQgKSB7CgkJCQlldmVudC50YXJnZXQgPSBlbGVtOwoJCQl9Cg==", "base64"));
  res.write(new Buffer("CgkJCS8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3QKCQkJZGF0YSA9IGRhdGEgPT0gbnVsbCA/CgkJCQlbIGV2ZW50IF0gOgoJCQkJalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7CgoJCQkvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzCgkJCXNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9OwoJCQlpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpCgkJCS8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpCgkJCWlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7CgoJCQkJYnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7CgkJCQlpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkgewoJCQkJCWN1ciA9IGN1ci5wYXJlbnROb2RlOwoJCQkJfQoJCQkJZm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkgewoJCQkJCWV2ZW50UGF0aC5wdXNoKCBjdXIgKTsKCQkJCQl0bXAgPSBjdXI7CgkJCQl9CgoJCQkJLy8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pCgkJCQlpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHsKCQkJCQlldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7CgkJCQl9CgkJCX0KCgkJCS8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGgKCQkJaSA9IDA7CgkJCXdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7CgoJCQkJZXZlbnQudHlwZSA9IGkgPiAxID8KCQkJCQlidWJibGVUeXBlIDoKCQkJCQlzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7CgoJCQkJLy8galF1ZXJ5IGhhbmRsZXIKCQkJCWhhbmRsZSA9ICggalF1ZXJ5Ll9kYXRhKCBjdXIsICJldmVudHMiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmCgkJCQkJalF1ZXJ5Ll9kYXRhKCBjdXIsICJoYW5kbGUiICk7CgoJCQkJaWYgKCBoYW5kbGUgKSB7CgkJCQkJaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTsKCQkJCX0KCgkJCQkvLyBOYXRpdmUgaGFuZGxlcgoJCQkJaGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07CgkJCQlpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7CgkJCQkJZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTsKCQkJCQlpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7CgkJCQkJCWV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJCWV2ZW50LnR5cGUgPSB0eXBlOwoKCQkJLy8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vdwoJCQlpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkgewoKCQkJCWlmICgKCQkJCQkoICFzcGVjaWFsLl9kZWZhdWx0IHx8CgkJCQkJIHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZQoJCQkJCSkgJiYgYWNjZXB0RGF0YSggZWxlbSApCgkJCQkpIHsKCgkJCQkJLy8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LgoJCQkJCS8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuCgkJCQkJLy8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKQoJCQkJCWlmICggb250eXBlICYmIGVsZW1bIHR5cGUgXSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7CgoJCQkJCQkvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kCgkJCQkJCXRtcCA9IGVsZW1bIG9udHlwZSBdOwoKCQkJCQkJaWYgKCB0bXAgKSB7CgkJCQkJCQllbGVtWyBvbnR5cGUgXSA9IG51bGw7CgkJCQkJCX0KCgkJCQkJCS8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlCgkJCQkJCWpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlOwoJCQkJCQl0cnkgewoJCQkJCQkJZWxlbVsgdHlwZSBdKCk7CgkJCQkJCX0gY2F0Y2ggKCBlICkgewoKCQkJCQkJCS8vIElFPDkgZGllcyBvbiBmb2N1cy9ibHVyIHRvIGhpZGRlbiBlbGVtZW50ICgjMTQ4NiwjMTI1MTgpCgkJCQkJCQkvLyBvbmx5IHJlcHJvZHVjaWJsZSBvbiB3aW5YUCBJRTggbmF0aXZlLCBub3QgSUU5IGluIElFOCBtb2RlCgkJCQkJCX0KCQkJCQkJalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDsKCgkJCQkJCWlmICggdG1wICkgewoJCQkJCQkJZWxlbVsgb250eXBlIF0gPSB0bXA7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCX0KCgkJCXJldHVybiBldmVudC5yZXN1bHQ7CgkJfSwKCgkJZGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHsKCgkJCS8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdAoJCQlldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICk7CgoJCQl2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosCgkJCQloYW5kbGVyUXVldWUgPSBbXSwKCQkJCWFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSwKCQkJCWhhbmRsZXJzID0gKCBqUXVlcnkuX2RhdGEoIHRoaXMsICJldmVudHMiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLAoJCQkJc3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307CgoJCQkvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudAoJCQlhcmdzWyAwIF0gPSBldmVudDsKCQkJZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzOwoKCQkJLy8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZAoJCQlpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gRGV0ZXJtaW5lIGhhbmRsZXJzCgkJCWhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTsKCgkJCS8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzCgkJCWkgPSAwOwoJCQl3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHsKCQkJCWV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07CgoJCQkJaiA9IDA7CgkJCQl3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJgoJCQkJCSFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkgewoKCQkJCQkvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpCgkJCQkJLy8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuCgkJCQkJaWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHsKCgkJCQkJCWV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajsKCQkJCQkJZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhOwoKCQkJCQkJcmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fAoJCQkJCQkJaGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7CgoJCQkJCQlpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkgewoJCQkJCQkJaWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHsKCQkJCQkJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoJCQkJCQkJCWV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlCgkJCWlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7CgkJCQlzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApOwoJCQl9CgoJCQlyZXR1cm4gZXZlbnQucmVzdWx0OwoJCX0sCgoJCWhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkgewoJCQl2YXIgaSwgbWF0Y2hlcywgc2VsLCBoYW5kbGVPYmosCgkJCQloYW5kbGVyUXVldWUgPSBbXSwKCQkJCWRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LAoJCQkJY3VyID0gZXZlbnQudGFyZ2V0OwoKCQkJLy8gU3VwcG9ydCAoYXQgbGVhc3QpOiBDaHJvbWUsIElFOQoJCQkvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzCgkJCS8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApCgkJCS8vCgkJCS8vIFN1cHBvcnQ6IEZpcmVmb3g8PTQyKwoJCQkvLyBBdm9pZCBub24tbGVmdC1jbGljayBpbiBGRiBidXQgZG9uJ3QgYmxvY2sgSUUgcmFkaW8gZXZlbnRzICgjMzg2MSwgZ2gtMjM0MykKCQkJaWYgKCBkZWxlZ2F0ZUNvdW50ICYmIGN1ci5ub2RlVHlwZSAmJgoJCQkJKCBldmVudC50eXBlICE9PSAiY2xpY2siIHx8IGlzTmFOKCBldmVudC5idXR0b24gKSB8fCBldmVudC5idXR0b24gPCAxICkgKSB7CgoJCQkJLyoganNoaW50IGVxZXFlcTogZmFsc2UgKi8KCQkJCWZvciAoIDsgY3VyICE9IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7CgkJCQkJLyoganNoaW50IGVxZXFlcTogdHJ1ZSAqLwoKCQkJCQkvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOCkKCQkJCQkvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NCkKCQkJCQlpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoIGN1ci5kaXNhYmxlZCAhPT0gdHJ1ZSB8fCBldmVudC50eXBlICE9PSAiY2xpY2siICkgKSB7CgkJCQkJCW1hdGNoZXMgPSBbXTsKCQkJCQkJZm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7CgkJCQkJCQloYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdOwoKCQkJCQkJCS8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpCgkJCQkJCQlzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyAiICI7CgoJCQkJCQkJaWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkgewoJCQkJCQkJCW1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/CgkJCQkJCQkJCWpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOgoJCQkJCQkJCQlqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoOwoJCQkJCQkJfQoJCQkJCQkJaWYgKCBtYXRjaGVzWyBzZWwgXSApIHsKCQkJCQkJCQltYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCWlmICggbWF0Y2hlcy5sZW5ndGggKSB7CgkJCQkJCQloYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVzIH0gKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJLy8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVycwoJCQlpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7CgkJCQloYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiB0aGlzLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7CgkJCX0KCgkJCXJldHVybiBoYW5kbGVyUXVldWU7CgkJfSwKCgkJZml4OiBmdW5jdGlvbiggZXZlbnQgKSB7CgkJCWlmICggZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gKSB7CgkJCQlyZXR1cm4gZXZlbnQ7CgkJCX0KCgkJCS8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllcwoJCQl2YXIgaSwgcHJvcCwgY29weSwKCQkJCXR5cGUgPSBldmVudC50eXBlLAoJCQkJb3JpZ2luYWxFdmVudCA9IGV2ZW50LAoJCQkJZml4SG9vayA9IHRoaXMuZml4SG9va3NbIHR5cGUgXTsKCgkJCWlmICggIWZpeEhvb2sgKSB7CgkJCQl0aGlzLmZpeEhvb2tzWyB0eXBlIF0gPSBmaXhIb29rID0KCQkJCQlybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOgoJCQkJCXJrZXlFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLmtleUhvb2tzIDoKCQkJCQl7fTsKCQkJfQoJCQljb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzOwoKCQkJZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7CgoJCQlpID0gY29weS5sZW5ndGg7CgkJCXdoaWxlICggaS0tICkgewoJCQkJcHJvcCA9IGNvcHlbIGkgXTsKCQkJCWV2ZW50WyBwcm9wIF0gPSBvcmlnaW5hbEV2ZW50WyBwcm9wIF07CgkJCX0KCgkJCS8vIFN1cHBvcnQ6IElFPDkKCQkJLy8gRml4IHRhcmdldCBwcm9wZXJ0eSAoIzE5MjUpCgkJCWlmICggIWV2ZW50LnRhcmdldCApIHsKCQkJCWV2ZW50LnRhcmdldCA9IG9yaWdpbmFsRXZlbnQuc3JjRWxlbWVudCB8fCBkb2N1bWVudDsKCQkJfQoKCQkJLy8gU3VwcG9ydDogU2FmYXJpIDYtOCsKCQkJLy8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0MykKCQkJaWYgKCBldmVudC50YXJnZXQubm9kZVR5cGUgPT09IDMgKSB7CgkJCQlldmVudC50YXJnZXQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTsKCQkJfQoKCQkJLy8gU3VwcG9ydDogSUU8OQoJCQkvLyBGb3IgbW91c2Uva2V5IGV2ZW50cywgbWV0YUtleT09ZmFsc2UgaWYgaXQncyB1bmRlZmluZWQgKCMzMzY4LCAjMTEzMjgpCgkJCWV2ZW50Lm1ldGFLZXkgPSAhIWV2ZW50Lm1ldGFLZXk7CgoJCQlyZXR1cm4gZml4SG9vay5maWx0ZXIgPyBmaXhIb29rLmZpbHRlciggZXZlbnQsIG9yaWdpbmFsRXZlbnQgKSA6IGV2ZW50OwoJCX0sCgoJCS8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50CgkJcHJvcHM6ICggImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGRldGFpbCBldmVudFBoYXNlICIgKwoJCQkibWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaCIgKS5zcGxpdCggIiAiICksCgoJCWZpeEhvb2tzOiB7fSwKCgkJa2V5SG9va3M6IHsKCQkJcHJvcHM6ICJjaGFyIGNoYXJDb2RlIGtleSBrZXlDb2RlIi5zcGxpdCggIiAiICksCgkJCWZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHsKCgkJCQkvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHMKCQkJCWlmICggZXZlbnQud2hpY2ggPT0gbnVsbCApIHsKCQkJCQlldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7CgkJCQl9CgoJCQkJcmV0dXJuIGV2ZW50OwoJCQl9CgkJfSwKCgkJbW91c2VIb29rczogewoJCQlwcm9wczogKCAiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIGZyb21FbGVtZW50IG9mZnNldFggb2Zmc2V0WSAiICsKCQkJCSJwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50IiApLnNwbGl0KCAiICIgKSwKCQkJZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkgewoJCQkJdmFyIGJvZHksIGV2ZW50RG9jLCBkb2MsCgkJCQkJYnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLAoJCQkJCWZyb21FbGVtZW50ID0gb3JpZ2luYWwuZnJvbUVsZW1lbnQ7CgoJCQkJLy8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZQoJCQkJaWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHsKCQkJCQlldmVu", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("ZGlzcGxheSB2YWx1ZXM6CgkJLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheQoJCXJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLywKCQlybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCAiXigiICsgcG51bSArICIpKC4qKSQiLCAiaSIgKSwKCgkJY3NzU2hvdyA9IHsgcG9zaXRpb246ICJhYnNvbHV0ZSIsIHZpc2liaWxpdHk6ICJoaWRkZW4iLCBkaXNwbGF5OiAiYmxvY2siIH0sCgkJY3NzTm9ybWFsVHJhbnNmb3JtID0gewoJCQlsZXR0ZXJTcGFjaW5nOiAiMCIsCgkJCWZvbnRXZWlnaHQ6ICI0MDAiCgkJfSwKCgkJY3NzUHJlZml4ZXMgPSBbICJXZWJraXQiLCAiTyIsICJNb3oiLCAibXMiIF0sCgkJZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICJkaXYiICkuc3R5bGU7CgoKCS8vIHJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkKCWZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkgewoKCQkvLyBzaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZAoJCWlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkgewoJCQlyZXR1cm4gbmFtZTsKCQl9CgoJCS8vIGNoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXMKCQl2YXIgY2FwTmFtZSA9IG5hbWUuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSwKCQkJaSA9IGNzc1ByZWZpeGVzLmxlbmd0aDsKCgkJd2hpbGUgKCBpLS0gKSB7CgkJCW5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTsKCQkJaWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7CgkJCQlyZXR1cm4gbmFtZTsKCQkJfQoJCX0KCX0KCglmdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7CgkJdmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbiwKCQkJdmFsdWVzID0gW10sCgkJCWluZGV4ID0gMCwKCQkJbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoOwoKCQlmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkgewoJCQllbGVtID0gZWxlbWVudHNbIGluZGV4IF07CgkJCWlmICggIWVsZW0uc3R5bGUgKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJdmFsdWVzWyBpbmRleCBdID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCAib2xkZGlzcGxheSIgKTsKCQkJZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTsKCQkJaWYgKCBzaG93ICkgewoKCQkJCS8vIFJlc2V0IHRoZSBpbmxpbmUgZGlzcGxheSBvZiB0aGlzIGVsZW1lbnQgdG8gbGVhcm4gaWYgaXQgaXMKCQkJCS8vIGJlaW5nIGhpZGRlbiBieSBjYXNjYWRlZCBydWxlcyBvciBub3QKCQkJCWlmICggIXZhbHVlc1sgaW5kZXggXSAmJiBkaXNwbGF5ID09PSAibm9uZSIgKSB7CgkJCQkJZWxlbS5zdHlsZS5kaXNwbGF5ID0gIiI7CgkJCQl9CgoJCQkJLy8gU2V0IGVsZW1lbnRzIHdoaWNoIGhhdmUgYmVlbiBvdmVycmlkZGVuIHdpdGggZGlzcGxheTogbm9uZQoJCQkJLy8gaW4gYSBzdHlsZXNoZWV0IHRvIHdoYXRldmVyIHRoZSBkZWZhdWx0IGJyb3dzZXIgc3R5bGUgaXMKCQkJCS8vIGZvciBzdWNoIGFuIGVsZW1lbnQKCQkJCWlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSAiIiAmJiBpc0hpZGRlbiggZWxlbSApICkgewoJCQkJCXZhbHVlc1sgaW5kZXggXSA9CgkJCQkJCWpRdWVyeS5fZGF0YSggZWxlbSwgIm9sZGRpc3BsYXkiLCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApICk7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQloaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApOwoKCQkJCWlmICggZGlzcGxheSAmJiBkaXNwbGF5ICE9PSAibm9uZSIgfHwgIWhpZGRlbiApIHsKCQkJCQlqUXVlcnkuX2RhdGEoCgkJCQkJCWVsZW0sCgkJCQkJCSJvbGRkaXNwbGF5IiwKCQkJCQkJaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sICJkaXNwbGF5IiApCgkJCQkJKTsKCQkJCX0KCQkJfQoJCX0KCgkJLy8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AKCQkvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93CgkJZm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHsKCQkJZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdOwoJCQlpZiAoICFlbGVtLnN0eWxlICkgewoJCQkJY29udGludWU7CgkJCX0KCQkJaWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09ICJub25lIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09ICIiICkgewoJCQkJZWxlbS5zdHlsZS5kaXNwbGF5ID0gc2hvdyA/IHZhbHVlc1sgaW5kZXggXSB8fCAiIiA6ICJub25lIjsKCQkJfQoJCX0KCgkJcmV0dXJuIGVsZW1lbnRzOwoJfQoKCWZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7CgkJdmFyIG1hdGNoZXMgPSBybnVtc3BsaXQuZXhlYyggdmFsdWUgKTsKCQlyZXR1cm4gbWF0Y2hlcyA/CgoJCQkvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCAic3VidHJhY3QiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3MKCQkJTWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCAicHgiICkgOgoJCQl2YWx1ZTsKCX0KCglmdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7CgkJdmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/ICJib3JkZXIiIDogImNvbnRlbnQiICkgPwoKCQkJLy8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uCgkJCTQgOgoKCQkJLy8gT3RoZXJ3aXNlIA==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("dmFyIHN0eWxlcywgbGVuLAoJCQkJCW1hcCA9IHt9LAoJCQkJCWkgPSAwOwoKCQkJCWlmICggalF1ZXJ5LmlzQXJyYXkoIG5hbWUgKSApIHsKCQkJCQlzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTsKCQkJCQlsZW4gPSBuYW1lLmxlbmd0aDsKCgkJCQkJZm9yICggOyBpIDwgbGVuOyBpKysgKSB7CgkJCQkJCW1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTsKCQkJCQl9CgoJCQkJCXJldHVybiBtYXA7CgkJCQl9CgoJCQkJcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPwoJCQkJCWpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6CgkJCQkJalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApOwoJCQl9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTsKCQl9LAoJCXNob3c6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTsKCQl9LAoJCWhpZGU6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTsKCQl9LAoJCXRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkgewoJCQlpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gImJvb2xlYW4iICkgewoJCQkJcmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTsKCQkJfQoKCQkJcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7CgkJCQlpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7CgkJCQkJalF1ZXJ5KCB0aGlzICkuc2hvdygpOwoJCQkJfSBlbHNlIHsKCQkJCQlqUXVlcnkoIHRoaXMgKS5oaWRlKCk7CgkJCQl9CgkJCX0gKTsKCQl9Cgl9ICk7CgoKCWZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHsKCQlyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApOwoJfQoJalF1ZXJ5LlR3ZWVuID0gVHdlZW47CgoJVHdlZW4ucHJvdG90eXBlID0gewoJCWNvbnN0cnVjdG9yOiBUd2VlbiwKCQlpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7CgkJCXRoaXMuZWxlbSA9IGVsZW07CgkJCXRoaXMucHJvcCA9IHByb3A7CgkJCXRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7CgkJCXRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CgkJCXRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7CgkJCXRoaXMuZW5kID0gZW5kOwoJCQl0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gIiIgOiAicHgiICk7CgkJfSwKCQljdXI6IGZ1bmN0aW9uKCkgewoJCQl2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdOwoKCQkJcmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/CgkJCQlob29rcy5nZXQoIHRoaXMgKSA6CgkJCQlUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7CgkJfSwKCQlydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkgewoJCQl2YXIgZWFzZWQsCgkJCQlob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07CgoJCQlpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHsKCQkJCXRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKAoJCQkJCXBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvbgoJCQkJKTsKCQkJfSBlbHNlIHsKCQkJCXRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50OwoJCQl9CgkJCXRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDsKCgkJCWlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7CgkJCQl0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7CgkJCX0KCgkJCWlmICggaG9va3MgJiYgaG9va3Muc2V0ICkgewoJCQkJaG9va3Muc2V0KCB0aGlzICk7CgkJCX0gZWxzZSB7CgkJCQlUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7CgkJCX0KCQkJcmV0dXJuIHRoaXM7CgkJfQoJfTsKCglUd2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7CgoJVHdlZW4ucHJvcEhvb2tzID0gewoJCV9kZWZhdWx0OiB7CgkJCWdldDogZnVuY3Rpb24oIHR3ZWVuICkgewoJCQkJdmFyIHJlc3VsdDsKCgkJCQkvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LAoJCQkJLy8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy4KCQkJCWlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fAoJCQkJCXR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkgewoJCQkJCXJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07CgkJCQl9CgoJCQkJLy8gcGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5CgkJCQkvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzCgkJCQkvLyBzbywgc2ltcGxlIHZhbHVlcyBzdWNoIGFzICIxMHB4IiBhcmUgcGFyc2VkIHRvIEZsb2F0LgoJCQkJLy8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyAicm90YXRlKDFyYWQpIiBhcmUgcmV0dXJuZWQgYXMgaXMuCgkJCQlyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCAiIiApOwoKCQkJCS8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZA==", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("IGVsZW0sIG5hbWUsIGlzWE1MICkgewoJCQkJaWYgKCAhaXNYTUwgKSB7CgkJCQkJcmV0dXJuIGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoICJkZWZhdWx0LSIgKyBuYW1lICkgXSA/CgkJCQkJCW5hbWUudG9Mb3dlckNhc2UoKSA6CgkJCQkJCW51bGw7CgkJCQl9CgkJCX07CgkJfQoJfSApOwoKCS8vIGZpeCBvbGRJRSBhdHRyb3BlcnRpZXMKCWlmICggIWdldFNldElucHV0IHx8ICFnZXRTZXRBdHRyaWJ1dGUgKSB7CgkJalF1ZXJ5LmF0dHJIb29rcy52YWx1ZSA9IHsKCQkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7CgkJCQlpZiAoIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgImlucHV0IiApICkgewoKCQkJCQkvLyBEb2VzIG5vdCByZXR1cm4gc28gdGhhdCBzZXRBdHRyaWJ1dGUgaXMgYWxzbyB1c2VkCgkJCQkJZWxlbS5kZWZhdWx0VmFsdWUgPSB2YWx1ZTsKCQkJCX0gZWxzZSB7CgoJCQkJCS8vIFVzZSBub2RlSG9vayBpZiBkZWZpbmVkICgjMTk1NCk7IG90aGVyd2lzZSBzZXRBdHRyaWJ1dGUgaXMgZmluZQoJCQkJCXJldHVybiBub2RlSG9vayAmJiBub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICk7CgkJCQl9CgkJCX0KCQl9OwoJfQoKCS8vIElFNi83IGRvIG5vdCBzdXBwb3J0IGdldHRpbmcvc2V0dGluZyBzb21lIGF0dHJpYnV0ZXMgd2l0aCBnZXQvc2V0QXR0cmlidXRlCglpZiAoICFnZXRTZXRBdHRyaWJ1dGUgKSB7CgoJCS8vIFVzZSB0aGlzIGZvciBhbnkgYXR0cmlidXRlIGluIElFNi83CgkJLy8gVGhpcyBmaXhlcyBhbG1vc3QgZXZlcnkgSUU2LzcgaXNzdWUKCQlub2RlSG9vayA9IHsKCQkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7CgoJCQkJLy8gU2V0IHRoZSBleGlzdGluZyBvciBjcmVhdGUgYSBuZXcgYXR0cmlidXRlIG5vZGUKCQkJCXZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTsKCQkJCWlmICggIXJldCApIHsKCQkJCQllbGVtLnNldEF0dHJpYnV0ZU5vZGUoCgkJCQkJCSggcmV0ID0gZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSggbmFtZSApICkKCQkJCQkpOwoJCQkJfQoKCQkJCXJldC52YWx1ZSA9IHZhbHVlICs9ICIiOwoKCQkJCS8vIEJyZWFrIGFzc29jaWF0aW9uIHdpdGggY2xvbmVkIGVsZW1lbnRzIGJ5IGFsc28gdXNpbmcgc2V0QXR0cmlidXRlICgjOTY0NikKCQkJCWlmICggbmFtZSA9PT0gInZhbHVlIiB8fCB2YWx1ZSA9PT0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSApIHsKCQkJCQlyZXR1cm4gdmFsdWU7CgkJCQl9CgkJCX0KCQl9OwoKCQkvLyBTb21lIGF0dHJpYnV0ZXMgYXJlIGNvbnN0cnVjdGVkIHdpdGggZW1wdHktc3RyaW5nIHZhbHVlcyB3aGVuIG5vdCBkZWZpbmVkCgkJYXR0ckhhbmRsZS5pZCA9IGF0dHJIYW5kbGUubmFtZSA9IGF0dHJIYW5kbGUuY29vcmRzID0KCQkJZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkgewoJCQkJdmFyIHJldDsKCQkJCWlmICggIWlzWE1MICkgewoJCQkJCXJldHVybiAoIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgcmV0LnZhbHVlICE9PSAiIiA/CgkJCQkJCXJldC52YWx1ZSA6CgkJCQkJCW51bGw7CgkJCQl9CgkJCX07CgoJCS8vIEZpeGluZyB2YWx1ZSByZXRyaWV2YWwgb24gYSBidXR0b24gcmVxdWlyZXMgdGhpcyBtb2R1bGUKCQlqUXVlcnkudmFsSG9va3MuYnV0dG9uID0gewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkgewoJCQkJdmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApOwoJCQkJaWYgKCByZXQgJiYgcmV0LnNwZWNpZmllZCApIHsKCQkJCQlyZXR1cm4gcmV0LnZhbHVlOwoJCQkJfQoJCQl9LAoJCQlzZXQ6IG5vZGVIb29rLnNldAoJCX07CgoJCS8vIFNldCBjb250ZW50ZWRpdGFibGUgdG8gZmFsc2Ugb24gcmVtb3ZhbHMoIzEwNDI5KQoJCS8vIFNldHRpbmcgdG8gZW1wdHkgc3RyaW5nIHRocm93cyBhbiBlcnJvciBhcyBhbiBpbnZhbGlkIHZhbHVlCgkJalF1ZXJ5LmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGUgPSB7CgkJCXNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkgewoJCQkJbm9kZUhvb2suc2V0KCBlbGVtLCB2YWx1ZSA9PT0gIiIgPyBmYWxzZSA6IHZhbHVlLCBuYW1lICk7CgkJCX0KCQl9OwoKCQkvLyBTZXQgd2lkdGggYW5kIGhlaWdodCB0byBhdXRvIGluc3RlYWQgb2YgMCBvbiBlbXB0eSBzdHJpbmcoIEJ1ZyAjODE1MCApCgkJLy8gVGhpcyBpcyBmb3IgcmVtb3ZhbHMKCQlqUXVlcnkuZWFjaCggWyAid2lkdGgiLCAiaGVpZ2h0IiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHsKCQkJalF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdID0gewoJCQkJc2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7CgkJCQkJaWYgKCB2YWx1ZSA9PT0gIiIgKSB7CgkJCQkJCWVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCAiYXV0byIgKTsKCQkJCQkJcmV0dXJuIHZhbHVlOwoJCQkJCX0KCQkJCX0KCQkJfTsKCQl9ICk7Cgl9CgoJaWYgKCAhc3VwcG9ydC5zdHlsZSApIHsKCQlqUXVlcnkuYXR0ckhvb2tzLnN0eWxlID0gewoJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoKCQkJCS8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nCgkJCQkvLyBOb3RlOiBJRSB1cHBlcmNhc2VzIGNzcyBwcm9wZXJ0eSBuYW1lcywgYnV0IGlmIHdlIHdlcmUgdG8gLnRvTG93ZXJDYXNlKCkKCQkJCS8vIC5jc3NUZXh0LCB0aGF0IHdvdWxkIGRlc3Ryb3kgY2FzZSBzZW5zaXRpdml0eSBpbiBVUkwncywgbGlrZSBpbiAiYmFja2dyb3VuZCIKCQkJCXJldHVybiBlbGVtLnN0eWxlLmNzc1RleHQgfHwgdW5kZWZpbmVkOwoJCQl9LAoJCQlzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHsKCQkJCXJldHVybiAoIGVsZW0uc3R5bGUuY3NzVGV4dCA9IHZhbHVlICsgIiIgKTsKCQkJfQoJCX07Cgl9CgoKCgoJdmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSwKCQlyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pOwoKCWpRdWVyeS5mbi5leHRlbmQoIHsKCQlwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7CgkJCXJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTsKCQl9LAoKCQlyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHsKCQkJbmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTsKCQkJcmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7CgoJCQkJLy8gdHJ5L2NhdGNoIGhhbmRsZXMgY2FzZXMgd2hlcmUgSUUgYmFsa3MgKHN1Y2ggYXMgcmVtb3ZpbmcgYSBwcm9wZXJ0eSBvbiB3aW5kb3cpCgkJCQl0cnkgewoJCQkJCXRoaXNbIG5hbWUgXSA9IHVuZGVmaW5lZDsKCQkJCQlkZWxldGUgdGhpc1sgbmFtZSBdOwoJCQkJfSBjYXRjaCAoIGUgKSB7fQoJCQl9ICk7CgkJfQoJfSApOwoKCWpRdWVyeS5leHRlbmQoIHsKCQlwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7CgkJCXZhciByZXQsIGhvb2tzLAoJCQkJblR5cGUgPSBlbGVtLm5vZGVUeXBlOwoKCQkJLy8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2RlcwoJCQlpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQlpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHsKCgkJCQkvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzCgkJCQluYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lOwoJCQkJaG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07CgkJCX0KCgkJCWlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHsKCQkJCWlmICggaG9va3MgJiYgInNldCIgaW4gaG9va3MgJiYKCQkJCQkoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7CgkJCQkJcmV0dXJuIHJldDsKCQkJCX0KCgkJCQlyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApOwoJCQl9CgoJCQlpZiAoIGhvb2tzICYmICJnZXQiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHsKCQkJCXJldHVybiByZXQ7CgkJCX0KCgkJCXJldHVybiBlbGVtWyBuYW1lIF07CgkJfSwKCgkJcHJvcEhvb2tzOiB7CgkJCXRhYkluZGV4OiB7CgkJCQlnZXQ6IGZ1bmN0aW9uKCBlbGVtICkgewoKCQkJCQkvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGUKCQkJCQkvLyBjb3JyZWN0", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7CgkJCQkJZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTsKCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCX0KCgkJLy8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlCgkJaWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7CgkJCWZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTsKCQl9IGVsc2UgewoKCQkJLy8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlcwoJCQlmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHsKCQkJCWlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArICIgIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7CgkJCQkJZmluYWxEYXRhVHlwZSA9IHR5cGU7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCQlpZiAoICFmaXJzdERhdGFUeXBlICkgewoJCQkJCWZpcnN0RGF0YVR5cGUgPSB0eXBlOwoJCQkJfQoJCQl9CgoJCQkvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmUKCQkJZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTsKCQl9CgoJCS8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGUKCQkvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZAoJCS8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2UKCQlpZiAoIGZpbmFsRGF0YVR5cGUgKSB7CgkJCWlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7CgkJCQlkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApOwoJCQl9CgkJCXJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTsKCQl9Cgl9CgoJLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZQoJICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlCgkgKi8KCWZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHsKCQl2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldiwKCQkJY29udmVydGVycyA9IHt9LAoKCQkJLy8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvbgoJCQlkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpOwoKCQkvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXMKCQlpZiAoIGRhdGFUeXBlc1sgMSBdICkgewoJCQlmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHsKCQkJCWNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07CgkJCX0KCQl9CgoJCWN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTsKCgkJLy8gQ29udmVydCB0byBlYWM=", "base64"));
  res.write(new Buffer("aCBzZXF1ZW50aWFsIGRhdGFUeXBlCgkJd2hpbGUgKCBjdXJyZW50ICkgewoKCQkJaWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7CgkJCQlqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTsKCQkJfQoKCQkJLy8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWQKCQkJaWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkgewoJCQkJcmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7CgkJCX0KCgkJCXByZXYgPSBjdXJyZW50OwoJCQljdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7CgoJCQlpZiAoIGN1cnJlbnQgKSB7CgoJCQkJLy8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0bwoJCQkJaWYgKCBjdXJyZW50ID09PSAiKiIgKSB7CgoJCQkJCWN1cnJlbnQgPSBwcmV2OwoKCQkJCS8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnQKCQkJCX0gZWxzZSBpZiAoIHByZXYgIT09ICIqIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkgewoKCQkJCQkvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlcgoJCQkJCWNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgIiAiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbICIqICIgKyBjdXJyZW50IF07CgoJCQkJCS8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyCgkJCQkJaWYgKCAhY29udiApIHsKCQkJCQkJZm9yICggY29udjIgaW4gY29udmVydGVycyApIHsKCgkJCQkJCQkvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnQKCQkJCQkJCXRtcCA9IGNvbnYyLnNwbGl0KCAiICIgKTsKCQkJCQkJCWlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7CgoJCQkJCQkJCS8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dAoJCQkJCQkJCWNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgIiAiICsgdG1wWyAwIF0gXSB8fAoJCQkJCQkJCQljb252ZXJ0ZXJzWyAiKiAiICsgdG1wWyAwIF0gXTsKCQkJCQkJCQlpZiAoIGNvbnYgKSB7CgoJCQkJCQkJCQkvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzCgkJCQkJCQkJCWlmICggY29udiA9PT0gdHJ1ZSApIHsKCQkJCQkJCQkJCWNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdOwoKCQkJCQkJCQkJLy8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZQoJCQkJCQkJCQl9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkgewoJCQkJCQkJCQkJY3VycmVudCA9IHRtcFsgMCBdOwoJCQkJCQkJCQkJZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7CgkJCQkJCQkJCX0KCQkJCQkJCQkJYnJlYWs7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoKCQkJCQkvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSkKCQkJCQlpZiAoIGNvbnYgIT09IHRydWUgKSB7CgoJCQkJCQkvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtCgkJCQkJCWlmICggY29udiAmJiBzWyAidGhyb3dzIiBdICkgeyAvLyBqc2NzOmlnbm9yZSByZXF1aXJlRG90Tm90YXRpb24KCQkJCQkJCXJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXRyeSB7CgkJCQkJCQkJcmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApOwoJCQkJCQkJfSBjYXRjaCAoIGUgKSB7CgkJCQkJCQkJcmV0dXJuIHsKCQkJCQkJCQkJc3RhdGU6ICJwYXJzZXJlcnJvciIsCgkJCQkJCQkJCWVycm9yOiBjb252ID8gZSA6ICJObyBjb252ZXJzaW9uIGZyb20gIiArIHByZXYgKyAiIHRvICIgKyBjdXJyZW50CgkJCQkJCQkJfTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIHsgc3RhdGU6ICJzdWNjZXNzIiwgZGF0YTogcmVzcG9uc2UgfTsKCX0KCglqUXVlcnkuZXh0ZW5kKCB7CgoJCS8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllcwoJCWFjdGl2ZTogMCwKCgkJLy8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdAoJCWxhc3RNb2RpZmllZDoge30sCgkJZXRhZzoge30sCgoJCWFqYXhTZXR0aW5nczogewoJCQl1cmw6IGFqYXhMb2NhdGlvbiwKCQkJdHlwZTogIkdFVCIsCgkJCWlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGFqYXhMb2NQYXJ0c1sgMSBdICksCgkJCWdsb2JhbDogdHJ1ZSwKCQkJcHJvY2Vzc0RhdGE6IHRydWUsCgkJCWFzeW5jOiB0cnVlLAoJCQljb250ZW50VHlwZTogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCIsCgkJCS8qCgkJCXRpbWVvdXQ6IDAsCgkJCWRhdGE6IG51bGwsCgkJCWRhdGFUeXBlOiBudWxsLAoJCQl1c2VybmFtZTogbnVsbCwKCQkJcGFzc3dvcmQ6IG51bGwsCgkJCWNhY2hlOiBudWxsLAoJCQl0aHJvd3M6IGZhbHNlLAoJCQl0cmFkaXRpb25hbDogZmFsc2UsCgkJCWhlYWRlcnM6IHt9LAoJCQkqLwoKCQkJYWNjZXB0czogewoJCQkJIioiOiBhbGxUeXBlcywKCQkJCXRleHQ6ICJ0ZXh0L3BsYWluIiwKCQkJCWh0bWw6ICJ0ZXh0L2h0bWwiLAoJCQkJeG1sOiAiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCIsCgkJCQlqc29uOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0IgoJCQl9LAoKCQkJY29udGVudHM6IHsKCQkJCXhtbDogL1xieG1sXGIvLAoJCQkJaHRtbDogL1xiaHRtbC8sCgkJCQlqc29uOiAvXGJqc29uXGIvCgkJCX0sCgoJCQlyZXNwb25zZUZpZWxkczogewoJCQkJeG1sOiAicmVzcG9uc2VYTUwiLAoJCQkJdGV4dDogInJlc3BvbnNlVGV4dCIsCgkJCQlqc29uOiAicmVzcG9uc2VKU09OIgoJCQl9LAoKCQkJLy8gRGF0YSBjb252ZXJ0ZXJzCgkJCS8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCAiKiIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlCgkJCWNvbnZlcnRlcnM6IHsKCgkJCQkvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHQKCQkJCSIqIHRleHQiOiBTdHJpbmcsCgoJCQkJLy8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pCgkJCQkidGV4dCBodG1sIjogdHJ1ZSwKCgkJCQkvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uCgkJCQkidGV4dCBqc29uIjogalF1ZXJ5LnBhcnNlSlNPTiwKCgkJCQkvLyBQYXJzZSB0ZXh0IGFzIHhtbAoJCQkJInRleHQgeG1sIjogalF1ZXJ5LnBhcnNlWE1MCgkJCX0sCgoJCQkvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOgoJCQkvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmCgkJCS8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlCgkJCS8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKQoJCQlmbGF0T3B0aW9uczogewoJCQkJdXJsOiB0cnVlLAoJCQkJY29udGV4dDogdHJ1ZQoJCQl9CgkJfSwKCgkJLy8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXQKCQkvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuCgkJLy8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy4KCQlhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkgewoJCQlyZXR1cm4gc2V0dGluZ3MgPwoKCQkJCS8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0CgkJCQlhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6CgoJCQkJLy8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5ncwoJCQkJYWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7CgkJfSwKCgkJYWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksCgkJYWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksCgoJCS8vIE1haW4gbWV0aG9kCgkJYWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHsKCgkJCS8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlCgkJCWlmICggdHlwZW9mIHVybCA9PT0gIm9iamVjdCIgKSB7CgkJCQlvcHRpb25zID0gdXJsOwoJCQkJdXJsID0gdW5kZWZpbmVkOwoJCQl9CgoJCQkvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdAoJCQlvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCgkJCXZhcgoKCQkJCS8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFycwoJCQkJcGFydHMsCgoJCQkJLy8gTG9vcCB2YXJpYWJsZQoJCQkJaSwKCgkJCQkvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtCgkJCQljYWNoZVVSTCwKCgkJCQkvLyBSZXNwb25zZSBoZWFkZXJzIGFzIHN0cmluZwoJCQkJcmVzcG9uc2VIZWFkZXJzU3RyaW5nLAoKCQkJCS8vIHRpbWVvdXQgaGFuZGxlCgkJCQl0aW1lb3V0VGltZXIsCgoJCQkJLy8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkCgkJCQlmaXJlR2xvYmFscywKCgkJCQl0cmFuc3BvcnQsCgoJCQkJLy8gUmVzcG9uc2UgaGVhZGVycwoJCQkJcmVzcG9uc2VIZWFkZXJzLAoKCQkJCS8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3QKCQkJCXMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLAoKCQkJCS8vIENhbGxiYWNrcyBjb250ZXh0CgkJCQljYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcywKCgkJCQkvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uCgkJCQlnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiYKCQkJCQkoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgPwoJCQkJCQlqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDoKCQkJCQkJalF1ZXJ5LmV2ZW50LAoKCQkJCS8vIERlZmVycmVkcwoJCQkJZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSwKCQkJCWNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCAib25jZSBtZW1vcnkiICksCgoJCQkJLy8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3MKCQkJCXN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sCgoJCQkJLy8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSkKCQkJCXJlcXVlc3RIZWFkZXJzID0ge30sCgkJCQlyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sCgoJCQkJLy8gVGhlIGpxWEhSIHN0YXRlCgkJCQlzdGF0ZSA9IDAsCgoJCQkJLy8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlCgkJCQlzdHJBYm9ydCA9ICJjYW5jZWxlZCIsCgoJCQkJLy8gRmFrZSB4aHIKCQkJCWpxWEhSID0gewoJCQkJCXJlYWR5U3RhdGU6IDAsCgoJCQkJCS8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWQKCQkJCQlnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHsKCQkJCQkJdmFyIG1hdGNoOwoJCQkJCQlpZiAoIHN0YXRlID09PSAyICkgewoJCQkJCQkJaWYgKCAhcmVzcG9uc2VIZWFkZXJzICkgewoJCQkJCQkJCXJlc3BvbnNlSGVhZGVycyA9IHt9OwoJCQkJCQkJCXdoaWxlICggKCBtYXRjaCA9IHJoZWE=", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("", "base64"));
  res.write(new Buffer("ICAgICAgICAgICAgIHJldHVybjsKCSAgICAgICAgICAgIH0KCSAgICAgICAgfQoKCSAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMub3B0aW9ucy50aXRsZSA/IHRoaXMub3B0aW9ucy50aXRsZSA6IG1ldGEuZGF0YSgndGl0bGUnKSB8fCAkKCd0aXRsZScpLnRleHQoKS5yZXBsYWNlKC9ccypbfFwtwrddLiokLywgJycpOwoJICAgICAgICB0aGlzLmF1dGhvciA9IHRoaXMub3B0aW9ucy5hdXRob3IgPyB0aGlzLm9wdGlvbnMuYXV0aG9yIDogbWV0YS5kYXRhKCdhdXRob3InKSB8fCAoJCgnbWV0YVtuYW1lPSJhdXRob3IiXScpLmxlbmd0aCA/ICQoJ21ldGFbbmFtZT0iYXV0aG9yIl0nKS5hdHRyKCdjb250ZW50JykgOiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpOwoJICAgICAgICB0aGlzLmljb25VcmwgPSBtZXRhLmRhdGEoJ2ljb24tdXJsJyk7CgkgICAgICAgIHRoaXMucHJpY2UgPSBtZXRhLmRhdGEoJ3ByaWNlJyk7CgoJICAgICAgICAvLyBTZXQgZGVmYXVsdCBvbkluc3RhbGwgY2FsbGJhY2sgaWYgbm90IHNldCBpbiBvcHRpb25zCgkgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm9uSW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykgewoJICAgICAgICAgICAgdGhpcy5vcHRpb25zLm9uSW5zdGFsbCA9IHRoaXMub3B0aW9ucy5vbkluc3RhbGw7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICB0aGlzLm9wdGlvbnMub25JbnN0YWxsID0gZnVuY3Rpb24gKCkge307CgkgICAgICAgIH0KCgkgICAgICAgIC8vIFNldCBkZWZhdWx0IG9uQ2xvc2UgY2FsbGJhY2sgaWYgbm90IHNldCBpbiBvcHRpb25zCgkgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm9uQ2xvc2UgPT09ICdmdW5jdGlvbicpIHsKCSAgICAgICAgICAgIHRoaXMub3B0aW9ucy5vbkNsb3NlID0gdGhpcy5vcHRpb25zLm9uQ2xvc2U7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICB0aGlzLm9wdGlvbnMub25DbG9zZSA9IGZ1bmN0aW9uICgpIHt9OwoJICAgICAgICB9CgoJICAgICAgICAvLyBDcmVhdGUgYmFubmVyCgkgICAgICAgIHRoaXMuY3JlYXRlKCk7CgkgICAgICAgIHRoaXMuc2hvdygpOwoJICAgICAgICB0aGlzLmxpc3RlbigpOwoJICAgIH07CgoJICAgIFNtYXJ0QmFubmVyLnByb3RvdHlwZSA9IHsKCgkgICAgICAgIGNvbnN0cnVjdG9yOiBTbWFydEJhbm5lcgoKCSAgICAgICwgY3JlYXRlOiBmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICB2YXIgaWNvblVSTDsKCSAgICAgICAgICAgIHZhciBsaW5rID0gKHRoaXMub3B0aW9ucy51cmwgPyB0aGlzLm9wdGlvbnMudXJsIDogKHRoaXMudHlwZSA9PSAnd2luZG93cycgPyAnbXMtd2luZG93cy1zdG9yZTpuYXZpZ2F0ZT9hcHBpZD0nIDogKHRoaXMudHlwZSA9PSAnYW5kcm9pZCcgPyAnbWFya2V0Oi8vZGV0YWlscz9pZD0nIDogKHRoaXMudHlwZSA9PSAna2luZGxlJyA/ICdhbXpuOi8vYXBwcy9hbmRyb2lkP2FzaW49JyA6ICdodHRwczovL2l0dW5lcy5hcHBsZS5jb20vJyArIHRoaXMub3B0aW9ucy5hcHBTdG9yZUxhbmd1YWdlICsgJy9hcHAvaWQnKSkpICsgdGhpcy5hcHBJZCk7CgkgICAgICAgICAgICB2YXIgcHJpY2UgPSB0aGlzLnByaWNlIHx8IHRoaXMub3B0aW9ucy5wcmljZTsKCSAgICAgICAgICAgIHZhciBpblN0b3JlID0gcHJpY2UgPyBwcmljZSArICcgLSAnICsgKHRoaXMudHlwZSA9PSAnYW5kcm9pZCcgPyB0aGlzLm9wdGlvbnMuaW5Hb29nbGVQbGF5IDogdGhpcy50eXBlID09ICdraW5kbGUnID8gdGhpcy5vcHRpb25zLmluQW1hem9uQXBwU3RvcmUgOiB0aGlzLnR5cGUgPT0gJ2lvcycgPyB0aGlzLm9wdGlvbnMuaW5BcHBTdG9yZSA6IHRoaXMub3B0aW9ucy5pbldpbmRvd3NTdG9yZSkgOiAnJzsKCSAgICAgICAgICAgIHZhciBnbG9zcyA9IHRoaXMub3B0aW9ucy5pY29uR2xvc3MgPT09IG51bGwgPyAodGhpcy50eXBlPT0naW9zJykgOiB0aGlzLm9wdGlvbnMuaWNvbkdsb3NzOwoKCSAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ2FuZHJvaWQnICYmIHRoaXMub3B0aW9ucy5Hb29nbGVQbGF5UGFyYW1zKSB7CgkgICAgICAgICAgICAgIGxpbmsgPSBsaW5rICsgJyZyZWZlcnJlcj0nICsgdGhpcy5vcHRpb25zLkdvb2dsZVBsYXlQYXJhbXM7CgkgICAgICAgICAgICB9CgoJICAgICAgICAgICAgdmFyIGJhbm5lciA9ICc8ZGl2IGlkPSJzbWFydGJhbm5lciIgY2xhc3M9IicgKyB0aGlzLnR5cGUgKyAnIj48ZGl2IGNsYXNzPSJzYi1jb250YWluZXIiPjxhIGhyZWY9IiMiIGNsYXNzPSJzYi1jbG9zZSI+JnRpbWVzOzwvYT48c3BhbiBjbGFzcz0ic2ItaWNvbiI+PC9zcGFuPjxkaXYgY2xhc3M9InNiLWluZm8iPjxzdHJvbmc+JyArIHRoaXMudGl0bGUgKyAnPC9zdHJvbmc+PHNwYW4+JyArIHRoaXMuYXV0aG9yICsgJzwvc3Bhbj48c3Bhbj4nICsgaW5TdG9yZSArICc8L3NwYW4+PC9kaXY+PGEgaHJlZj0iJyArIGxpbmsgKyAnIiBjbGFzcz0ic2ItYnV0dG9uIj48c3Bhbj4nICsgdGhpcy5vcHRpb25zLmJ1dHRvbiArICc8L3NwYW4+PC9hPjwvZGl2PjwvZGl2Pic7CgkgICAgICAgICAgICAodGhpcy5vcHRpb25zLmxheWVyKSA/ICQodGhpcy5vcHRpb25zLmFwcGVuZFRvU2VsZWN0b3IpLmFwcGVuZChiYW5uZXIpIDogJCh0aGlzLm9wdGlvbnMuYXBwZW5kVG9TZWxlY3RvcikucHJlcGVuZChiYW5uZXIpOwoKCSAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaWNvbikgewoJICAgICAgICAgICAgICAgIGljb25VUkwgPSB0aGlzLm9wdGlvbnMuaWNvbjsKCSAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLmljb25VcmwpIHsKCSAgICAgICAgICAgICAgICBpY29uVVJMID0gdGhpcy5pY29uVXJsOwoJICAgICAgICAgICAgfSBlbHNlIGlmICgkKCdsaW5rW3JlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCJdJykubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgICAgIGljb25VUkwgPSAkKCdsaW5rW3JlbD0iYXBwbGUtdG91Y2gtaWNvbi1wcmVjb21wb3NlZCJdJykuYXR0cignaHJlZicpOwoJICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaWNvbkdsb3NzID09PSBudWxsKSBnbG9zcyA9IGZhbHNlOwoJICAgICAgICAgICAgfSBlbHNlIGlmICgkKCdsaW5rW3JlbD0iYXBwbGUtdG91Y2gtaWNvbiJdJykubGVuZ3RoID4gMCkgewoJICAgICAgICAgICAgICAgIGljb25VUkwgPSAkKCdsaW5rW3JlbD0iYXBwbGUtdG91Y2gtaWNvbiJdJykuYXR0cignaHJlZicpOwoJICAgICAgICAgICAgfSBlbHNlIGlmICgkKCdtZXRhW25hbWU9Im1zQXBwbGljYXRpb24tVGlsZUltYWdlIl0nKS5sZW5ndGggPiAwKSB7CgkgICAgICAgICAgICAgIGljb25VUkwgPSAkKCdtZXRhW25hbWU9Im1zQXBwbGljYXRpb24tVGlsZUltYWdlIl0nKS5hdHRyKCdjb250ZW50Jyk7CgkgICAgICAgICAgICB9IGVsc2UgaWYgKCQoJ21ldGFbbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlSW1hZ2UiXScpLmxlbmd0aCA+IDApIHsgLyogcmVkdW5kYW50IGJlY2F1c2UgbXMgZG9jcyBzaG93IHR3byBjYXNlIHVzYWdlcyAqLwoJICAgICAgICAgICAgICBpY29uVVJMID0gJCgnbWV0YVtuYW1lPSJtc2FwcGxpY2F0aW9uLVRpbGVJbWFnZSJdJykuYXR0cignY29udGVudCcpOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIGlmIChpY29uVVJMKSB7CgkgICAgICAgICAgICAgICAgJCgnI3NtYXJ0YmFubmVyIC5zYi1pY29uJykuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywndXJsKCcgKyBpY29uVVJMICsgJyknKTsKCSAgICAgICAgICAgICAgICBpZiAoZ2xvc3MpICQoJyNzbWFydGJhbm5lciAuc2ItaWNvbicpLmFkZENsYXNzKCdnbG9zcycpOwoJICAgICAgICAgICAgfSBlbHNlewoJICAgICAgICAgICAgICAgICQoJyNzbWFydGJhbm5lcicpLmFkZENsYXNzKCduby1pY29uJyk7CgkgICAgICAgICAgICB9CgoJICAgICAgICAgICAgdGhpcy5iYW5uZXJIZWlnaHQgPSAkKCcjc21hcnRiYW5uZXInKS5vdXRlckhlaWdodCgpICsgMjsKCgkgICAgICAgICAgICBpZiAodGhpcy5zY2FsZSA+IDEpIHsKCSAgICAgICAgICAgICAgICAkKCcjc21hcnRiYW5uZXInKQoJICAgICAgICAgICAgICAgICAgICAuY3NzKCd0b3AnLCBwYXJzZUZsb2F0KCQoJyNzbWFydGJhbm5lcicpLmNzcygndG9wJykpICogdGhpcy5zY2FsZSkKCSAgICAgICAgICAgICAgICAgICAgLmNzcygnaGVpZ2h0JywgcGFyc2VGbG9hdCgkKCcjc21hcnRiYW5uZXInKS5jc3MoJ2hlaWdodCcpKSAqIHRoaXMuc2NhbGUpCgkgICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7CgkgICAgICAgICAgICAgICAgJCgnI3NtYXJ0YmFubmVyIC5zYi1jb250YWluZXInKQoJICAgICAgICAgICAgICAgICAgICAuY3NzKCctd2Via2l0LXRyYW5zZm9ybScsICdzY2Fs", "base64"));
  res.write(new Buffer("", "base64"));
  res.end();

  return __filename;
};
